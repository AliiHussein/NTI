
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006b0  00000744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  00000746  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4b  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000964  00000000  00000000  000016ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a9  00000000  00000000  00002063  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  0000290c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a3  00000000  00000000  00002b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a36  00000000  00000000  0000313f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003b75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_1>
   8:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_2>
   c:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	8f 00       	.word	0x008f	; ????
  56:	9c 00       	.word	0x009c	; ????
  58:	a9 00       	.word	0x00a9	; ????
  5a:	b6 00       	.word	0x00b6	; ????
  5c:	c3 00       	.word	0x00c3	; ????
  5e:	d0 00       	.word	0x00d0	; ????
  60:	dd 00       	.word	0x00dd	; ????
  62:	ea 00       	.word	0x00ea	; ????
  64:	f7 00       	.word	0x00f7	; ????
  66:	04 01       	movw	r0, r8

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a2 e6       	ldi	r26, 0x62	; 98
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 36       	cpi	r26, 0x68	; 104
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  9e:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <sevenseg_init>:
 */ 

#include "SevenSeg.h"

void sevenseg_init(){
	SEVEN_SEG_INIT_PORTS();
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	8a b3       	in	r24, 0x1a	; 26
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret

000000ba <sevenseg_write>:
	
}

void sevenseg_write(uint8 value, uint8 ss_num){
  ba:	e8 2f       	mov	r30, r24
	
	EN1_DIS();EN2_DIS();EN3_DIS();EN4_DIS();
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	88 bb       	out	0x18, r24	; 24
	
	switch(ss_num){
  d4:	62 30       	cpi	r22, 0x02	; 2
  d6:	69 f0       	breq	.+26     	; 0xf2 <sevenseg_write+0x38>
  d8:	18 f4       	brcc	.+6      	; 0xe0 <sevenseg_write+0x26>
  da:	61 30       	cpi	r22, 0x01	; 1
  dc:	31 f0       	breq	.+12     	; 0xea <sevenseg_write+0x30>
  de:	14 c0       	rjmp	.+40     	; 0x108 <sevenseg_write+0x4e>
  e0:	63 30       	cpi	r22, 0x03	; 3
  e2:	59 f0       	breq	.+22     	; 0xfa <sevenseg_write+0x40>
  e4:	64 30       	cpi	r22, 0x04	; 4
  e6:	69 f0       	breq	.+26     	; 0x102 <sevenseg_write+0x48>
  e8:	0f c0       	rjmp	.+30     	; 0x108 <sevenseg_write+0x4e>
		case 1: EN1_EN(); break;
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	87 7f       	andi	r24, 0xF7	; 247
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	0b c0       	rjmp	.+22     	; 0x108 <sevenseg_write+0x4e>
		case 2: EN2_EN(); break;
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	07 c0       	rjmp	.+14     	; 0x108 <sevenseg_write+0x4e>
		case 3: EN3_EN(); break;
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	8f 7d       	andi	r24, 0xDF	; 223
  fe:	88 bb       	out	0x18, r24	; 24
 100:	03 c0       	rjmp	.+6      	; 0x108 <sevenseg_write+0x4e>
		case 4: EN4_EN(); break;
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8f 7b       	andi	r24, 0xBF	; 191
 106:	88 bb       	out	0x18, r24	; 24
	}
	
	switch(value){
 108:	8e 2f       	mov	r24, r30
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	91 05       	cpc	r25, r1
 110:	08 f0       	brcs	.+2      	; 0x114 <sevenseg_write+0x5a>
 112:	86 c0       	rjmp	.+268    	; 0x220 <sevenseg_write+0x166>
 114:	fc 01       	movw	r30, r24
 116:	e6 5d       	subi	r30, 0xD6	; 214
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__tablejump2__>
		case 0: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	8f 7e       	andi	r24, 0xEF	; 239
 122:	88 bb       	out	0x18, r24	; 24
 124:	88 b3       	in	r24, 0x18	; 24
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	88 bb       	out	0x18, r24	; 24
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	88 bb       	out	0x18, r24	; 24
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	88 bb       	out	0x18, r24	; 24
 136:	74 c0       	rjmp	.+232    	; 0x220 <sevenseg_write+0x166>
		case 1: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	8f 7e       	andi	r24, 0xEF	; 239
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	8b 7f       	andi	r24, 0xFB	; 251
 142:	88 bb       	out	0x18, r24	; 24
 144:	88 b3       	in	r24, 0x18	; 24
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	88 bb       	out	0x18, r24	; 24
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	88 bb       	out	0x18, r24	; 24
 150:	67 c0       	rjmp	.+206    	; 0x220 <sevenseg_write+0x166>
		case 2: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); SETBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 152:	88 b3       	in	r24, 0x18	; 24
 154:	8f 7e       	andi	r24, 0xEF	; 239
 156:	88 bb       	out	0x18, r24	; 24
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	82 60       	ori	r24, 0x02	; 2
 162:	88 bb       	out	0x18, r24	; 24
 164:	88 b3       	in	r24, 0x18	; 24
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	88 bb       	out	0x18, r24	; 24
 16a:	5a c0       	rjmp	.+180    	; 0x220 <sevenseg_write+0x166>
		case 3: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); SETBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	88 bb       	out	0x18, r24	; 24
 172:	88 b3       	in	r24, 0x18	; 24
 174:	8b 7f       	andi	r24, 0xFB	; 251
 176:	88 bb       	out	0x18, r24	; 24
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	88 bb       	out	0x18, r24	; 24
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	81 60       	ori	r24, 0x01	; 1
 182:	88 bb       	out	0x18, r24	; 24
 184:	4d c0       	rjmp	.+154    	; 0x220 <sevenseg_write+0x166>
		case 4: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); CLRBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 186:	88 b3       	in	r24, 0x18	; 24
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	88 b3       	in	r24, 0x18	; 24
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	88 bb       	out	0x18, r24	; 24
 192:	88 b3       	in	r24, 0x18	; 24
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	88 bb       	out	0x18, r24	; 24
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	8e 7f       	andi	r24, 0xFE	; 254
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	40 c0       	rjmp	.+128    	; 0x220 <sevenseg_write+0x166>
		case 5: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); CLRBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 1a0:	88 b3       	in	r24, 0x18	; 24
 1a2:	8f 7e       	andi	r24, 0xEF	; 239
 1a4:	88 bb       	out	0x18, r24	; 24
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	88 b3       	in	r24, 0x18	; 24
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	88 bb       	out	0x18, r24	; 24
 1b2:	88 b3       	in	r24, 0x18	; 24
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	88 bb       	out	0x18, r24	; 24
 1b8:	33 c0       	rjmp	.+102    	; 0x220 <sevenseg_write+0x166>
		case 6: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); SETBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	8f 7e       	andi	r24, 0xEF	; 239
 1be:	88 bb       	out	0x18, r24	; 24
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	88 b3       	in	r24, 0x18	; 24
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	88 b3       	in	r24, 0x18	; 24
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	26 c0       	rjmp	.+76     	; 0x220 <sevenseg_write+0x166>
		case 7: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); SETBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 1d4:	88 b3       	in	r24, 0x18	; 24
 1d6:	8f 7e       	andi	r24, 0xEF	; 239
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	88 b3       	in	r24, 0x18	; 24
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	88 b3       	in	r24, 0x18	; 24
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	19 c0       	rjmp	.+50     	; 0x220 <sevenseg_write+0x166>
		case 8: SETBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 1ee:	88 b3       	in	r24, 0x18	; 24
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	8b 7f       	andi	r24, 0xFB	; 251
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	88 bb       	out	0x18, r24	; 24
 200:	88 b3       	in	r24, 0x18	; 24
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	88 bb       	out	0x18, r24	; 24
 206:	0c c0       	rjmp	.+24     	; 0x220 <sevenseg_write+0x166>
		case 9: SETBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	88 bb       	out	0x18, r24	; 24
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	8b 7f       	andi	r24, 0xFB	; 251
 212:	88 bb       	out	0x18, r24	; 24
 214:	88 b3       	in	r24, 0x18	; 24
 216:	8d 7f       	andi	r24, 0xFD	; 253
 218:	88 bb       	out	0x18, r24	; 24
 21a:	88 b3       	in	r24, 0x18	; 24
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	8f e9       	ldi	r24, 0x9F	; 159
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <sevenseg_write+0x16a>
 228:	00 c0       	rjmp	.+0      	; 0x22a <sevenseg_write+0x170>
 22a:	00 00       	nop
 22c:	08 95       	ret

0000022e <sevenseg_write_four>:
	}	
	_delay_ms(1);
}

void sevenseg_write_four(uint32 value){
 22e:	4f 92       	push	r4
 230:	5f 92       	push	r5
 232:	6f 92       	push	r6
 234:	7f 92       	push	r7
 236:	8f 92       	push	r8
 238:	9f 92       	push	r9
 23a:	af 92       	push	r10
 23c:	bf 92       	push	r11
 23e:	cf 92       	push	r12
 240:	df 92       	push	r13
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	4b 01       	movw	r8, r22
 248:	5c 01       	movw	r10, r24
	
	sevenseg_write(value%10, 1);
 24a:	0f 2e       	mov	r0, r31
 24c:	fa e0       	ldi	r31, 0x0A	; 10
 24e:	cf 2e       	mov	r12, r31
 250:	d1 2c       	mov	r13, r1
 252:	e1 2c       	mov	r14, r1
 254:	f1 2c       	mov	r15, r1
 256:	f0 2d       	mov	r31, r0
 258:	a7 01       	movw	r20, r14
 25a:	96 01       	movw	r18, r12
 25c:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 260:	29 01       	movw	r4, r18
 262:	3a 01       	movw	r6, r20
 264:	86 2f       	mov	r24, r22
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	0e 94 5d 00 	call	0xba	; 0xba <sevenseg_write>
	value/=10;
	sevenseg_write(value%10, 2);
 26c:	c3 01       	movw	r24, r6
 26e:	b2 01       	movw	r22, r4
 270:	a7 01       	movw	r20, r14
 272:	96 01       	movw	r18, r12
 274:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 278:	86 2f       	mov	r24, r22
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	0e 94 5d 00 	call	0xba	; 0xba <sevenseg_write>
	value/=10;
 280:	c5 01       	movw	r24, r10
 282:	b4 01       	movw	r22, r8
 284:	24 e6       	ldi	r18, 0x64	; 100
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
	sevenseg_write(value%10, 3);
 290:	ca 01       	movw	r24, r20
 292:	b9 01       	movw	r22, r18
 294:	a7 01       	movw	r20, r14
 296:	96 01       	movw	r18, r12
 298:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 29c:	86 2f       	mov	r24, r22
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	0e 94 5d 00 	call	0xba	; 0xba <sevenseg_write>
	value/=10;
 2a4:	c5 01       	movw	r24, r10
 2a6:	b4 01       	movw	r22, r8
 2a8:	28 ee       	ldi	r18, 0xE8	; 232
 2aa:	33 e0       	ldi	r19, 0x03	; 3
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
	sevenseg_write(value%10, 4);
 2b4:	ca 01       	movw	r24, r20
 2b6:	b9 01       	movw	r22, r18
 2b8:	a7 01       	movw	r20, r14
 2ba:	96 01       	movw	r18, r12
 2bc:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 2c0:	86 2f       	mov	r24, r22
 2c2:	64 e0       	ldi	r22, 0x04	; 4
 2c4:	0e 94 5d 00 	call	0xba	; 0xba <sevenseg_write>
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	df 90       	pop	r13
 2ce:	cf 90       	pop	r12
 2d0:	bf 90       	pop	r11
 2d2:	af 90       	pop	r10
 2d4:	9f 90       	pop	r9
 2d6:	8f 90       	pop	r8
 2d8:	7f 90       	pop	r7
 2da:	6f 90       	pop	r6
 2dc:	5f 90       	pop	r5
 2de:	4f 90       	pop	r4
 2e0:	08 95       	ret

000002e2 <reverse_count>:
// Global Variable
uint8 up_flag = 1;

// Call Back function
void reverse_count(void){
	if(up_flag == 1){
 2e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	19 f4       	brne	.+6      	; 0x2f0 <reverse_count+0xe>
		up_flag = 0;
 2ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ee:	08 95       	ret
	}
	else{
		up_flag = 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f6:	08 95       	ret

000002f8 <main>:

int main(void)
{	
	
	// 7 Segment Initialization
	sevenseg_init();
 2f8:	0e 94 53 00 	call	0xa6	; 0xa6 <sevenseg_init>
	
	// EXT interrupt Initialization	
	EXT_init(EXT1, FALLING);
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 29 02 	call	0x452	; 0x452 <EXT_init>
	EXT_callback(reverse_count, EXT1);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	81 e7       	ldi	r24, 0x71	; 113
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 a0 02 	call	0x540	; 0x540 <EXT_callback>

	// Global Interrupt Enabled
	GIE_Enable();
 30e:	0e 94 2a 03 	call	0x654	; 0x654 <GIE_Enable>
	
	uint32 count = 0;
 312:	81 2c       	mov	r8, r1
 314:	91 2c       	mov	r9, r1
 316:	54 01       	movw	r10, r8
	
	while(1){
		
		for(uint32 i = 0; i < 200; i++){
 318:	c1 2c       	mov	r12, r1
 31a:	d1 2c       	mov	r13, r1
 31c:	76 01       	movw	r14, r12
 31e:	0f c0       	rjmp	.+30     	; 0x33e <main+0x46>
			sevenseg_write_four(count);
 320:	c5 01       	movw	r24, r10
 322:	b4 01       	movw	r22, r8
 324:	0e 94 17 01 	call	0x22e	; 0x22e <sevenseg_write_four>
 328:	8f e9       	ldi	r24, 0x9F	; 159
 32a:	9f e0       	ldi	r25, 0x0F	; 15
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <main+0x34>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x3a>
 332:	00 00       	nop
	
	uint32 count = 0;
	
	while(1){
		
		for(uint32 i = 0; i < 200; i++){
 334:	9f ef       	ldi	r25, 0xFF	; 255
 336:	c9 1a       	sub	r12, r25
 338:	d9 0a       	sbc	r13, r25
 33a:	e9 0a       	sbc	r14, r25
 33c:	f9 0a       	sbc	r15, r25
 33e:	88 ec       	ldi	r24, 0xC8	; 200
 340:	c8 16       	cp	r12, r24
 342:	d1 04       	cpc	r13, r1
 344:	e1 04       	cpc	r14, r1
 346:	f1 04       	cpc	r15, r1
 348:	58 f3       	brcs	.-42     	; 0x320 <main+0x28>
			sevenseg_write_four(count);
			_delay_ms(1);
		}
		
		
		if(up_flag){
 34a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 34e:	88 23       	and	r24, r24
 350:	31 f0       	breq	.+12     	; 0x35e <main+0x66>
			count++;
 352:	9f ef       	ldi	r25, 0xFF	; 255
 354:	89 1a       	sub	r8, r25
 356:	99 0a       	sbc	r9, r25
 358:	a9 0a       	sbc	r10, r25
 35a:	b9 0a       	sbc	r11, r25
 35c:	dd cf       	rjmp	.-70     	; 0x318 <main+0x20>
		}
		else{
			count--;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	88 1a       	sub	r8, r24
 362:	91 08       	sbc	r9, r1
 364:	a1 08       	sbc	r10, r1
 366:	b1 08       	sbc	r11, r1
 368:	d7 cf       	rjmp	.-82     	; 0x318 <main+0x20>

0000036a <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinDir){
	
	if(Copy_u8PinDir == INPUT){ // input
 36a:	41 11       	cpse	r20, r1
 36c:	3b c0       	rjmp	.+118    	; 0x3e4 <DIO_voidSetPinDirection+0x7a>
		switch(copy_u8PortID){
 36e:	82 34       	cpi	r24, 0x42	; 66
 370:	a9 f0       	breq	.+42     	; 0x39c <DIO_voidSetPinDirection+0x32>
 372:	18 f4       	brcc	.+6      	; 0x37a <DIO_voidSetPinDirection+0x10>
 374:	81 34       	cpi	r24, 0x41	; 65
 376:	31 f0       	breq	.+12     	; 0x384 <DIO_voidSetPinDirection+0x1a>
 378:	08 95       	ret
 37a:	83 34       	cpi	r24, 0x43	; 67
 37c:	d9 f0       	breq	.+54     	; 0x3b4 <DIO_voidSetPinDirection+0x4a>
 37e:	84 34       	cpi	r24, 0x44	; 68
 380:	29 f1       	breq	.+74     	; 0x3cc <DIO_voidSetPinDirection+0x62>
 382:	08 95       	ret
			case portA: CLRBIT(DDRA, copy_u8PinID); break;
 384:	2a b3       	in	r18, 0x1a	; 26
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_voidSetPinDirection+0x26>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_voidSetPinDirection+0x22>
 394:	80 95       	com	r24
 396:	82 23       	and	r24, r18
 398:	8a bb       	out	0x1a, r24	; 26
 39a:	08 95       	ret
			case portB: CLRBIT(DDRB, copy_u8PinID); break;
 39c:	27 b3       	in	r18, 0x17	; 23
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_voidSetPinDirection+0x3e>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_voidSetPinDirection+0x3a>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	87 bb       	out	0x17, r24	; 23
 3b2:	08 95       	ret
			case portC: CLRBIT(DDRC, copy_u8PinID); break;
 3b4:	24 b3       	in	r18, 0x14	; 20
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_voidSetPinDirection+0x56>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_voidSetPinDirection+0x52>
 3c4:	80 95       	com	r24
 3c6:	82 23       	and	r24, r18
 3c8:	84 bb       	out	0x14, r24	; 20
 3ca:	08 95       	ret
			case portD: CLRBIT(DDRD, copy_u8PinID); break;
 3cc:	21 b3       	in	r18, 0x11	; 17
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_voidSetPinDirection+0x6e>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_voidSetPinDirection+0x6a>
 3dc:	80 95       	com	r24
 3de:	82 23       	and	r24, r18
 3e0:	81 bb       	out	0x11, r24	; 17
 3e2:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
 3e4:	82 34       	cpi	r24, 0x42	; 66
 3e6:	a1 f0       	breq	.+40     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3e8:	18 f4       	brcc	.+6      	; 0x3f0 <DIO_voidSetPinDirection+0x86>
 3ea:	81 34       	cpi	r24, 0x41	; 65
 3ec:	31 f0       	breq	.+12     	; 0x3fa <DIO_voidSetPinDirection+0x90>
 3ee:	08 95       	ret
 3f0:	83 34       	cpi	r24, 0x43	; 67
 3f2:	c9 f0       	breq	.+50     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3f4:	84 34       	cpi	r24, 0x44	; 68
 3f6:	11 f1       	breq	.+68     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3f8:	08 95       	ret
			case portA: SETBIT(DDRA, copy_u8PinID); break;
 3fa:	2a b3       	in	r18, 0x1a	; 26
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	82 2b       	or	r24, r18
 40c:	8a bb       	out	0x1a, r24	; 26
 40e:	08 95       	ret
			case portB: SETBIT(DDRB, copy_u8PinID); break;
 410:	27 b3       	in	r18, 0x17	; 23
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	82 2b       	or	r24, r18
 422:	87 bb       	out	0x17, r24	; 23
 424:	08 95       	ret
			case portC: SETBIT(DDRC, copy_u8PinID); break;
 426:	24 b3       	in	r18, 0x14	; 20
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	82 2b       	or	r24, r18
 438:	84 bb       	out	0x14, r24	; 20
 43a:	08 95       	ret
			case portD: SETBIT(DDRD, copy_u8PinID); break;
 43c:	21 b3       	in	r18, 0x11	; 17
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	82 2b       	or	r24, r18
 44e:	81 bb       	out	0x11, r24	; 17
 450:	08 95       	ret

00000452 <EXT_init>:

void (*ptr_EXT1)(void) = NULL;
void (*ptr_EXT2)(void) = NULL;
void (*ptr_EXT3)(void) = NULL;

void EXT_init(uint8 EXT_num, uint8 EXT_sens){
 452:	cf 93       	push	r28
 454:	c6 2f       	mov	r28, r22
		switch(EXT_num){
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	89 f1       	breq	.+98     	; 0x4bc <EXT_init+0x6a>
 45a:	20 f0       	brcs	.+8      	; 0x464 <EXT_init+0x12>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	09 f4       	brne	.+2      	; 0x462 <EXT_init+0x10>
 460:	59 c0       	rjmp	.+178    	; 0x514 <EXT_init+0xc2>
 462:	6c c0       	rjmp	.+216    	; 0x53c <EXT_init+0xea>
			case EXT0: 
			// Enable INT0 from GICR
			SETBIT(GICR, INT0); 
 464:	8b b7       	in	r24, 0x3b	; 59
 466:	80 64       	ori	r24, 0x40	; 64
 468:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portD, 2, INPUT);
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	84 e4       	ldi	r24, 0x44	; 68
 470:	0e 94 b5 01 	call	0x36a	; 0x36a <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 474:	c1 30       	cpi	r28, 0x01	; 1
 476:	69 f0       	breq	.+26     	; 0x492 <EXT_init+0x40>
 478:	28 f0       	brcs	.+10     	; 0x484 <EXT_init+0x32>
 47a:	c2 30       	cpi	r28, 0x02	; 2
 47c:	89 f0       	breq	.+34     	; 0x4a0 <EXT_init+0x4e>
 47e:	c3 30       	cpi	r28, 0x03	; 3
 480:	b1 f0       	breq	.+44     	; 0x4ae <EXT_init+0x5c>
 482:	5c c0       	rjmp	.+184    	; 0x53c <EXT_init+0xea>
				case LOW_Level: CLRBIT(MCUCR, ISC01); CLRBIT(MCUCR, ISC00); break;
 484:	85 b7       	in	r24, 0x35	; 53
 486:	8d 7f       	andi	r24, 0xFD	; 253
 488:	85 bf       	out	0x35, r24	; 53
 48a:	85 b7       	in	r24, 0x35	; 53
 48c:	8e 7f       	andi	r24, 0xFE	; 254
 48e:	85 bf       	out	0x35, r24	; 53
 490:	55 c0       	rjmp	.+170    	; 0x53c <EXT_init+0xea>
				case CHANGE:    CLRBIT(MCUCR, ISC01); SETBIT(MCUCR, ISC00); break;
 492:	85 b7       	in	r24, 0x35	; 53
 494:	8d 7f       	andi	r24, 0xFD	; 253
 496:	85 bf       	out	0x35, r24	; 53
 498:	85 b7       	in	r24, 0x35	; 53
 49a:	81 60       	ori	r24, 0x01	; 1
 49c:	85 bf       	out	0x35, r24	; 53
 49e:	4e c0       	rjmp	.+156    	; 0x53c <EXT_init+0xea>
				case FALLING:   SETBIT(MCUCR, ISC01); CLRBIT(MCUCR, ISC00); break;
 4a0:	85 b7       	in	r24, 0x35	; 53
 4a2:	82 60       	ori	r24, 0x02	; 2
 4a4:	85 bf       	out	0x35, r24	; 53
 4a6:	85 b7       	in	r24, 0x35	; 53
 4a8:	8e 7f       	andi	r24, 0xFE	; 254
 4aa:	85 bf       	out	0x35, r24	; 53
 4ac:	47 c0       	rjmp	.+142    	; 0x53c <EXT_init+0xea>
				case RISING:    SETBIT(MCUCR, ISC01); SETBIT(MCUCR, ISC00); break;
 4ae:	85 b7       	in	r24, 0x35	; 53
 4b0:	82 60       	ori	r24, 0x02	; 2
 4b2:	85 bf       	out	0x35, r24	; 53
 4b4:	85 b7       	in	r24, 0x35	; 53
 4b6:	81 60       	ori	r24, 0x01	; 1
 4b8:	85 bf       	out	0x35, r24	; 53
 4ba:	40 c0       	rjmp	.+128    	; 0x53c <EXT_init+0xea>
			
			break;
			/***************************************************************************/
			case EXT1: 
			// Enable INT1 from GICR
			SETBIT(GICR, INT1); 
 4bc:	8b b7       	in	r24, 0x3b	; 59
 4be:	80 68       	ori	r24, 0x80	; 128
 4c0:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portD, 3, INPUT);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	84 e4       	ldi	r24, 0x44	; 68
 4c8:	0e 94 b5 01 	call	0x36a	; 0x36a <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 4cc:	c1 30       	cpi	r28, 0x01	; 1
 4ce:	69 f0       	breq	.+26     	; 0x4ea <EXT_init+0x98>
 4d0:	28 f0       	brcs	.+10     	; 0x4dc <EXT_init+0x8a>
 4d2:	c2 30       	cpi	r28, 0x02	; 2
 4d4:	89 f0       	breq	.+34     	; 0x4f8 <EXT_init+0xa6>
 4d6:	c3 30       	cpi	r28, 0x03	; 3
 4d8:	b1 f0       	breq	.+44     	; 0x506 <EXT_init+0xb4>
 4da:	30 c0       	rjmp	.+96     	; 0x53c <EXT_init+0xea>
				case LOW_Level: CLRBIT(MCUCR, ISC11); CLRBIT(MCUCR, ISC10); break;
 4dc:	85 b7       	in	r24, 0x35	; 53
 4de:	87 7f       	andi	r24, 0xF7	; 247
 4e0:	85 bf       	out	0x35, r24	; 53
 4e2:	85 b7       	in	r24, 0x35	; 53
 4e4:	8b 7f       	andi	r24, 0xFB	; 251
 4e6:	85 bf       	out	0x35, r24	; 53
 4e8:	29 c0       	rjmp	.+82     	; 0x53c <EXT_init+0xea>
				case CHANGE:    CLRBIT(MCUCR, ISC11); SETBIT(MCUCR, ISC10); break;
 4ea:	85 b7       	in	r24, 0x35	; 53
 4ec:	87 7f       	andi	r24, 0xF7	; 247
 4ee:	85 bf       	out	0x35, r24	; 53
 4f0:	85 b7       	in	r24, 0x35	; 53
 4f2:	84 60       	ori	r24, 0x04	; 4
 4f4:	85 bf       	out	0x35, r24	; 53
 4f6:	22 c0       	rjmp	.+68     	; 0x53c <EXT_init+0xea>
				case FALLING:   SETBIT(MCUCR, ISC11); CLRBIT(MCUCR, ISC10); break;
 4f8:	85 b7       	in	r24, 0x35	; 53
 4fa:	88 60       	ori	r24, 0x08	; 8
 4fc:	85 bf       	out	0x35, r24	; 53
 4fe:	85 b7       	in	r24, 0x35	; 53
 500:	8b 7f       	andi	r24, 0xFB	; 251
 502:	85 bf       	out	0x35, r24	; 53
 504:	1b c0       	rjmp	.+54     	; 0x53c <EXT_init+0xea>
				case RISING:    SETBIT(MCUCR, ISC11); SETBIT(MCUCR, ISC10); break;
 506:	85 b7       	in	r24, 0x35	; 53
 508:	88 60       	ori	r24, 0x08	; 8
 50a:	85 bf       	out	0x35, r24	; 53
 50c:	85 b7       	in	r24, 0x35	; 53
 50e:	84 60       	ori	r24, 0x04	; 4
 510:	85 bf       	out	0x35, r24	; 53
 512:	14 c0       	rjmp	.+40     	; 0x53c <EXT_init+0xea>
			break;
			
			/***************************************************************************/
			case EXT2: 
			// Enable INT2 from GICR
			SETBIT(GICR, INT2);
 514:	8b b7       	in	r24, 0x3b	; 59
 516:	80 62       	ori	r24, 0x20	; 32
 518:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portB, 2, INPUT);
 51a:	40 e0       	ldi	r20, 0x00	; 0
 51c:	62 e0       	ldi	r22, 0x02	; 2
 51e:	82 e4       	ldi	r24, 0x42	; 66
 520:	0e 94 b5 01 	call	0x36a	; 0x36a <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 524:	c2 30       	cpi	r28, 0x02	; 2
 526:	19 f0       	breq	.+6      	; 0x52e <EXT_init+0xdc>
 528:	c3 30       	cpi	r28, 0x03	; 3
 52a:	29 f0       	breq	.+10     	; 0x536 <EXT_init+0xe4>
 52c:	07 c0       	rjmp	.+14     	; 0x53c <EXT_init+0xea>
				case FALLING: CLRBIT(MCUCSR, ISC2); break;
 52e:	84 b7       	in	r24, 0x34	; 52
 530:	8f 7b       	andi	r24, 0xBF	; 191
 532:	84 bf       	out	0x34, r24	; 52
 534:	03 c0       	rjmp	.+6      	; 0x53c <EXT_init+0xea>
				case RISING:  SETBIT(MCUCSR, ISC2); break;
 536:	84 b7       	in	r24, 0x34	; 52
 538:	80 64       	ori	r24, 0x40	; 64
 53a:	84 bf       	out	0x34, r24	; 52
			}
			break;
		}
		
}
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <EXT_callback>:

void EXT_callback(void (*PTR)(void) ,uint8 EXT_num){
	switch(EXT_num){
 540:	61 30       	cpi	r22, 0x01	; 1
 542:	49 f0       	breq	.+18     	; 0x556 <EXT_callback+0x16>
 544:	18 f0       	brcs	.+6      	; 0x54c <EXT_callback+0xc>
 546:	62 30       	cpi	r22, 0x02	; 2
 548:	59 f0       	breq	.+22     	; 0x560 <EXT_callback+0x20>
 54a:	08 95       	ret
		case EXT0: ptr_EXT1 = PTR; break;
 54c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ptr_EXT1+0x1>
 550:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ptr_EXT1>
 554:	08 95       	ret
		case EXT1: ptr_EXT2 = PTR; break;
 556:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ptr_EXT2+0x1>
 55a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ptr_EXT2>
 55e:	08 95       	ret
		case EXT2: ptr_EXT3 = PTR; break;
 560:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 564:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 568:	08 95       	ret

0000056a <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
	ptr_EXT1();
 58c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_EXT1>
 590:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_EXT1+0x1>
 594:	09 95       	icall
}
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	bf 91       	pop	r27
 59c:	af 91       	pop	r26
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	7f 91       	pop	r23
 5a4:	6f 91       	pop	r22
 5a6:	5f 91       	pop	r21
 5a8:	4f 91       	pop	r20
 5aa:	3f 91       	pop	r19
 5ac:	2f 91       	pop	r18
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	2f 93       	push	r18
 5c4:	3f 93       	push	r19
 5c6:	4f 93       	push	r20
 5c8:	5f 93       	push	r21
 5ca:	6f 93       	push	r22
 5cc:	7f 93       	push	r23
 5ce:	8f 93       	push	r24
 5d0:	9f 93       	push	r25
 5d2:	af 93       	push	r26
 5d4:	bf 93       	push	r27
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31
	ptr_EXT2();
 5da:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr_EXT2>
 5de:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ptr_EXT2+0x1>
 5e2:	09 95       	icall
}
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	bf 91       	pop	r27
 5ea:	af 91       	pop	r26
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	7f 91       	pop	r23
 5f2:	6f 91       	pop	r22
 5f4:	5f 91       	pop	r21
 5f6:	4f 91       	pop	r20
 5f8:	3f 91       	pop	r19
 5fa:	2f 91       	pop	r18
 5fc:	0f 90       	pop	r0
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	0f 90       	pop	r0
 602:	1f 90       	pop	r1
 604:	18 95       	reti

00000606 <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	2f 93       	push	r18
 612:	3f 93       	push	r19
 614:	4f 93       	push	r20
 616:	5f 93       	push	r21
 618:	6f 93       	push	r22
 61a:	7f 93       	push	r23
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	af 93       	push	r26
 622:	bf 93       	push	r27
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
	ptr_EXT3();
 628:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 62c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 630:	09 95       	icall
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <GIE_Enable>:

#include "GIE_Interface.h"
#include "std_macros.h"

void GIE_Enable(void){
	SETBIT(SREG, I_BIT);
 654:	8f b7       	in	r24, 0x3f	; 63
 656:	80 68       	ori	r24, 0x80	; 128
 658:	8f bf       	out	0x3f, r24	; 63
 65a:	08 95       	ret

0000065c <__udivmodsi4>:
 65c:	a1 e2       	ldi	r26, 0x21	; 33
 65e:	1a 2e       	mov	r1, r26
 660:	aa 1b       	sub	r26, r26
 662:	bb 1b       	sub	r27, r27
 664:	fd 01       	movw	r30, r26
 666:	0d c0       	rjmp	.+26     	; 0x682 <__udivmodsi4_ep>

00000668 <__udivmodsi4_loop>:
 668:	aa 1f       	adc	r26, r26
 66a:	bb 1f       	adc	r27, r27
 66c:	ee 1f       	adc	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	a2 17       	cp	r26, r18
 672:	b3 07       	cpc	r27, r19
 674:	e4 07       	cpc	r30, r20
 676:	f5 07       	cpc	r31, r21
 678:	20 f0       	brcs	.+8      	; 0x682 <__udivmodsi4_ep>
 67a:	a2 1b       	sub	r26, r18
 67c:	b3 0b       	sbc	r27, r19
 67e:	e4 0b       	sbc	r30, r20
 680:	f5 0b       	sbc	r31, r21

00000682 <__udivmodsi4_ep>:
 682:	66 1f       	adc	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	1a 94       	dec	r1
 68c:	69 f7       	brne	.-38     	; 0x668 <__udivmodsi4_loop>
 68e:	60 95       	com	r22
 690:	70 95       	com	r23
 692:	80 95       	com	r24
 694:	90 95       	com	r25
 696:	9b 01       	movw	r18, r22
 698:	ac 01       	movw	r20, r24
 69a:	bd 01       	movw	r22, r26
 69c:	cf 01       	movw	r24, r30
 69e:	08 95       	ret

000006a0 <__tablejump2__>:
 6a0:	ee 0f       	add	r30, r30
 6a2:	ff 1f       	adc	r31, r31
 6a4:	05 90       	lpm	r0, Z+
 6a6:	f4 91       	lpm	r31, Z
 6a8:	e0 2d       	mov	r30, r0
 6aa:	09 94       	ijmp

000006ac <_exit>:
 6ac:	f8 94       	cli

000006ae <__stop_program>:
 6ae:	ff cf       	rjmp	.-2      	; 0x6ae <__stop_program>
