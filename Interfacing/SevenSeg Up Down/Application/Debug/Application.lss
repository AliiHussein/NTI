
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000064c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000064c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  000006e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da7  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a5  00000000  00000000  00001eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092c  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_1>
   8:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_2>
   c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	8f 00       	.word	0x008f	; ????
  56:	9c 00       	.word	0x009c	; ????
  58:	a9 00       	.word	0x00a9	; ????
  5a:	b6 00       	.word	0x00b6	; ????
  5c:	c3 00       	.word	0x00c3	; ????
  5e:	d0 00       	.word	0x00d0	; ????
  60:	dd 00       	.word	0x00dd	; ????
  62:	ea 00       	.word	0x00ea	; ????
  64:	f7 00       	.word	0x00f7	; ????
  66:	04 01       	movw	r0, r8

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a2 e6       	ldi	r26, 0x62	; 98
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 36       	cpi	r26, 0x68	; 104
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 22 01 	call	0x244	; 0x244 <main>
  9e:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <sevenseg_init>:
 */ 

#include "SevenSeg.h"

void sevenseg_init(){
	SEVEN_SEG_INIT_PORTS();
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	8a b3       	in	r24, 0x1a	; 26
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret

000000ba <sevenseg_write>:
	
}

void sevenseg_write(uint8 value, uint8 ss_num){
  ba:	e8 2f       	mov	r30, r24
	
	EN1_DIS();EN2_DIS();EN3_DIS();EN4_DIS();
  bc:	8b b3       	in	r24, 0x1b	; 27
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	88 bb       	out	0x18, r24	; 24
	
	switch(ss_num){
  d4:	62 30       	cpi	r22, 0x02	; 2
  d6:	69 f0       	breq	.+26     	; 0xf2 <sevenseg_write+0x38>
  d8:	18 f4       	brcc	.+6      	; 0xe0 <sevenseg_write+0x26>
  da:	61 30       	cpi	r22, 0x01	; 1
  dc:	31 f0       	breq	.+12     	; 0xea <sevenseg_write+0x30>
  de:	14 c0       	rjmp	.+40     	; 0x108 <sevenseg_write+0x4e>
  e0:	63 30       	cpi	r22, 0x03	; 3
  e2:	59 f0       	breq	.+22     	; 0xfa <sevenseg_write+0x40>
  e4:	64 30       	cpi	r22, 0x04	; 4
  e6:	69 f0       	breq	.+26     	; 0x102 <sevenseg_write+0x48>
  e8:	0f c0       	rjmp	.+30     	; 0x108 <sevenseg_write+0x4e>
		case 1: EN1_EN(); break;
  ea:	8b b3       	in	r24, 0x1b	; 27
  ec:	87 7f       	andi	r24, 0xF7	; 247
  ee:	8b bb       	out	0x1b, r24	; 27
  f0:	0b c0       	rjmp	.+22     	; 0x108 <sevenseg_write+0x4e>
		case 2: EN2_EN(); break;
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	07 c0       	rjmp	.+14     	; 0x108 <sevenseg_write+0x4e>
		case 3: EN3_EN(); break;
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	8f 7d       	andi	r24, 0xDF	; 223
  fe:	88 bb       	out	0x18, r24	; 24
 100:	03 c0       	rjmp	.+6      	; 0x108 <sevenseg_write+0x4e>
		case 4: EN4_EN(); break;
 102:	88 b3       	in	r24, 0x18	; 24
 104:	8f 7b       	andi	r24, 0xBF	; 191
 106:	88 bb       	out	0x18, r24	; 24
	}
	
	switch(value){
 108:	8e 2f       	mov	r24, r30
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	91 05       	cpc	r25, r1
 110:	08 f0       	brcs	.+2      	; 0x114 <sevenseg_write+0x5a>
 112:	86 c0       	rjmp	.+268    	; 0x220 <sevenseg_write+0x166>
 114:	fc 01       	movw	r30, r24
 116:	e6 5d       	subi	r30, 0xD6	; 214
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__tablejump2__>
		case 0: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	8f 7e       	andi	r24, 0xEF	; 239
 122:	88 bb       	out	0x18, r24	; 24
 124:	88 b3       	in	r24, 0x18	; 24
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	88 bb       	out	0x18, r24	; 24
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	88 bb       	out	0x18, r24	; 24
 130:	88 b3       	in	r24, 0x18	; 24
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	88 bb       	out	0x18, r24	; 24
 136:	74 c0       	rjmp	.+232    	; 0x220 <sevenseg_write+0x166>
		case 1: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	8f 7e       	andi	r24, 0xEF	; 239
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	8b 7f       	andi	r24, 0xFB	; 251
 142:	88 bb       	out	0x18, r24	; 24
 144:	88 b3       	in	r24, 0x18	; 24
 146:	8d 7f       	andi	r24, 0xFD	; 253
 148:	88 bb       	out	0x18, r24	; 24
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	88 bb       	out	0x18, r24	; 24
 150:	67 c0       	rjmp	.+206    	; 0x220 <sevenseg_write+0x166>
		case 2: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); SETBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 152:	88 b3       	in	r24, 0x18	; 24
 154:	8f 7e       	andi	r24, 0xEF	; 239
 156:	88 bb       	out	0x18, r24	; 24
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	82 60       	ori	r24, 0x02	; 2
 162:	88 bb       	out	0x18, r24	; 24
 164:	88 b3       	in	r24, 0x18	; 24
 166:	8e 7f       	andi	r24, 0xFE	; 254
 168:	88 bb       	out	0x18, r24	; 24
 16a:	5a c0       	rjmp	.+180    	; 0x220 <sevenseg_write+0x166>
		case 3: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); SETBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	88 bb       	out	0x18, r24	; 24
 172:	88 b3       	in	r24, 0x18	; 24
 174:	8b 7f       	andi	r24, 0xFB	; 251
 176:	88 bb       	out	0x18, r24	; 24
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	88 bb       	out	0x18, r24	; 24
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	81 60       	ori	r24, 0x01	; 1
 182:	88 bb       	out	0x18, r24	; 24
 184:	4d c0       	rjmp	.+154    	; 0x220 <sevenseg_write+0x166>
		case 4: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); CLRBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 186:	88 b3       	in	r24, 0x18	; 24
 188:	8f 7e       	andi	r24, 0xEF	; 239
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	88 b3       	in	r24, 0x18	; 24
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	88 bb       	out	0x18, r24	; 24
 192:	88 b3       	in	r24, 0x18	; 24
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	88 bb       	out	0x18, r24	; 24
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	8e 7f       	andi	r24, 0xFE	; 254
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	40 c0       	rjmp	.+128    	; 0x220 <sevenseg_write+0x166>
		case 5: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); CLRBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 1a0:	88 b3       	in	r24, 0x18	; 24
 1a2:	8f 7e       	andi	r24, 0xEF	; 239
 1a4:	88 bb       	out	0x18, r24	; 24
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	88 b3       	in	r24, 0x18	; 24
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	88 bb       	out	0x18, r24	; 24
 1b2:	88 b3       	in	r24, 0x18	; 24
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	88 bb       	out	0x18, r24	; 24
 1b8:	33 c0       	rjmp	.+102    	; 0x220 <sevenseg_write+0x166>
		case 6: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); SETBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	8f 7e       	andi	r24, 0xEF	; 239
 1be:	88 bb       	out	0x18, r24	; 24
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	88 b3       	in	r24, 0x18	; 24
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	88 b3       	in	r24, 0x18	; 24
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	26 c0       	rjmp	.+76     	; 0x220 <sevenseg_write+0x166>
		case 7: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); SETBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 1d4:	88 b3       	in	r24, 0x18	; 24
 1d6:	8f 7e       	andi	r24, 0xEF	; 239
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	88 b3       	in	r24, 0x18	; 24
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	88 b3       	in	r24, 0x18	; 24
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	19 c0       	rjmp	.+50     	; 0x220 <sevenseg_write+0x166>
		case 8: SETBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 1ee:	88 b3       	in	r24, 0x18	; 24
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	8b 7f       	andi	r24, 0xFB	; 251
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	88 bb       	out	0x18, r24	; 24
 200:	88 b3       	in	r24, 0x18	; 24
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	88 bb       	out	0x18, r24	; 24
 206:	0c c0       	rjmp	.+24     	; 0x220 <sevenseg_write+0x166>
		case 9: SETBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	88 bb       	out	0x18, r24	; 24
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	8b 7f       	andi	r24, 0xFB	; 251
 212:	88 bb       	out	0x18, r24	; 24
 214:	88 b3       	in	r24, 0x18	; 24
 216:	8d 7f       	andi	r24, 0xFD	; 253
 218:	88 bb       	out	0x18, r24	; 24
 21a:	88 b3       	in	r24, 0x18	; 24
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	8f e9       	ldi	r24, 0x9F	; 159
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <sevenseg_write+0x16a>
 228:	00 c0       	rjmp	.+0      	; 0x22a <sevenseg_write+0x170>
 22a:	00 00       	nop
 22c:	08 95       	ret

0000022e <reverse_count>:
#include "MCAL/GIE/GIE_Interface.h"

uint8 up_flag = 1;

void reverse_count(void){
	if(up_flag == 1){
 22e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	19 f4       	brne	.+6      	; 0x23c <reverse_count+0xe>
		up_flag = 0;
 236:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 23a:	08 95       	ret
	}
	else{
		up_flag = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 242:	08 95       	ret

00000244 <main>:

int main(void)
{	
	
	// 7 Segment Initialization
	sevenseg_init();
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <sevenseg_init>
	
	// EXT interrupt Initialization	
	EXT_init(EXT1, FALLING);
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <EXT_init>
	EXT_callback(reverse_count, EXT1);
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	87 e1       	ldi	r24, 0x17	; 23
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 6e 02 	call	0x4dc	; 0x4dc <EXT_callback>


	
	// Global Interrupt Enabled
	GIE_Enable();
 25a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <GIE_Enable>
	
	uint32 count = 0;
 25e:	c1 2c       	mov	r12, r1
 260:	d1 2c       	mov	r13, r1
 262:	76 01       	movw	r14, r12
	uint32 temp;
	
	while(1){
		temp = count;
		
		sevenseg_write(temp%10, 1);
 264:	0f 2e       	mov	r0, r31
 266:	fa e0       	ldi	r31, 0x0A	; 10
 268:	8f 2e       	mov	r8, r31
 26a:	91 2c       	mov	r9, r1
 26c:	a1 2c       	mov	r10, r1
 26e:	b1 2c       	mov	r11, r1
 270:	f0 2d       	mov	r31, r0
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	a5 01       	movw	r20, r10
 278:	94 01       	movw	r18, r8
 27a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodsi4>
 27e:	29 01       	movw	r4, r18
 280:	3a 01       	movw	r6, r20
 282:	86 2f       	mov	r24, r22
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	0e 94 5d 00 	call	0xba	; 0xba <sevenseg_write>
		temp/=10;
		sevenseg_write(temp%10, 2);
 28a:	c3 01       	movw	r24, r6
 28c:	b2 01       	movw	r22, r4
 28e:	a5 01       	movw	r20, r10
 290:	94 01       	movw	r18, r8
 292:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodsi4>
 296:	86 2f       	mov	r24, r22
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	0e 94 5d 00 	call	0xba	; 0xba <sevenseg_write>
		temp/=10;
 29e:	c7 01       	movw	r24, r14
 2a0:	b6 01       	movw	r22, r12
 2a2:	24 e6       	ldi	r18, 0x64	; 100
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodsi4>
		sevenseg_write(temp%10, 3);
 2ae:	ca 01       	movw	r24, r20
 2b0:	b9 01       	movw	r22, r18
 2b2:	a5 01       	movw	r20, r10
 2b4:	94 01       	movw	r18, r8
 2b6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodsi4>
 2ba:	86 2f       	mov	r24, r22
 2bc:	63 e0       	ldi	r22, 0x03	; 3
 2be:	0e 94 5d 00 	call	0xba	; 0xba <sevenseg_write>
		temp/=10;
 2c2:	c7 01       	movw	r24, r14
 2c4:	b6 01       	movw	r22, r12
 2c6:	28 ee       	ldi	r18, 0xE8	; 232
 2c8:	33 e0       	ldi	r19, 0x03	; 3
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodsi4>
		sevenseg_write(temp%10, 4);
 2d2:	ca 01       	movw	r24, r20
 2d4:	b9 01       	movw	r22, r18
 2d6:	a5 01       	movw	r20, r10
 2d8:	94 01       	movw	r18, r8
 2da:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodsi4>
 2de:	86 2f       	mov	r24, r22
 2e0:	64 e0       	ldi	r22, 0x04	; 4
 2e2:	0e 94 5d 00 	call	0xba	; 0xba <sevenseg_write>
		
		if(up_flag){
 2e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ea:	88 23       	and	r24, r24
 2ec:	31 f0       	breq	.+12     	; 0x2fa <main+0xb6>
			count++;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	c8 1a       	sub	r12, r24
 2f2:	d8 0a       	sbc	r13, r24
 2f4:	e8 0a       	sbc	r14, r24
 2f6:	f8 0a       	sbc	r15, r24
 2f8:	b5 cf       	rjmp	.-150    	; 0x264 <main+0x20>
			//_delay_ms(500);
		}
		else{
			count--;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	c8 1a       	sub	r12, r24
 2fe:	d1 08       	sbc	r13, r1
 300:	e1 08       	sbc	r14, r1
 302:	f1 08       	sbc	r15, r1
 304:	af cf       	rjmp	.-162    	; 0x264 <main+0x20>

00000306 <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinDir){
	
	if(Copy_u8PinDir == INPUT){ // input
 306:	41 11       	cpse	r20, r1
 308:	3b c0       	rjmp	.+118    	; 0x380 <DIO_voidSetPinDirection+0x7a>
		switch(copy_u8PortID){
 30a:	82 34       	cpi	r24, 0x42	; 66
 30c:	a9 f0       	breq	.+42     	; 0x338 <DIO_voidSetPinDirection+0x32>
 30e:	18 f4       	brcc	.+6      	; 0x316 <DIO_voidSetPinDirection+0x10>
 310:	81 34       	cpi	r24, 0x41	; 65
 312:	31 f0       	breq	.+12     	; 0x320 <DIO_voidSetPinDirection+0x1a>
 314:	08 95       	ret
 316:	83 34       	cpi	r24, 0x43	; 67
 318:	d9 f0       	breq	.+54     	; 0x350 <DIO_voidSetPinDirection+0x4a>
 31a:	84 34       	cpi	r24, 0x44	; 68
 31c:	29 f1       	breq	.+74     	; 0x368 <DIO_voidSetPinDirection+0x62>
 31e:	08 95       	ret
			case portA: CLRBIT(DDRA, copy_u8PinID); break;
 320:	2a b3       	in	r18, 0x1a	; 26
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinDirection+0x26>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinDirection+0x22>
 330:	80 95       	com	r24
 332:	82 23       	and	r24, r18
 334:	8a bb       	out	0x1a, r24	; 26
 336:	08 95       	ret
			case portB: CLRBIT(DDRB, copy_u8PinID); break;
 338:	27 b3       	in	r18, 0x17	; 23
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_voidSetPinDirection+0x3e>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_voidSetPinDirection+0x3a>
 348:	80 95       	com	r24
 34a:	82 23       	and	r24, r18
 34c:	87 bb       	out	0x17, r24	; 23
 34e:	08 95       	ret
			case portC: CLRBIT(DDRC, copy_u8PinID); break;
 350:	24 b3       	in	r18, 0x14	; 20
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_voidSetPinDirection+0x56>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_voidSetPinDirection+0x52>
 360:	80 95       	com	r24
 362:	82 23       	and	r24, r18
 364:	84 bb       	out	0x14, r24	; 20
 366:	08 95       	ret
			case portD: CLRBIT(DDRD, copy_u8PinID); break;
 368:	21 b3       	in	r18, 0x11	; 17
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_voidSetPinDirection+0x6e>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_voidSetPinDirection+0x6a>
 378:	80 95       	com	r24
 37a:	82 23       	and	r24, r18
 37c:	81 bb       	out	0x11, r24	; 17
 37e:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
 380:	82 34       	cpi	r24, 0x42	; 66
 382:	a1 f0       	breq	.+40     	; 0x3ac <DIO_voidSetPinDirection+0xa6>
 384:	18 f4       	brcc	.+6      	; 0x38c <DIO_voidSetPinDirection+0x86>
 386:	81 34       	cpi	r24, 0x41	; 65
 388:	31 f0       	breq	.+12     	; 0x396 <DIO_voidSetPinDirection+0x90>
 38a:	08 95       	ret
 38c:	83 34       	cpi	r24, 0x43	; 67
 38e:	c9 f0       	breq	.+50     	; 0x3c2 <DIO_voidSetPinDirection+0xbc>
 390:	84 34       	cpi	r24, 0x44	; 68
 392:	11 f1       	breq	.+68     	; 0x3d8 <DIO_voidSetPinDirection+0xd2>
 394:	08 95       	ret
			case portA: SETBIT(DDRA, copy_u8PinID); break;
 396:	2a b3       	in	r18, 0x1a	; 26
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_voidSetPinDirection+0x9c>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_voidSetPinDirection+0x98>
 3a6:	82 2b       	or	r24, r18
 3a8:	8a bb       	out	0x1a, r24	; 26
 3aa:	08 95       	ret
			case portB: SETBIT(DDRB, copy_u8PinID); break;
 3ac:	27 b3       	in	r18, 0x17	; 23
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_voidSetPinDirection+0xb2>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_voidSetPinDirection+0xae>
 3bc:	82 2b       	or	r24, r18
 3be:	87 bb       	out	0x17, r24	; 23
 3c0:	08 95       	ret
			case portC: SETBIT(DDRC, copy_u8PinID); break;
 3c2:	24 b3       	in	r18, 0x14	; 20
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_voidSetPinDirection+0xc8>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_voidSetPinDirection+0xc4>
 3d2:	82 2b       	or	r24, r18
 3d4:	84 bb       	out	0x14, r24	; 20
 3d6:	08 95       	ret
			case portD: SETBIT(DDRD, copy_u8PinID); break;
 3d8:	21 b3       	in	r18, 0x11	; 17
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_voidSetPinDirection+0xde>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_voidSetPinDirection+0xda>
 3e8:	82 2b       	or	r24, r18
 3ea:	81 bb       	out	0x11, r24	; 17
 3ec:	08 95       	ret

000003ee <EXT_init>:

void (*ptr_EXT1)(void) = NULL;
void (*ptr_EXT2)(void) = NULL;
void (*ptr_EXT3)(void) = NULL;

void EXT_init(uint8 EXT_num, uint8 EXT_sens){
 3ee:	cf 93       	push	r28
 3f0:	c6 2f       	mov	r28, r22
		switch(EXT_num){
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	89 f1       	breq	.+98     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 3f6:	20 f0       	brcs	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f8:	82 30       	cpi	r24, 0x02	; 2
 3fa:	09 f4       	brne	.+2      	; 0x3fe <EXT_init+0x10>
 3fc:	59 c0       	rjmp	.+178    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 3fe:	6c c0       	rjmp	.+216    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
			case EXT0: 
			// Enable INT0 from GICR
			SETBIT(GICR, INT0); 
 400:	8b b7       	in	r24, 0x3b	; 59
 402:	80 64       	ori	r24, 0x40	; 64
 404:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portD, 2, INPUT);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	62 e0       	ldi	r22, 0x02	; 2
 40a:	84 e4       	ldi	r24, 0x44	; 68
 40c:	0e 94 83 01 	call	0x306	; 0x306 <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 410:	c1 30       	cpi	r28, 0x01	; 1
 412:	69 f0       	breq	.+26     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 414:	28 f0       	brcs	.+10     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 416:	c2 30       	cpi	r28, 0x02	; 2
 418:	89 f0       	breq	.+34     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 41a:	c3 30       	cpi	r28, 0x03	; 3
 41c:	b1 f0       	breq	.+44     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 41e:	5c c0       	rjmp	.+184    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case LOW_Level: CLRBIT(MCUCR, ISC01); CLRBIT(MCUCR, ISC00); break;
 420:	85 b7       	in	r24, 0x35	; 53
 422:	8d 7f       	andi	r24, 0xFD	; 253
 424:	85 bf       	out	0x35, r24	; 53
 426:	85 b7       	in	r24, 0x35	; 53
 428:	8e 7f       	andi	r24, 0xFE	; 254
 42a:	85 bf       	out	0x35, r24	; 53
 42c:	55 c0       	rjmp	.+170    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case CHANGE:    CLRBIT(MCUCR, ISC01); SETBIT(MCUCR, ISC00); break;
 42e:	85 b7       	in	r24, 0x35	; 53
 430:	8d 7f       	andi	r24, 0xFD	; 253
 432:	85 bf       	out	0x35, r24	; 53
 434:	85 b7       	in	r24, 0x35	; 53
 436:	81 60       	ori	r24, 0x01	; 1
 438:	85 bf       	out	0x35, r24	; 53
 43a:	4e c0       	rjmp	.+156    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case FALLING:   SETBIT(MCUCR, ISC01); CLRBIT(MCUCR, ISC00); break;
 43c:	85 b7       	in	r24, 0x35	; 53
 43e:	82 60       	ori	r24, 0x02	; 2
 440:	85 bf       	out	0x35, r24	; 53
 442:	85 b7       	in	r24, 0x35	; 53
 444:	8e 7f       	andi	r24, 0xFE	; 254
 446:	85 bf       	out	0x35, r24	; 53
 448:	47 c0       	rjmp	.+142    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case RISING:    SETBIT(MCUCR, ISC01); SETBIT(MCUCR, ISC00); break;
 44a:	85 b7       	in	r24, 0x35	; 53
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	85 bf       	out	0x35, r24	; 53
 450:	85 b7       	in	r24, 0x35	; 53
 452:	81 60       	ori	r24, 0x01	; 1
 454:	85 bf       	out	0x35, r24	; 53
 456:	40 c0       	rjmp	.+128    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
			
			break;
			/***************************************************************************/
			case EXT1: 
			// Enable INT1 from GICR
			SETBIT(GICR, INT1); 
 458:	8b b7       	in	r24, 0x3b	; 59
 45a:	80 68       	ori	r24, 0x80	; 128
 45c:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portD, 3, INPUT);
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	63 e0       	ldi	r22, 0x03	; 3
 462:	84 e4       	ldi	r24, 0x44	; 68
 464:	0e 94 83 01 	call	0x306	; 0x306 <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 468:	c1 30       	cpi	r28, 0x01	; 1
 46a:	69 f0       	breq	.+26     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 46c:	28 f0       	brcs	.+10     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 46e:	c2 30       	cpi	r28, 0x02	; 2
 470:	89 f0       	breq	.+34     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 472:	c3 30       	cpi	r28, 0x03	; 3
 474:	b1 f0       	breq	.+44     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 476:	30 c0       	rjmp	.+96     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case LOW_Level: CLRBIT(MCUCR, ISC11); CLRBIT(MCUCR, ISC10); break;
 478:	85 b7       	in	r24, 0x35	; 53
 47a:	87 7f       	andi	r24, 0xF7	; 247
 47c:	85 bf       	out	0x35, r24	; 53
 47e:	85 b7       	in	r24, 0x35	; 53
 480:	8b 7f       	andi	r24, 0xFB	; 251
 482:	85 bf       	out	0x35, r24	; 53
 484:	29 c0       	rjmp	.+82     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case CHANGE:    CLRBIT(MCUCR, ISC11); SETBIT(MCUCR, ISC10); break;
 486:	85 b7       	in	r24, 0x35	; 53
 488:	87 7f       	andi	r24, 0xF7	; 247
 48a:	85 bf       	out	0x35, r24	; 53
 48c:	85 b7       	in	r24, 0x35	; 53
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	85 bf       	out	0x35, r24	; 53
 492:	22 c0       	rjmp	.+68     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case FALLING:   SETBIT(MCUCR, ISC11); CLRBIT(MCUCR, ISC10); break;
 494:	85 b7       	in	r24, 0x35	; 53
 496:	88 60       	ori	r24, 0x08	; 8
 498:	85 bf       	out	0x35, r24	; 53
 49a:	85 b7       	in	r24, 0x35	; 53
 49c:	8b 7f       	andi	r24, 0xFB	; 251
 49e:	85 bf       	out	0x35, r24	; 53
 4a0:	1b c0       	rjmp	.+54     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case RISING:    SETBIT(MCUCR, ISC11); SETBIT(MCUCR, ISC10); break;
 4a2:	85 b7       	in	r24, 0x35	; 53
 4a4:	88 60       	ori	r24, 0x08	; 8
 4a6:	85 bf       	out	0x35, r24	; 53
 4a8:	85 b7       	in	r24, 0x35	; 53
 4aa:	84 60       	ori	r24, 0x04	; 4
 4ac:	85 bf       	out	0x35, r24	; 53
 4ae:	14 c0       	rjmp	.+40     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
			break;
			
			/***************************************************************************/
			case EXT2: 
			// Enable INT2 from GICR
			SETBIT(GICR, INT2);
 4b0:	8b b7       	in	r24, 0x3b	; 59
 4b2:	80 62       	ori	r24, 0x20	; 32
 4b4:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portB, 2, INPUT);
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	62 e0       	ldi	r22, 0x02	; 2
 4ba:	82 e4       	ldi	r24, 0x42	; 66
 4bc:	0e 94 83 01 	call	0x306	; 0x306 <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 4c0:	c2 30       	cpi	r28, 0x02	; 2
 4c2:	19 f0       	breq	.+6      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c4:	c3 30       	cpi	r28, 0x03	; 3
 4c6:	29 f0       	breq	.+10     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case FALLING: CLRBIT(MCUCSR, ISC2); break;
 4ca:	84 b7       	in	r24, 0x34	; 52
 4cc:	8f 7b       	andi	r24, 0xBF	; 191
 4ce:	84 bf       	out	0x34, r24	; 52
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
				case RISING:  SETBIT(MCUCSR, ISC2); break;
 4d2:	84 b7       	in	r24, 0x34	; 52
 4d4:	80 64       	ori	r24, 0x40	; 64
 4d6:	84 bf       	out	0x34, r24	; 52
			}
			break;
		}
		
}
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <EXT_callback>:

void EXT_callback(void (*PTR)(void) ,uint8 EXT_num){
	switch(EXT_num){
 4dc:	61 30       	cpi	r22, 0x01	; 1
 4de:	49 f0       	breq	.+18     	; 0x4f2 <EXT_callback+0x16>
 4e0:	18 f0       	brcs	.+6      	; 0x4e8 <EXT_callback+0xc>
 4e2:	62 30       	cpi	r22, 0x02	; 2
 4e4:	59 f0       	breq	.+22     	; 0x4fc <EXT_callback+0x20>
 4e6:	08 95       	ret
		case EXT0: ptr_EXT1 = PTR; break;
 4e8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ptr_EXT1+0x1>
 4ec:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ptr_EXT1>
 4f0:	08 95       	ret
		case EXT1: ptr_EXT2 = PTR; break;
 4f2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ptr_EXT2+0x1>
 4f6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ptr_EXT2>
 4fa:	08 95       	ret
		case EXT2: ptr_EXT3 = PTR; break;
 4fc:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 500:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 504:	08 95       	ret

00000506 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	4f 93       	push	r20
 516:	5f 93       	push	r21
 518:	6f 93       	push	r22
 51a:	7f 93       	push	r23
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	af 93       	push	r26
 522:	bf 93       	push	r27
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
	ptr_EXT1();
 528:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_EXT1>
 52c:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_EXT1+0x1>
 530:	09 95       	icall
}
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	ptr_EXT2();
 576:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr_EXT2>
 57a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ptr_EXT2+0x1>
 57e:	09 95       	icall
}
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	ptr_EXT3();
 5c4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 5c8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 5cc:	09 95       	icall
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	bf 91       	pop	r27
 5d4:	af 91       	pop	r26
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	7f 91       	pop	r23
 5dc:	6f 91       	pop	r22
 5de:	5f 91       	pop	r21
 5e0:	4f 91       	pop	r20
 5e2:	3f 91       	pop	r19
 5e4:	2f 91       	pop	r18
 5e6:	0f 90       	pop	r0
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	0f 90       	pop	r0
 5ec:	1f 90       	pop	r1
 5ee:	18 95       	reti

000005f0 <GIE_Enable>:

#include "GIE_Interface.h"
#include "std_macros.h"

void GIE_Enable(void){
	SETBIT(SREG, I_BIT);
 5f0:	8f b7       	in	r24, 0x3f	; 63
 5f2:	80 68       	ori	r24, 0x80	; 128
 5f4:	8f bf       	out	0x3f, r24	; 63
 5f6:	08 95       	ret

000005f8 <__udivmodsi4>:
 5f8:	a1 e2       	ldi	r26, 0x21	; 33
 5fa:	1a 2e       	mov	r1, r26
 5fc:	aa 1b       	sub	r26, r26
 5fe:	bb 1b       	sub	r27, r27
 600:	fd 01       	movw	r30, r26
 602:	0d c0       	rjmp	.+26     	; 0x61e <__udivmodsi4_ep>

00000604 <__udivmodsi4_loop>:
 604:	aa 1f       	adc	r26, r26
 606:	bb 1f       	adc	r27, r27
 608:	ee 1f       	adc	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	a2 17       	cp	r26, r18
 60e:	b3 07       	cpc	r27, r19
 610:	e4 07       	cpc	r30, r20
 612:	f5 07       	cpc	r31, r21
 614:	20 f0       	brcs	.+8      	; 0x61e <__udivmodsi4_ep>
 616:	a2 1b       	sub	r26, r18
 618:	b3 0b       	sbc	r27, r19
 61a:	e4 0b       	sbc	r30, r20
 61c:	f5 0b       	sbc	r31, r21

0000061e <__udivmodsi4_ep>:
 61e:	66 1f       	adc	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	88 1f       	adc	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	1a 94       	dec	r1
 628:	69 f7       	brne	.-38     	; 0x604 <__udivmodsi4_loop>
 62a:	60 95       	com	r22
 62c:	70 95       	com	r23
 62e:	80 95       	com	r24
 630:	90 95       	com	r25
 632:	9b 01       	movw	r18, r22
 634:	ac 01       	movw	r20, r24
 636:	bd 01       	movw	r22, r26
 638:	cf 01       	movw	r24, r30
 63a:	08 95       	ret

0000063c <__tablejump2__>:
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	05 90       	lpm	r0, Z+
 642:	f4 91       	lpm	r31, Z
 644:	e0 2d       	mov	r30, r0
 646:	09 94       	ijmp

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
