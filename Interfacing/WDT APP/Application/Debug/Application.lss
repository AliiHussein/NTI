
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000646  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000646  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000178b  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aad  00000000  00000000  00001fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b74  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  000035f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000794  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010c8  00000000  00000000  000041e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000052ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_1>
   8:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_2>
   c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_10>
  2c:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	89 02       	muls	r24, r25
  56:	93 02       	muls	r25, r19
  58:	9d 02       	muls	r25, r29
  5a:	a7 02       	muls	r26, r23
  5c:	b1 02       	muls	r27, r17
  5e:	bb 02       	muls	r27, r27
  60:	c5 02       	muls	r28, r21
  62:	cf 02       	muls	r28, r31

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 ed       	ldi	r30, 0xD2	; 210
  78:	f5 e0       	ldi	r31, 0x05	; 5
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a0 e6       	ldi	r26, 0x60	; 96
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a8 36       	cpi	r26, 0x68	; 104
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  9a:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <led_init>:
 */ 

#include "LED.h"

void led_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, OUTPUT);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_voidSetPinDirection>
  a8:	08 95       	ret

000000aa <led_on>:
}

void led_on(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, HIGH);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	0e 94 48 01 	call	0x290	; 0x290 <DIO_voidSetPinValue>
  b0:	08 95       	ret

000000b2 <led_off>:
}

void led_off(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, LOW);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	0e 94 48 01 	call	0x290	; 0x290 <DIO_voidSetPinValue>
  b8:	08 95       	ret

000000ba <toggle_led_yel>:

void toggle_led_red(void){
	_delay_ms(500);
	led_on(portB, 7);
	_delay_ms(500);
	led_off(portB, 7);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	98 e1       	ldi	r25, 0x18	; 24
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <toggle_led_yel+0x6>
  c8:	00 c0       	rjmp	.+0      	; 0xca <toggle_led_yel+0x10>
  ca:	00 00       	nop
  cc:	66 e0       	ldi	r22, 0x06	; 6
  ce:	81 e4       	ldi	r24, 0x41	; 65
  d0:	0e 94 55 00 	call	0xaa	; 0xaa <led_on>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	89 e6       	ldi	r24, 0x69	; 105
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <toggle_led_yel+0x20>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <toggle_led_yel+0x2a>
  e4:	00 00       	nop
  e6:	66 e0       	ldi	r22, 0x06	; 6
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	0e 94 59 00 	call	0xb2	; 0xb2 <led_off>
  ee:	08 95       	ret

000000f0 <toggle_led_blue>:
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	98 e1       	ldi	r25, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <toggle_led_blue+0x6>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <toggle_led_blue+0x10>
 100:	00 00       	nop
 102:	65 e0       	ldi	r22, 0x05	; 5
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 55 00 	call	0xaa	; 0xaa <led_on>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	89 e6       	ldi	r24, 0x69	; 105
 10e:	98 e1       	ldi	r25, 0x18	; 24
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <toggle_led_blue+0x20>
 118:	00 c0       	rjmp	.+0      	; 0x11a <toggle_led_blue+0x2a>
 11a:	00 00       	nop
 11c:	65 e0       	ldi	r22, 0x05	; 5
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 59 00 	call	0xb2	; 0xb2 <led_off>
 124:	08 95       	ret

00000126 <toggle_led_green>:
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	8b e7       	ldi	r24, 0x7B	; 123
 12a:	92 e9       	ldi	r25, 0x92	; 146
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <toggle_led_green+0x6>
 134:	00 c0       	rjmp	.+0      	; 0x136 <toggle_led_green+0x10>
 136:	00 00       	nop
 138:	64 e0       	ldi	r22, 0x04	; 4
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 55 00 	call	0xaa	; 0xaa <led_on>
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	89 e6       	ldi	r24, 0x69	; 105
 144:	98 e1       	ldi	r25, 0x18	; 24
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <toggle_led_green+0x20>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <toggle_led_green+0x2a>
 150:	00 00       	nop
 152:	64 e0       	ldi	r22, 0x04	; 4
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 59 00 	call	0xb2	; 0xb2 <led_off>
 15a:	08 95       	ret

0000015c <main>:
	
}

int main(void)
{
	led_init(portA, 4);
 15c:	64 e0       	ldi	r22, 0x04	; 4
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 51 00 	call	0xa2	; 0xa2 <led_init>
	led_init(portA, 5);
 164:	65 e0       	ldi	r22, 0x05	; 5
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 51 00 	call	0xa2	; 0xa2 <led_init>
	led_init(portA, 6);
 16c:	66 e0       	ldi	r22, 0x06	; 6
 16e:	81 e4       	ldi	r24, 0x41	; 65
 170:	0e 94 51 00 	call	0xa2	; 0xa2 <led_init>
	led_init(portB, 7);
 174:	67 e0       	ldi	r22, 0x07	; 7
 176:	82 e4       	ldi	r24, 0x42	; 66
 178:	0e 94 51 00 	call	0xa2	; 0xa2 <led_init>
	//_delay_ms(500);
	
		
	while (1)
	{
		wdt_enable(T2_1_s);
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <wdt_enable>
		toggle_led_yel();
 182:	0e 94 5d 00 	call	0xba	; 0xba <toggle_led_yel>
		wdt_disable();
 186:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <wdt_disable>
		
		wdt_enable(T2_1_s);
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <wdt_enable>
		toggle_led_blue();
 190:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_led_blue>
		wdt_disable();
 194:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <wdt_disable>
		
		
		
		wdt_enable(T2_1_s);
 198:	87 e0       	ldi	r24, 0x07	; 7
 19a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <wdt_enable>
		toggle_led_green();
 19e:	0e 94 93 00 	call	0x126	; 0x126 <toggle_led_green>
		wdt_disable();
 1a2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <wdt_disable>
 1a6:	ea cf       	rjmp	.-44     	; 0x17c <main+0x20>

000001a8 <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinDir){
	
	if(Copy_u8PinDir == INPUT){ // input
 1a8:	41 11       	cpse	r20, r1
 1aa:	3b c0       	rjmp	.+118    	; 0x222 <DIO_voidSetPinDirection+0x7a>
		switch(copy_u8PortID){
 1ac:	82 34       	cpi	r24, 0x42	; 66
 1ae:	a9 f0       	breq	.+42     	; 0x1da <DIO_voidSetPinDirection+0x32>
 1b0:	18 f4       	brcc	.+6      	; 0x1b8 <DIO_voidSetPinDirection+0x10>
 1b2:	81 34       	cpi	r24, 0x41	; 65
 1b4:	31 f0       	breq	.+12     	; 0x1c2 <DIO_voidSetPinDirection+0x1a>
 1b6:	08 95       	ret
 1b8:	83 34       	cpi	r24, 0x43	; 67
 1ba:	d9 f0       	breq	.+54     	; 0x1f2 <DIO_voidSetPinDirection+0x4a>
 1bc:	84 34       	cpi	r24, 0x44	; 68
 1be:	29 f1       	breq	.+74     	; 0x20a <DIO_voidSetPinDirection+0x62>
 1c0:	08 95       	ret
			case portA: CLRBIT(DDRA, copy_u8PinID); break;
 1c2:	2a b3       	in	r18, 0x1a	; 26
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_voidSetPinDirection+0x26>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_voidSetPinDirection+0x22>
 1d2:	80 95       	com	r24
 1d4:	82 23       	and	r24, r18
 1d6:	8a bb       	out	0x1a, r24	; 26
 1d8:	08 95       	ret
			case portB: CLRBIT(DDRB, copy_u8PinID); break;
 1da:	27 b3       	in	r18, 0x17	; 23
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_voidSetPinDirection+0x3e>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_voidSetPinDirection+0x3a>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	87 bb       	out	0x17, r24	; 23
 1f0:	08 95       	ret
			case portC: CLRBIT(DDRC, copy_u8PinID); break;
 1f2:	24 b3       	in	r18, 0x14	; 20
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_voidSetPinDirection+0x56>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_voidSetPinDirection+0x52>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	84 bb       	out	0x14, r24	; 20
 208:	08 95       	ret
			case portD: CLRBIT(DDRD, copy_u8PinID); break;
 20a:	21 b3       	in	r18, 0x11	; 17
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_voidSetPinDirection+0x6e>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_voidSetPinDirection+0x6a>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	81 bb       	out	0x11, r24	; 17
 220:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
 222:	82 34       	cpi	r24, 0x42	; 66
 224:	a1 f0       	breq	.+40     	; 0x24e <DIO_voidSetPinDirection+0xa6>
 226:	18 f4       	brcc	.+6      	; 0x22e <DIO_voidSetPinDirection+0x86>
 228:	81 34       	cpi	r24, 0x41	; 65
 22a:	31 f0       	breq	.+12     	; 0x238 <DIO_voidSetPinDirection+0x90>
 22c:	08 95       	ret
 22e:	83 34       	cpi	r24, 0x43	; 67
 230:	c9 f0       	breq	.+50     	; 0x264 <DIO_voidSetPinDirection+0xbc>
 232:	84 34       	cpi	r24, 0x44	; 68
 234:	11 f1       	breq	.+68     	; 0x27a <DIO_voidSetPinDirection+0xd2>
 236:	08 95       	ret
			case portA: SETBIT(DDRA, copy_u8PinID); break;
 238:	2a b3       	in	r18, 0x1a	; 26
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_voidSetPinDirection+0x9c>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_voidSetPinDirection+0x98>
 248:	82 2b       	or	r24, r18
 24a:	8a bb       	out	0x1a, r24	; 26
 24c:	08 95       	ret
			case portB: SETBIT(DDRB, copy_u8PinID); break;
 24e:	27 b3       	in	r18, 0x17	; 23
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_voidSetPinDirection+0xb2>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_voidSetPinDirection+0xae>
 25e:	82 2b       	or	r24, r18
 260:	87 bb       	out	0x17, r24	; 23
 262:	08 95       	ret
			case portC: SETBIT(DDRC, copy_u8PinID); break;
 264:	24 b3       	in	r18, 0x14	; 20
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_voidSetPinDirection+0xc8>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_voidSetPinDirection+0xc4>
 274:	82 2b       	or	r24, r18
 276:	84 bb       	out	0x14, r24	; 20
 278:	08 95       	ret
			case portD: SETBIT(DDRD, copy_u8PinID); break;
 27a:	21 b3       	in	r18, 0x11	; 17
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_voidSetPinDirection+0xde>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_voidSetPinDirection+0xda>
 28a:	82 2b       	or	r24, r18
 28c:	81 bb       	out	0x11, r24	; 17
 28e:	08 95       	ret

00000290 <DIO_voidSetPinValue>:
		}
	}
	
}
void DIO_voidSetPinValue(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinValue){
	if(Copy_u8PinValue == LOW){ // LOW
 290:	41 11       	cpse	r20, r1
 292:	3b c0       	rjmp	.+118    	; 0x30a <DIO_voidSetPinValue+0x7a>
		switch(copy_u8PortID){
 294:	82 34       	cpi	r24, 0x42	; 66
 296:	a9 f0       	breq	.+42     	; 0x2c2 <DIO_voidSetPinValue+0x32>
 298:	18 f4       	brcc	.+6      	; 0x2a0 <DIO_voidSetPinValue+0x10>
 29a:	81 34       	cpi	r24, 0x41	; 65
 29c:	31 f0       	breq	.+12     	; 0x2aa <DIO_voidSetPinValue+0x1a>
 29e:	08 95       	ret
 2a0:	83 34       	cpi	r24, 0x43	; 67
 2a2:	d9 f0       	breq	.+54     	; 0x2da <DIO_voidSetPinValue+0x4a>
 2a4:	84 34       	cpi	r24, 0x44	; 68
 2a6:	29 f1       	breq	.+74     	; 0x2f2 <DIO_voidSetPinValue+0x62>
 2a8:	08 95       	ret
			case portA: CLRBIT(PORTA, copy_u8PinID); break;
 2aa:	2b b3       	in	r18, 0x1b	; 27
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_voidSetPinValue+0x26>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_voidSetPinValue+0x22>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	8b bb       	out	0x1b, r24	; 27
 2c0:	08 95       	ret
			case portB: CLRBIT(PORTB, copy_u8PinID); break;
 2c2:	28 b3       	in	r18, 0x18	; 24
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_voidSetPinValue+0x3e>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_voidSetPinValue+0x3a>
 2d2:	80 95       	com	r24
 2d4:	82 23       	and	r24, r18
 2d6:	88 bb       	out	0x18, r24	; 24
 2d8:	08 95       	ret
			case portC: CLRBIT(PORTC, copy_u8PinID); break;
 2da:	25 b3       	in	r18, 0x15	; 21
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_voidSetPinValue+0x56>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_voidSetPinValue+0x52>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	85 bb       	out	0x15, r24	; 21
 2f0:	08 95       	ret
			case portD: CLRBIT(PORTD, copy_u8PinID); break;
 2f2:	22 b3       	in	r18, 0x12	; 18
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_voidSetPinValue+0x6e>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_voidSetPinValue+0x6a>
 302:	80 95       	com	r24
 304:	82 23       	and	r24, r18
 306:	82 bb       	out	0x12, r24	; 18
 308:	08 95       	ret
		}
	}
	else{ // HIGH
		switch(copy_u8PortID){
 30a:	82 34       	cpi	r24, 0x42	; 66
 30c:	a1 f0       	breq	.+40     	; 0x336 <DIO_voidSetPinValue+0xa6>
 30e:	18 f4       	brcc	.+6      	; 0x316 <DIO_voidSetPinValue+0x86>
 310:	81 34       	cpi	r24, 0x41	; 65
 312:	31 f0       	breq	.+12     	; 0x320 <DIO_voidSetPinValue+0x90>
 314:	08 95       	ret
 316:	83 34       	cpi	r24, 0x43	; 67
 318:	c9 f0       	breq	.+50     	; 0x34c <DIO_voidSetPinValue+0xbc>
 31a:	84 34       	cpi	r24, 0x44	; 68
 31c:	11 f1       	breq	.+68     	; 0x362 <DIO_voidSetPinValue+0xd2>
 31e:	08 95       	ret
			case portA: SETBIT(PORTA, copy_u8PinID); break;
 320:	2b b3       	in	r18, 0x1b	; 27
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_voidSetPinValue+0x9c>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_voidSetPinValue+0x98>
 330:	82 2b       	or	r24, r18
 332:	8b bb       	out	0x1b, r24	; 27
 334:	08 95       	ret
			case portB: SETBIT(PORTB, copy_u8PinID); break;
 336:	28 b3       	in	r18, 0x18	; 24
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_voidSetPinValue+0xb2>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_voidSetPinValue+0xae>
 346:	82 2b       	or	r24, r18
 348:	88 bb       	out	0x18, r24	; 24
 34a:	08 95       	ret
			case portC: SETBIT(PORTC, copy_u8PinID); break;
 34c:	25 b3       	in	r18, 0x15	; 21
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_voidSetPinValue+0xc8>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_voidSetPinValue+0xc4>
 35c:	82 2b       	or	r24, r18
 35e:	85 bb       	out	0x15, r24	; 21
 360:	08 95       	ret
			case portD: SETBIT(PORTD, copy_u8PinID); break;
 362:	22 b3       	in	r18, 0x12	; 18
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidSetPinValue+0xde>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidSetPinValue+0xda>
 372:	82 2b       	or	r24, r18
 374:	82 bb       	out	0x12, r24	; 18
 376:	08 95       	ret

00000378 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	ptr_EXT1();
 39a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr_EXT1>
 39e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ptr_EXT1+0x1>
 3a2:	09 95       	icall
}
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	2f 93       	push	r18
 3d2:	3f 93       	push	r19
 3d4:	4f 93       	push	r20
 3d6:	5f 93       	push	r21
 3d8:	6f 93       	push	r22
 3da:	7f 93       	push	r23
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	af 93       	push	r26
 3e2:	bf 93       	push	r27
 3e4:	ef 93       	push	r30
 3e6:	ff 93       	push	r31
	ptr_EXT2();
 3e8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ptr_EXT2>
 3ec:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ptr_EXT2+0x1>
 3f0:	09 95       	icall
}
 3f2:	ff 91       	pop	r31
 3f4:	ef 91       	pop	r30
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	7f 91       	pop	r23
 400:	6f 91       	pop	r22
 402:	5f 91       	pop	r21
 404:	4f 91       	pop	r20
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	4f 93       	push	r20
 424:	5f 93       	push	r21
 426:	6f 93       	push	r22
 428:	7f 93       	push	r23
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
	ptr_EXT3();
 436:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 43a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 43e:	09 95       	icall
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	7f 91       	pop	r23
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <__vector_11>:
	timer0_disable();
}

void __vector_11() __attribute__((signal));

void __vector_11(){
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
	ptr_t0();
 484:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_t0>
 488:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_t0+0x1>
 48c:	09 95       	icall
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <__vector_10>:

void __vector_10() __attribute__((signal));

void __vector_10(){
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	2f 93       	push	r18
 4bc:	3f 93       	push	r19
 4be:	4f 93       	push	r20
 4c0:	5f 93       	push	r21
 4c2:	6f 93       	push	r22
 4c4:	7f 93       	push	r23
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
	ptr_t0();
 4d2:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_t0>
 4d6:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_t0+0x1>
 4da:	09 95       	icall
}
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	bf 91       	pop	r27
 4e2:	af 91       	pop	r26
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	7f 91       	pop	r23
 4ea:	6f 91       	pop	r22
 4ec:	5f 91       	pop	r21
 4ee:	4f 91       	pop	r20
 4f0:	3f 91       	pop	r19
 4f2:	2f 91       	pop	r18
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <wdt_enable>:
#include "WDT_Interface.h"
#include "WDT_Private.h"

void wdt_enable(uint8 Time){
	// WDT PRescaler = 1sec
	switch(Time){
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	88 30       	cpi	r24, 0x08	; 8
 502:	91 05       	cpc	r25, r1
 504:	08 f0       	brcs	.+2      	; 0x508 <wdt_enable+0xa>
 506:	54 c0       	rjmp	.+168    	; 0x5b0 <wdt_enable+0xb2>
 508:	fc 01       	movw	r30, r24
 50a:	e6 5d       	subi	r30, 0xD6	; 214
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__tablejump2__>
		case T16_3_ms: CLRBIT(WDTCR, WDP2); CLRBIT(WDTCR, WDP1); CLRBIT(WDTCR, WDP0); break;
 512:	81 b5       	in	r24, 0x21	; 33
 514:	8b 7f       	andi	r24, 0xFB	; 251
 516:	81 bd       	out	0x21, r24	; 33
 518:	81 b5       	in	r24, 0x21	; 33
 51a:	8d 7f       	andi	r24, 0xFD	; 253
 51c:	81 bd       	out	0x21, r24	; 33
 51e:	81 b5       	in	r24, 0x21	; 33
 520:	8e 7f       	andi	r24, 0xFE	; 254
 522:	81 bd       	out	0x21, r24	; 33
 524:	45 c0       	rjmp	.+138    	; 0x5b0 <wdt_enable+0xb2>
		case T32_5ms:  CLRBIT(WDTCR, WDP2); CLRBIT(WDTCR, WDP1); SETBIT(WDTCR, WDP0); break;
 526:	81 b5       	in	r24, 0x21	; 33
 528:	8b 7f       	andi	r24, 0xFB	; 251
 52a:	81 bd       	out	0x21, r24	; 33
 52c:	81 b5       	in	r24, 0x21	; 33
 52e:	8d 7f       	andi	r24, 0xFD	; 253
 530:	81 bd       	out	0x21, r24	; 33
 532:	81 b5       	in	r24, 0x21	; 33
 534:	81 60       	ori	r24, 0x01	; 1
 536:	81 bd       	out	0x21, r24	; 33
 538:	3b c0       	rjmp	.+118    	; 0x5b0 <wdt_enable+0xb2>
		case T65_ms:   CLRBIT(WDTCR, WDP2); SETBIT(WDTCR, WDP1); CLRBIT(WDTCR, WDP0); break;
 53a:	81 b5       	in	r24, 0x21	; 33
 53c:	8b 7f       	andi	r24, 0xFB	; 251
 53e:	81 bd       	out	0x21, r24	; 33
 540:	81 b5       	in	r24, 0x21	; 33
 542:	82 60       	ori	r24, 0x02	; 2
 544:	81 bd       	out	0x21, r24	; 33
 546:	81 b5       	in	r24, 0x21	; 33
 548:	8e 7f       	andi	r24, 0xFE	; 254
 54a:	81 bd       	out	0x21, r24	; 33
 54c:	31 c0       	rjmp	.+98     	; 0x5b0 <wdt_enable+0xb2>
		case T0_13_s:  CLRBIT(WDTCR, WDP2); SETBIT(WDTCR, WDP1); SETBIT(WDTCR, WDP0); break;
 54e:	81 b5       	in	r24, 0x21	; 33
 550:	8b 7f       	andi	r24, 0xFB	; 251
 552:	81 bd       	out	0x21, r24	; 33
 554:	81 b5       	in	r24, 0x21	; 33
 556:	82 60       	ori	r24, 0x02	; 2
 558:	81 bd       	out	0x21, r24	; 33
 55a:	81 b5       	in	r24, 0x21	; 33
 55c:	81 60       	ori	r24, 0x01	; 1
 55e:	81 bd       	out	0x21, r24	; 33
 560:	27 c0       	rjmp	.+78     	; 0x5b0 <wdt_enable+0xb2>
		case T0_26_s:  SETBIT(WDTCR, WDP2); CLRBIT(WDTCR, WDP1); CLRBIT(WDTCR, WDP0); break;
 562:	81 b5       	in	r24, 0x21	; 33
 564:	84 60       	ori	r24, 0x04	; 4
 566:	81 bd       	out	0x21, r24	; 33
 568:	81 b5       	in	r24, 0x21	; 33
 56a:	8d 7f       	andi	r24, 0xFD	; 253
 56c:	81 bd       	out	0x21, r24	; 33
 56e:	81 b5       	in	r24, 0x21	; 33
 570:	8e 7f       	andi	r24, 0xFE	; 254
 572:	81 bd       	out	0x21, r24	; 33
 574:	1d c0       	rjmp	.+58     	; 0x5b0 <wdt_enable+0xb2>
		case T0_52_s:  SETBIT(WDTCR, WDP2); CLRBIT(WDTCR, WDP1); SETBIT(WDTCR, WDP0); break;
 576:	81 b5       	in	r24, 0x21	; 33
 578:	84 60       	ori	r24, 0x04	; 4
 57a:	81 bd       	out	0x21, r24	; 33
 57c:	81 b5       	in	r24, 0x21	; 33
 57e:	8d 7f       	andi	r24, 0xFD	; 253
 580:	81 bd       	out	0x21, r24	; 33
 582:	81 b5       	in	r24, 0x21	; 33
 584:	81 60       	ori	r24, 0x01	; 1
 586:	81 bd       	out	0x21, r24	; 33
 588:	13 c0       	rjmp	.+38     	; 0x5b0 <wdt_enable+0xb2>
		case T1_s:     SETBIT(WDTCR, WDP2); SETBIT(WDTCR, WDP1); CLRBIT(WDTCR, WDP0); break;
 58a:	81 b5       	in	r24, 0x21	; 33
 58c:	84 60       	ori	r24, 0x04	; 4
 58e:	81 bd       	out	0x21, r24	; 33
 590:	81 b5       	in	r24, 0x21	; 33
 592:	82 60       	ori	r24, 0x02	; 2
 594:	81 bd       	out	0x21, r24	; 33
 596:	81 b5       	in	r24, 0x21	; 33
 598:	8e 7f       	andi	r24, 0xFE	; 254
 59a:	81 bd       	out	0x21, r24	; 33
 59c:	09 c0       	rjmp	.+18     	; 0x5b0 <wdt_enable+0xb2>
		case T2_1_s:   SETBIT(WDTCR, WDP2); SETBIT(WDTCR, WDP1); SETBIT(WDTCR, WDP0); break;
 59e:	81 b5       	in	r24, 0x21	; 33
 5a0:	84 60       	ori	r24, 0x04	; 4
 5a2:	81 bd       	out	0x21, r24	; 33
 5a4:	81 b5       	in	r24, 0x21	; 33
 5a6:	82 60       	ori	r24, 0x02	; 2
 5a8:	81 bd       	out	0x21, r24	; 33
 5aa:	81 b5       	in	r24, 0x21	; 33
 5ac:	81 60       	ori	r24, 0x01	; 1
 5ae:	81 bd       	out	0x21, r24	; 33
	}
	
	// Enable WDT
	SETBIT(WDTCR, WDE);
 5b0:	81 b5       	in	r24, 0x21	; 33
 5b2:	88 60       	ori	r24, 0x08	; 8
 5b4:	81 bd       	out	0x21, r24	; 33
 5b6:	08 95       	ret

000005b8 <wdt_disable>:
}
void wdt_disable(void){
	// Writing logic one to WDTOE & WDE at the same time
	WDTCR |= (1<<WDTOE) | (1<<WDE);
 5b8:	81 b5       	in	r24, 0x21	; 33
 5ba:	88 61       	ori	r24, 0x18	; 24
 5bc:	81 bd       	out	0x21, r24	; 33
	// Writing zero to WDE
	WDTCR = 0;
 5be:	11 bc       	out	0x21, r1	; 33
 5c0:	08 95       	ret

000005c2 <__tablejump2__>:
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	05 90       	lpm	r0, Z+
 5c8:	f4 91       	lpm	r31, Z
 5ca:	e0 2d       	mov	r30, r0
 5cc:	09 94       	ijmp

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
