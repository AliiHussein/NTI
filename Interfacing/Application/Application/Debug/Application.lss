
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000ce8  00000d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006e  0080006e  00000d8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d23  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd2  00000000  00000000  00002d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a3  00000000  00000000  000039d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00004a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c7  00000000  00000000  00004fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014d3  00000000  00000000  00005777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 12 03 	jmp	0x624	; 0x624 <__vector_1>
   8:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_2>
   c:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__vector_10>
  2c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 14 02 	call	0x428	; 0x428 <main>
  8a:	0c 94 72 06 	jmp	0xce4	; 0xce4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:
 *  Author: Ali
 */ 

#include "Button.h"

void button_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	d6 2f       	mov	r29, r22
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, INPUT);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_voidSetPinDirection>
	
	// Pullup
	switch(copy_u8PortID){
  a0:	c2 34       	cpi	r28, 0x42	; 66
  a2:	a1 f0       	breq	.+40     	; 0xcc <button_init+0x3a>
  a4:	18 f4       	brcc	.+6      	; 0xac <button_init+0x1a>
  a6:	c1 34       	cpi	r28, 0x41	; 65
  a8:	31 f0       	breq	.+12     	; 0xb6 <button_init+0x24>
  aa:	30 c0       	rjmp	.+96     	; 0x10c <button_init+0x7a>
  ac:	c3 34       	cpi	r28, 0x43	; 67
  ae:	c9 f0       	breq	.+50     	; 0xe2 <button_init+0x50>
  b0:	c4 34       	cpi	r28, 0x44	; 68
  b2:	11 f1       	breq	.+68     	; 0xf8 <button_init+0x66>
  b4:	2b c0       	rjmp	.+86     	; 0x10c <button_init+0x7a>
		case portA: SETBIT(PORTA, copy_u8PinID); break;
  b6:	2b b3       	in	r18, 0x1b	; 27
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <button_init+0x30>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	da 95       	dec	r29
  c4:	e2 f7       	brpl	.-8      	; 0xbe <button_init+0x2c>
  c6:	82 2b       	or	r24, r18
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	20 c0       	rjmp	.+64     	; 0x10c <button_init+0x7a>
		case portB: SETBIT(PORTB, copy_u8PinID); break;
  cc:	28 b3       	in	r18, 0x18	; 24
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <button_init+0x46>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	da 95       	dec	r29
  da:	e2 f7       	brpl	.-8      	; 0xd4 <button_init+0x42>
  dc:	82 2b       	or	r24, r18
  de:	88 bb       	out	0x18, r24	; 24
  e0:	15 c0       	rjmp	.+42     	; 0x10c <button_init+0x7a>
		case portC: SETBIT(PORTC, copy_u8PinID); break;
  e2:	25 b3       	in	r18, 0x15	; 21
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <button_init+0x5c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	da 95       	dec	r29
  f0:	e2 f7       	brpl	.-8      	; 0xea <button_init+0x58>
  f2:	82 2b       	or	r24, r18
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	0a c0       	rjmp	.+20     	; 0x10c <button_init+0x7a>
		case portD: SETBIT(PORTD, copy_u8PinID); break;
  f8:	22 b3       	in	r18, 0x12	; 18
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <button_init+0x72>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	da 95       	dec	r29
 106:	e2 f7       	brpl	.-8      	; 0x100 <button_init+0x6e>
 108:	82 2b       	or	r24, r18
 10a:	82 bb       	out	0x12, r24	; 18
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <button_read>:

uint8 button_read(uint8 copy_u8PortID, uint8 copy_u8PinID){
	return DIO_voidGetBitValue(copy_u8PortID, copy_u8PinID);
 112:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <DIO_voidGetBitValue>
}
 116:	08 95       	ret

00000118 <LCD_write_char>:
* Purpose      : Write a specific Ascii char (data) to lcd (valid only with 4-bit mode)
* Parameters   : data  (data to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_char(uint8 data){
	LCD_RS(1);
 118:	9b b3       	in	r25, 0x1b	; 27
 11a:	98 60       	ori	r25, 0x08	; 8
 11c:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(data, 4));
 11e:	84 ff       	sbrs	r24, 4
 120:	04 c0       	rjmp	.+8      	; 0x12a <LCD_write_char+0x12>
 122:	98 b3       	in	r25, 0x18	; 24
 124:	91 60       	ori	r25, 0x01	; 1
 126:	98 bb       	out	0x18, r25	; 24
 128:	03 c0       	rjmp	.+6      	; 0x130 <LCD_write_char+0x18>
 12a:	98 b3       	in	r25, 0x18	; 24
 12c:	9e 7f       	andi	r25, 0xFE	; 254
 12e:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 5));
 130:	85 ff       	sbrs	r24, 5
 132:	04 c0       	rjmp	.+8      	; 0x13c <LCD_write_char+0x24>
 134:	98 b3       	in	r25, 0x18	; 24
 136:	92 60       	ori	r25, 0x02	; 2
 138:	98 bb       	out	0x18, r25	; 24
 13a:	03 c0       	rjmp	.+6      	; 0x142 <LCD_write_char+0x2a>
 13c:	98 b3       	in	r25, 0x18	; 24
 13e:	9d 7f       	andi	r25, 0xFD	; 253
 140:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 6));
 142:	86 ff       	sbrs	r24, 6
 144:	04 c0       	rjmp	.+8      	; 0x14e <LCD_write_char+0x36>
 146:	98 b3       	in	r25, 0x18	; 24
 148:	94 60       	ori	r25, 0x04	; 4
 14a:	98 bb       	out	0x18, r25	; 24
 14c:	03 c0       	rjmp	.+6      	; 0x154 <LCD_write_char+0x3c>
 14e:	98 b3       	in	r25, 0x18	; 24
 150:	9b 7f       	andi	r25, 0xFB	; 251
 152:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 7));
 154:	88 23       	and	r24, r24
 156:	24 f4       	brge	.+8      	; 0x160 <LCD_write_char+0x48>
 158:	98 b3       	in	r25, 0x18	; 24
 15a:	90 61       	ori	r25, 0x10	; 16
 15c:	98 bb       	out	0x18, r25	; 24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <LCD_write_char+0x4e>
 160:	98 b3       	in	r25, 0x18	; 24
 162:	9f 7e       	andi	r25, 0xEF	; 239
 164:	98 bb       	out	0x18, r25	; 24
	
	LCD_EN(1);
 166:	9b b3       	in	r25, 0x1b	; 27
 168:	94 60       	ori	r25, 0x04	; 4
 16a:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	ef e9       	ldi	r30, 0x9F	; 159
 16e:	ff e0       	ldi	r31, 0x0F	; 15
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_write_char+0x58>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_write_char+0x5e>
 176:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 178:	9b b3       	in	r25, 0x1b	; 27
 17a:	9b 7f       	andi	r25, 0xFB	; 251
 17c:	9b bb       	out	0x1b, r25	; 27
 17e:	ef e9       	ldi	r30, 0x9F	; 159
 180:	ff e0       	ldi	r31, 0x0F	; 15
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_write_char+0x6a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_write_char+0x70>
 188:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(data, 0));
 18a:	80 ff       	sbrs	r24, 0
 18c:	04 c0       	rjmp	.+8      	; 0x196 <LCD_write_char+0x7e>
 18e:	98 b3       	in	r25, 0x18	; 24
 190:	91 60       	ori	r25, 0x01	; 1
 192:	98 bb       	out	0x18, r25	; 24
 194:	03 c0       	rjmp	.+6      	; 0x19c <LCD_write_char+0x84>
 196:	98 b3       	in	r25, 0x18	; 24
 198:	9e 7f       	andi	r25, 0xFE	; 254
 19a:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 1));
 19c:	81 ff       	sbrs	r24, 1
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <LCD_write_char+0x90>
 1a0:	98 b3       	in	r25, 0x18	; 24
 1a2:	92 60       	ori	r25, 0x02	; 2
 1a4:	98 bb       	out	0x18, r25	; 24
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <LCD_write_char+0x96>
 1a8:	98 b3       	in	r25, 0x18	; 24
 1aa:	9d 7f       	andi	r25, 0xFD	; 253
 1ac:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 2));
 1ae:	82 ff       	sbrs	r24, 2
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <LCD_write_char+0xa2>
 1b2:	98 b3       	in	r25, 0x18	; 24
 1b4:	94 60       	ori	r25, 0x04	; 4
 1b6:	98 bb       	out	0x18, r25	; 24
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <LCD_write_char+0xa8>
 1ba:	98 b3       	in	r25, 0x18	; 24
 1bc:	9b 7f       	andi	r25, 0xFB	; 251
 1be:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 3));
 1c0:	83 ff       	sbrs	r24, 3
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <LCD_write_char+0xb4>
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <LCD_write_char+0xba>
 1cc:	88 b3       	in	r24, 0x18	; 24
 1ce:	8f 7e       	andi	r24, 0xEF	; 239
 1d0:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 1d2:	8b b3       	in	r24, 0x1b	; 27
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	8b bb       	out	0x1b, r24	; 27
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_write_char+0xc4>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_write_char+0xca>
 1e2:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 1e4:	8b b3       	in	r24, 0x1b	; 27
 1e6:	8b 7f       	andi	r24, 0xFB	; 251
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	ef e9       	ldi	r30, 0x9F	; 159
 1ec:	ff e0       	ldi	r31, 0x0F	; 15
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_write_char+0xd6>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_write_char+0xdc>
 1f4:	00 00       	nop
 1f6:	08 95       	ret

000001f8 <LCD_write_command>:
* Purpose      : Send a specific command (cmd) to lcd (valid only with 4-bit mode)
* Parameters   : cmd  (command to be done by lcd)
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8 cmd){
	LCD_RS(0);
 1f8:	9b b3       	in	r25, 0x1b	; 27
 1fa:	97 7f       	andi	r25, 0xF7	; 247
 1fc:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(cmd, 4));
 1fe:	84 ff       	sbrs	r24, 4
 200:	04 c0       	rjmp	.+8      	; 0x20a <LCD_write_command+0x12>
 202:	98 b3       	in	r25, 0x18	; 24
 204:	91 60       	ori	r25, 0x01	; 1
 206:	98 bb       	out	0x18, r25	; 24
 208:	03 c0       	rjmp	.+6      	; 0x210 <LCD_write_command+0x18>
 20a:	98 b3       	in	r25, 0x18	; 24
 20c:	9e 7f       	andi	r25, 0xFE	; 254
 20e:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 5));
 210:	85 ff       	sbrs	r24, 5
 212:	04 c0       	rjmp	.+8      	; 0x21c <LCD_write_command+0x24>
 214:	98 b3       	in	r25, 0x18	; 24
 216:	92 60       	ori	r25, 0x02	; 2
 218:	98 bb       	out	0x18, r25	; 24
 21a:	03 c0       	rjmp	.+6      	; 0x222 <LCD_write_command+0x2a>
 21c:	98 b3       	in	r25, 0x18	; 24
 21e:	9d 7f       	andi	r25, 0xFD	; 253
 220:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 6));
 222:	86 ff       	sbrs	r24, 6
 224:	04 c0       	rjmp	.+8      	; 0x22e <LCD_write_command+0x36>
 226:	98 b3       	in	r25, 0x18	; 24
 228:	94 60       	ori	r25, 0x04	; 4
 22a:	98 bb       	out	0x18, r25	; 24
 22c:	03 c0       	rjmp	.+6      	; 0x234 <LCD_write_command+0x3c>
 22e:	98 b3       	in	r25, 0x18	; 24
 230:	9b 7f       	andi	r25, 0xFB	; 251
 232:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 7));
 234:	88 23       	and	r24, r24
 236:	24 f4       	brge	.+8      	; 0x240 <LCD_write_command+0x48>
 238:	98 b3       	in	r25, 0x18	; 24
 23a:	90 61       	ori	r25, 0x10	; 16
 23c:	98 bb       	out	0x18, r25	; 24
 23e:	03 c0       	rjmp	.+6      	; 0x246 <LCD_write_command+0x4e>
 240:	98 b3       	in	r25, 0x18	; 24
 242:	9f 7e       	andi	r25, 0xEF	; 239
 244:	98 bb       	out	0x18, r25	; 24

	LCD_EN(1);
 246:	9b b3       	in	r25, 0x1b	; 27
 248:	94 60       	ori	r25, 0x04	; 4
 24a:	9b bb       	out	0x1b, r25	; 27
 24c:	ef e9       	ldi	r30, 0x9F	; 159
 24e:	ff e0       	ldi	r31, 0x0F	; 15
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_write_command+0x58>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_write_command+0x5e>
 256:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 258:	9b b3       	in	r25, 0x1b	; 27
 25a:	9b 7f       	andi	r25, 0xFB	; 251
 25c:	9b bb       	out	0x1b, r25	; 27
 25e:	ef e9       	ldi	r30, 0x9F	; 159
 260:	ff e0       	ldi	r31, 0x0F	; 15
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_write_command+0x6a>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_write_command+0x70>
 268:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(cmd, 0));
 26a:	80 ff       	sbrs	r24, 0
 26c:	04 c0       	rjmp	.+8      	; 0x276 <LCD_write_command+0x7e>
 26e:	98 b3       	in	r25, 0x18	; 24
 270:	91 60       	ori	r25, 0x01	; 1
 272:	98 bb       	out	0x18, r25	; 24
 274:	03 c0       	rjmp	.+6      	; 0x27c <LCD_write_command+0x84>
 276:	98 b3       	in	r25, 0x18	; 24
 278:	9e 7f       	andi	r25, 0xFE	; 254
 27a:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 1));
 27c:	81 ff       	sbrs	r24, 1
 27e:	04 c0       	rjmp	.+8      	; 0x288 <LCD_write_command+0x90>
 280:	98 b3       	in	r25, 0x18	; 24
 282:	92 60       	ori	r25, 0x02	; 2
 284:	98 bb       	out	0x18, r25	; 24
 286:	03 c0       	rjmp	.+6      	; 0x28e <LCD_write_command+0x96>
 288:	98 b3       	in	r25, 0x18	; 24
 28a:	9d 7f       	andi	r25, 0xFD	; 253
 28c:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 2));
 28e:	82 ff       	sbrs	r24, 2
 290:	04 c0       	rjmp	.+8      	; 0x29a <LCD_write_command+0xa2>
 292:	98 b3       	in	r25, 0x18	; 24
 294:	94 60       	ori	r25, 0x04	; 4
 296:	98 bb       	out	0x18, r25	; 24
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <LCD_write_command+0xa8>
 29a:	98 b3       	in	r25, 0x18	; 24
 29c:	9b 7f       	andi	r25, 0xFB	; 251
 29e:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 3));
 2a0:	83 ff       	sbrs	r24, 3
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <LCD_write_command+0xb4>
 2a4:	88 b3       	in	r24, 0x18	; 24
 2a6:	80 61       	ori	r24, 0x10	; 16
 2a8:	88 bb       	out	0x18, r24	; 24
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <LCD_write_command+0xba>
 2ac:	88 b3       	in	r24, 0x18	; 24
 2ae:	8f 7e       	andi	r24, 0xEF	; 239
 2b0:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 2b2:	8b b3       	in	r24, 0x1b	; 27
 2b4:	84 60       	ori	r24, 0x04	; 4
 2b6:	8b bb       	out	0x1b, r24	; 27
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_write_command+0xc4>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_write_command+0xca>
 2c2:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 2c4:	8b b3       	in	r24, 0x1b	; 27
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	ef e9       	ldi	r30, 0x9F	; 159
 2cc:	ff e0       	ldi	r31, 0x0F	; 15
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_write_command+0xd6>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_write_command+0xdc>
 2d4:	00 00       	nop
 2d6:	08 95       	ret

000002d8 <LCD_init>:
* Parameters   : void
* Return value : void

*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PINS();
 2d8:	8a b3       	in	r24, 0x1a	; 26
 2da:	88 60       	ori	r24, 0x08	; 8
 2dc:	8a bb       	out	0x1a, r24	; 26
 2de:	8a b3       	in	r24, 0x1a	; 26
 2e0:	84 60       	ori	r24, 0x04	; 4
 2e2:	8a bb       	out	0x1a, r24	; 26
 2e4:	87 b3       	in	r24, 0x17	; 23
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	87 bb       	out	0x17, r24	; 23
 2ea:	87 b3       	in	r24, 0x17	; 23
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	87 bb       	out	0x17, r24	; 23
 2f0:	87 b3       	in	r24, 0x17	; 23
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	87 bb       	out	0x17, r24	; 23
 2f6:	87 b3       	in	r24, 0x17	; 23
 2f8:	80 61       	ori	r24, 0x10	; 16
 2fa:	87 bb       	out	0x17, r24	; 23
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	89 ef       	ldi	r24, 0xF9	; 249
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <LCD_init+0x2a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_init+0x34>
 30c:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_write_command(0x02);		      /* send for 4 bit initialization of LCD  */
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 314:	88 e2       	ldi	r24, 0x28	; 40
 316:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x0c);              /* Display on cursor off*/
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x06);              /* Increment cursor (shift cursor to right)*/
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x01);              /* Clear display screen*/
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	86 e7       	ldi	r24, 0x76	; 118
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <LCD_init+0x5a>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_init+0x64>
 33c:	00 00       	nop
 33e:	08 95       	ret

00000340 <LCD_write_number>:
* Function Name: LCD_write_num
* Purpose      : Write a specific number (num) on lcd (valid only with 4-bit mode)
* Parameters   : num  (num to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	2a 97       	sbiw	r28, 0x0a	; 10
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
	
	if(num < 0){
 358:	99 23       	and	r25, r25
 35a:	4c f4       	brge	.+18     	; 0x36e <LCD_write_number+0x2e>
		num *= -1;
 35c:	90 95       	com	r25
 35e:	80 95       	com	r24
 360:	70 95       	com	r23
 362:	61 95       	neg	r22
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	8f 4f       	sbci	r24, 0xFF	; 255
 368:	9f 4f       	sbci	r25, 0xFF	; 255
		neg_flag = 1;
 36a:	01 e0       	ldi	r16, 0x01	; 1
 36c:	01 c0       	rjmp	.+2      	; 0x370 <LCD_write_number+0x30>
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
 36e:	00 e0       	ldi	r16, 0x00	; 0
	if(num < 0){
		num *= -1;
		neg_flag = 1;
	}
	
	if(num == 0) {
 370:	61 15       	cp	r22, r1
 372:	71 05       	cpc	r23, r1
 374:	81 05       	cpc	r24, r1
 376:	91 05       	cpc	r25, r1
 378:	d1 f4       	brne	.+52     	; 0x3ae <LCD_write_number+0x6e>
		LCD_write_char('0');
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
 380:	31 c0       	rjmp	.+98     	; 0x3e4 <LCD_write_number+0xa4>
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
		num_arr[i] = num % 10 + '0';
 382:	2a e0       	ldi	r18, 0x0A	; 10
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	0e 94 53 06 	call	0xca6	; 0xca6 <__divmodsi4>
 38e:	e1 e0       	ldi	r30, 0x01	; 1
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	e1 0f       	add	r30, r17
 398:	f1 1d       	adc	r31, r1
 39a:	17 fd       	sbrc	r17, 7
 39c:	fa 95       	dec	r31
 39e:	60 5d       	subi	r22, 0xD0	; 208
 3a0:	60 83       	st	Z, r22
		num /= 10;
 3a2:	62 2f       	mov	r22, r18
 3a4:	73 2f       	mov	r23, r19
 3a6:	84 2f       	mov	r24, r20
 3a8:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_char('0');
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
 3aa:	1f 5f       	subi	r17, 0xFF	; 255
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <LCD_write_number+0x70>
 3ae:	10 e0       	ldi	r17, 0x00	; 0
 3b0:	61 15       	cp	r22, r1
 3b2:	71 05       	cpc	r23, r1
 3b4:	81 05       	cpc	r24, r1
 3b6:	91 05       	cpc	r25, r1
 3b8:	21 f7       	brne	.-56     	; 0x382 <LCD_write_number+0x42>
		num_arr[i] = num % 10 + '0';
		num /= 10;
	}
	i--;
 3ba:	11 50       	subi	r17, 0x01	; 1
	if(neg_flag == 1){
 3bc:	01 30       	cpi	r16, 0x01	; 1
 3be:	81 f4       	brne	.+32     	; 0x3e0 <LCD_write_number+0xa0>
		LCD_write_char('-');
 3c0:	8d e2       	ldi	r24, 0x2D	; 45
 3c2:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
 3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <LCD_write_number+0xa0>
	}
	while (i >= 0){
		LCD_write_char(num_arr[i]);
 3c8:	e1 e0       	ldi	r30, 0x01	; 1
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	ec 0f       	add	r30, r28
 3ce:	fd 1f       	adc	r31, r29
 3d0:	e1 0f       	add	r30, r17
 3d2:	f1 1d       	adc	r31, r1
 3d4:	17 fd       	sbrc	r17, 7
 3d6:	fa 95       	dec	r31
 3d8:	80 81       	ld	r24, Z
 3da:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
		i--;
 3de:	11 50       	subi	r17, 0x01	; 1
	}
	i--;
	if(neg_flag == 1){
		LCD_write_char('-');
	}
	while (i >= 0){
 3e0:	11 23       	and	r17, r17
 3e2:	94 f7       	brge	.-28     	; 0x3c8 <LCD_write_number+0x88>
		LCD_write_char(num_arr[i]);
		i--;
	}
}
 3e4:	2a 96       	adiw	r28, 0x0a	; 10
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <LCD_write_string>:
* Purpose      : Write a string (*txt) to lcd (valid only with 4-bit mode)
*                (assume the end char of string is NULL (Ascii:'\0' - decimal:0 ))
* Parameters   : *txt  (array of char to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	8c 01       	movw	r16, r24
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	03 c0       	rjmp	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		LCD_write_char(str[i]);
 406:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 40a:	cf 5f       	subi	r28, 0xFF	; 255
 40c:	f8 01       	movw	r30, r16
 40e:	ec 0f       	add	r30, r28
 410:	f1 1d       	adc	r31, r1
 412:	80 81       	ld	r24, Z
 414:	81 11       	cpse	r24, r1
 416:	f7 cf       	rjmp	.-18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		LCD_write_char(str[i]);
	}
	
}
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <led_init>:
 */ 

#include "LED.h"

void led_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, OUTPUT);
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_voidSetPinDirection>
 426:	08 95       	ret

00000428 <main>:
#include "MCAL/Timer0/Timer0_Interface.h"

int main(void)
{
	// Init led
	LCD_init();
 428:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_init>
	button_init(portD, 7);
 42c:	67 e0       	ldi	r22, 0x07	; 7
 42e:	84 e4       	ldi	r24, 0x44	; 68
 430:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	led_init(portA, 5);
 434:	65 e0       	ldi	r22, 0x05	; 5
 436:	81 e4       	ldi	r24, 0x41	; 65
 438:	0e 94 10 02 	call	0x420	; 0x420 <led_init>
	
	uint8 duty = 0;
	
	GIE_Disable();
 43c:	0e 94 8b 03 	call	0x716	; 0x716 <GIE_Disable>
	PWM0_OC0_duty(duty, PWM_FAST, INVERTED);
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	63 e0       	ldi	r22, 0x03	; 3
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 19 04 	call	0x832	; 0x832 <PWM0_OC0_duty>
	timer0_init(PWM_PC, P8, INTERUPT_OFF, INVERTED);
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 8f 03 	call	0x71e	; 0x71e <timer0_init>
	GIE_Enable();
 456:	0e 94 87 03 	call	0x70e	; 0x70e <GIE_Enable>
	
	LCD_write_command(0x80);
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_string("Duty= ");
 460:	80 e6       	ldi	r24, 0x60	; 96
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
	LCD_write_command(0x86);
 468:	86 e8       	ldi	r24, 0x86	; 134
 46a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_number(duty);
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	cb 01       	movw	r24, r22
 474:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_write_number>
	LCD_write_command(0x89);
 478:	89 e8       	ldi	r24, 0x89	; 137
 47a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_string("%");
 47e:	87 e6       	ldi	r24, 0x67	; 103
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
	// Init led
	LCD_init();
	button_init(portD, 7);
	led_init(portA, 5);
	
	uint8 duty = 0;
 486:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_write_command(0x89);
	LCD_write_string("%");
		
	while (1)
	{
		if(!button_read(portD, 7)){
 488:	67 e0       	ldi	r22, 0x07	; 7
 48a:	84 e4       	ldi	r24, 0x44	; 68
 48c:	0e 94 89 00 	call	0x112	; 0x112 <button_read>
 490:	81 11       	cpse	r24, r1
 492:	fa cf       	rjmp	.-12     	; 0x488 <main+0x60>
			duty += 10;
 494:	c6 5f       	subi	r28, 0xF6	; 246
			if(duty == 110){
 496:	ce 36       	cpi	r28, 0x6E	; 110
 498:	41 f4       	brne	.+16     	; 0x4aa <main+0x82>
				duty = 0;
				LCD_write_command(0x86);
 49a:	86 e8       	ldi	r24, 0x86	; 134
 49c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
				LCD_write_string("   ");
 4a0:	89 e6       	ldi	r24, 0x69	; 105
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
	while (1)
	{
		if(!button_read(portD, 7)){
			duty += 10;
			if(duty == 110){
				duty = 0;
 4a8:	c0 e0       	ldi	r28, 0x00	; 0
				LCD_write_command(0x86);
				LCD_write_string("   ");
			}
			PWM0_OC0_duty(duty, PWM_FAST, INVERTED);
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	63 e0       	ldi	r22, 0x03	; 3
 4ae:	8c 2f       	mov	r24, r28
 4b0:	0e 94 19 04 	call	0x832	; 0x832 <PWM0_OC0_duty>
			LCD_write_command(0x86);
 4b4:	86 e8       	ldi	r24, 0x86	; 134
 4b6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
			LCD_write_number(duty);
 4ba:	6c 2f       	mov	r22, r28
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_write_number>
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	85 ea       	ldi	r24, 0xA5	; 165
 4ca:	9e e0       	ldi	r25, 0x0E	; 14
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0xa4>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <main+0xae>
 4d6:	00 00       	nop
 4d8:	d7 cf       	rjmp	.-82     	; 0x488 <main+0x60>

000004da <DIO_voidSetPinDirection>:
	else{ // HIGH
		switch(copy_u8PortID){
			case portA: SETBIT(PORTA, copy_u8PinID); break;
			case portB: SETBIT(PORTB, copy_u8PinID); break;
			case portC: SETBIT(PORTC, copy_u8PinID); break;
			case portD: SETBIT(PORTD, copy_u8PinID); break;
 4da:	41 11       	cpse	r20, r1
 4dc:	3b c0       	rjmp	.+118    	; 0x554 <DIO_voidSetPinDirection+0x7a>
 4de:	82 34       	cpi	r24, 0x42	; 66
 4e0:	a9 f0       	breq	.+42     	; 0x50c <DIO_voidSetPinDirection+0x32>
 4e2:	18 f4       	brcc	.+6      	; 0x4ea <DIO_voidSetPinDirection+0x10>
 4e4:	81 34       	cpi	r24, 0x41	; 65
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <DIO_voidSetPinDirection+0x1a>
 4e8:	08 95       	ret
 4ea:	83 34       	cpi	r24, 0x43	; 67
 4ec:	d9 f0       	breq	.+54     	; 0x524 <DIO_voidSetPinDirection+0x4a>
 4ee:	84 34       	cpi	r24, 0x44	; 68
 4f0:	29 f1       	breq	.+74     	; 0x53c <DIO_voidSetPinDirection+0x62>
 4f2:	08 95       	ret
 4f4:	2a b3       	in	r18, 0x1a	; 26
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_voidSetPinDirection+0x26>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_voidSetPinDirection+0x22>
 504:	80 95       	com	r24
 506:	82 23       	and	r24, r18
 508:	8a bb       	out	0x1a, r24	; 26
 50a:	08 95       	ret
 50c:	27 b3       	in	r18, 0x17	; 23
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_voidSetPinDirection+0x3e>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_voidSetPinDirection+0x3a>
 51c:	80 95       	com	r24
 51e:	82 23       	and	r24, r18
 520:	87 bb       	out	0x17, r24	; 23
 522:	08 95       	ret
 524:	24 b3       	in	r18, 0x14	; 20
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_voidSetPinDirection+0x56>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_voidSetPinDirection+0x52>
 534:	80 95       	com	r24
 536:	82 23       	and	r24, r18
 538:	84 bb       	out	0x14, r24	; 20
 53a:	08 95       	ret
 53c:	21 b3       	in	r18, 0x11	; 17
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_voidSetPinDirection+0x6e>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_voidSetPinDirection+0x6a>
 54c:	80 95       	com	r24
 54e:	82 23       	and	r24, r18
 550:	81 bb       	out	0x11, r24	; 17
 552:	08 95       	ret
 554:	82 34       	cpi	r24, 0x42	; 66
 556:	a1 f0       	breq	.+40     	; 0x580 <DIO_voidSetPinDirection+0xa6>
 558:	18 f4       	brcc	.+6      	; 0x560 <DIO_voidSetPinDirection+0x86>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	31 f0       	breq	.+12     	; 0x56a <DIO_voidSetPinDirection+0x90>
 55e:	08 95       	ret
 560:	83 34       	cpi	r24, 0x43	; 67
 562:	c9 f0       	breq	.+50     	; 0x596 <DIO_voidSetPinDirection+0xbc>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	11 f1       	breq	.+68     	; 0x5ac <DIO_voidSetPinDirection+0xd2>
 568:	08 95       	ret
 56a:	2a b3       	in	r18, 0x1a	; 26
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_voidSetPinDirection+0x9c>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_voidSetPinDirection+0x98>
 57a:	82 2b       	or	r24, r18
 57c:	8a bb       	out	0x1a, r24	; 26
 57e:	08 95       	ret
 580:	27 b3       	in	r18, 0x17	; 23
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_voidSetPinDirection+0xb2>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_voidSetPinDirection+0xae>
 590:	82 2b       	or	r24, r18
 592:	87 bb       	out	0x17, r24	; 23
 594:	08 95       	ret
 596:	24 b3       	in	r18, 0x14	; 20
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_voidSetPinDirection+0xc8>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_voidSetPinDirection+0xc4>
 5a6:	82 2b       	or	r24, r18
 5a8:	84 bb       	out	0x14, r24	; 20
 5aa:	08 95       	ret
 5ac:	21 b3       	in	r18, 0x11	; 17
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_voidSetPinDirection+0xde>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_voidSetPinDirection+0xda>
 5bc:	82 2b       	or	r24, r18
 5be:	81 bb       	out	0x11, r24	; 17
 5c0:	08 95       	ret

000005c2 <DIO_voidGetBitValue>:
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
	switch(copy_u8PortID){
 5c2:	82 34       	cpi	r24, 0x42	; 66
 5c4:	91 f0       	breq	.+36     	; 0x5ea <DIO_voidGetBitValue+0x28>
 5c6:	18 f4       	brcc	.+6      	; 0x5ce <DIO_voidGetBitValue+0xc>
 5c8:	81 34       	cpi	r24, 0x41	; 65
 5ca:	31 f0       	breq	.+12     	; 0x5d8 <DIO_voidGetBitValue+0x16>
 5cc:	29 c0       	rjmp	.+82     	; 0x620 <DIO_voidGetBitValue+0x5e>
 5ce:	83 34       	cpi	r24, 0x43	; 67
 5d0:	a9 f0       	breq	.+42     	; 0x5fc <DIO_voidGetBitValue+0x3a>
 5d2:	84 34       	cpi	r24, 0x44	; 68
 5d4:	e1 f0       	breq	.+56     	; 0x60e <DIO_voidGetBitValue+0x4c>
 5d6:	24 c0       	rjmp	.+72     	; 0x620 <DIO_voidGetBitValue+0x5e>
		case portA: value = READBIT(PINA, copy_u8PinID); break;
 5d8:	89 b3       	in	r24, 0x19	; 25
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_voidGetBitValue+0x20>
 5de:	95 95       	asr	r25
 5e0:	87 95       	ror	r24
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_voidGetBitValue+0x1c>
 5e6:	81 70       	andi	r24, 0x01	; 1
 5e8:	08 95       	ret
		case portB: value = READBIT(PINB, copy_u8PinID); break;
 5ea:	86 b3       	in	r24, 0x16	; 22
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_voidGetBitValue+0x32>
 5f0:	95 95       	asr	r25
 5f2:	87 95       	ror	r24
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_voidGetBitValue+0x2e>
 5f8:	81 70       	andi	r24, 0x01	; 1
 5fa:	08 95       	ret
		case portC: value = READBIT(PINC, copy_u8PinID); break;
 5fc:	83 b3       	in	r24, 0x13	; 19
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_voidGetBitValue+0x44>
 602:	95 95       	asr	r25
 604:	87 95       	ror	r24
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_voidGetBitValue+0x40>
 60a:	81 70       	andi	r24, 0x01	; 1
 60c:	08 95       	ret
		case portD: value = READBIT(PIND, copy_u8PinID); break;
 60e:	80 b3       	in	r24, 0x10	; 16
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_voidGetBitValue+0x56>
 614:	95 95       	asr	r25
 616:	87 95       	ror	r24
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_voidGetBitValue+0x52>
 61c:	81 70       	andi	r24, 0x01	; 1
 61e:	08 95       	ret
		}
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
 620:	80 e0       	ldi	r24, 0x00	; 0
		case portB: value = READBIT(PINB, copy_u8PinID); break;
		case portC: value = READBIT(PINC, copy_u8PinID); break;
		case portD: value = READBIT(PIND, copy_u8PinID); break;
	}
	return value;
 622:	08 95       	ret

00000624 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 624:	1f 92       	push	r1
 626:	0f 92       	push	r0
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	0f 92       	push	r0
 62c:	11 24       	eor	r1, r1
 62e:	2f 93       	push	r18
 630:	3f 93       	push	r19
 632:	4f 93       	push	r20
 634:	5f 93       	push	r21
 636:	6f 93       	push	r22
 638:	7f 93       	push	r23
 63a:	8f 93       	push	r24
 63c:	9f 93       	push	r25
 63e:	af 93       	push	r26
 640:	bf 93       	push	r27
 642:	ef 93       	push	r30
 644:	ff 93       	push	r31
	ptr_EXT1();
 646:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <ptr_EXT1>
 64a:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <ptr_EXT1+0x1>
 64e:	09 95       	icall
}
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	7f 91       	pop	r23
 65e:	6f 91       	pop	r22
 660:	5f 91       	pop	r21
 662:	4f 91       	pop	r20
 664:	3f 91       	pop	r19
 666:	2f 91       	pop	r18
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	0f 92       	push	r0
 67a:	11 24       	eor	r1, r1
 67c:	2f 93       	push	r18
 67e:	3f 93       	push	r19
 680:	4f 93       	push	r20
 682:	5f 93       	push	r21
 684:	6f 93       	push	r22
 686:	7f 93       	push	r23
 688:	8f 93       	push	r24
 68a:	9f 93       	push	r25
 68c:	af 93       	push	r26
 68e:	bf 93       	push	r27
 690:	ef 93       	push	r30
 692:	ff 93       	push	r31
	ptr_EXT2();
 694:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <ptr_EXT2>
 698:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <ptr_EXT2+0x1>
 69c:	09 95       	icall
}
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	bf 91       	pop	r27
 6a4:	af 91       	pop	r26
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	7f 91       	pop	r23
 6ac:	6f 91       	pop	r22
 6ae:	5f 91       	pop	r21
 6b0:	4f 91       	pop	r20
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 6c0:	1f 92       	push	r1
 6c2:	0f 92       	push	r0
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	0f 92       	push	r0
 6c8:	11 24       	eor	r1, r1
 6ca:	2f 93       	push	r18
 6cc:	3f 93       	push	r19
 6ce:	4f 93       	push	r20
 6d0:	5f 93       	push	r21
 6d2:	6f 93       	push	r22
 6d4:	7f 93       	push	r23
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
 6da:	af 93       	push	r26
 6dc:	bf 93       	push	r27
 6de:	ef 93       	push	r30
 6e0:	ff 93       	push	r31
	ptr_EXT3();
 6e2:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 6e6:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 6ea:	09 95       	icall
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	bf 91       	pop	r27
 6f2:	af 91       	pop	r26
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	7f 91       	pop	r23
 6fa:	6f 91       	pop	r22
 6fc:	5f 91       	pop	r21
 6fe:	4f 91       	pop	r20
 700:	3f 91       	pop	r19
 702:	2f 91       	pop	r18
 704:	0f 90       	pop	r0
 706:	0f be       	out	0x3f, r0	; 63
 708:	0f 90       	pop	r0
 70a:	1f 90       	pop	r1
 70c:	18 95       	reti

0000070e <GIE_Enable>:

#include "GIE_Interface.h"
#include "std_macros.h"

void GIE_Enable(void){
	SETBIT(SREG, I_BIT);
 70e:	8f b7       	in	r24, 0x3f	; 63
 710:	80 68       	ori	r24, 0x80	; 128
 712:	8f bf       	out	0x3f, r24	; 63
 714:	08 95       	ret

00000716 <GIE_Disable>:
}

void GIE_Disable(void){
	CLRBIT(SREG, I_BIT);
 716:	8f b7       	in	r24, 0x3f	; 63
 718:	8f 77       	andi	r24, 0x7F	; 127
 71a:	8f bf       	out	0x3f, r24	; 63
 71c:	08 95       	ret

0000071e <timer0_init>:
		SETBIT(TIFR,TOV0);
		
	}
	
	timer0_disable();
}
 71e:	12 be       	out	0x32, r1	; 50
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	69 f0       	breq	.+26     	; 0x73e <timer0_init+0x20>
 724:	28 f0       	brcs	.+10     	; 0x730 <timer0_init+0x12>
 726:	82 30       	cpi	r24, 0x02	; 2
 728:	89 f0       	breq	.+34     	; 0x74c <timer0_init+0x2e>
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	b1 f0       	breq	.+44     	; 0x75a <timer0_init+0x3c>
 72e:	1b c0       	rjmp	.+54     	; 0x766 <timer0_init+0x48>
 730:	93 b7       	in	r25, 0x33	; 51
 732:	97 7f       	andi	r25, 0xF7	; 247
 734:	93 bf       	out	0x33, r25	; 51
 736:	93 b7       	in	r25, 0x33	; 51
 738:	9f 7b       	andi	r25, 0xBF	; 191
 73a:	93 bf       	out	0x33, r25	; 51
 73c:	14 c0       	rjmp	.+40     	; 0x766 <timer0_init+0x48>
 73e:	93 b7       	in	r25, 0x33	; 51
 740:	97 7f       	andi	r25, 0xF7	; 247
 742:	93 bf       	out	0x33, r25	; 51
 744:	93 b7       	in	r25, 0x33	; 51
 746:	90 64       	ori	r25, 0x40	; 64
 748:	93 bf       	out	0x33, r25	; 51
 74a:	0d c0       	rjmp	.+26     	; 0x766 <timer0_init+0x48>
 74c:	93 b7       	in	r25, 0x33	; 51
 74e:	98 60       	ori	r25, 0x08	; 8
 750:	93 bf       	out	0x33, r25	; 51
 752:	93 b7       	in	r25, 0x33	; 51
 754:	9f 7b       	andi	r25, 0xBF	; 191
 756:	93 bf       	out	0x33, r25	; 51
 758:	06 c0       	rjmp	.+12     	; 0x766 <timer0_init+0x48>
 75a:	93 b7       	in	r25, 0x33	; 51
 75c:	98 60       	ori	r25, 0x08	; 8
 75e:	93 bf       	out	0x33, r25	; 51
 760:	93 b7       	in	r25, 0x33	; 51
 762:	90 64       	ori	r25, 0x40	; 64
 764:	93 bf       	out	0x33, r25	; 51
 766:	83 30       	cpi	r24, 0x03	; 3
 768:	11 f0       	breq	.+4      	; 0x76e <timer0_init+0x50>
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	a9 f4       	brne	.+42     	; 0x798 <timer0_init+0x7a>
 76e:	97 b3       	in	r25, 0x17	; 23
 770:	98 60       	ori	r25, 0x08	; 8
 772:	97 bb       	out	0x17, r25	; 23
 774:	22 23       	and	r18, r18
 776:	19 f0       	breq	.+6      	; 0x77e <timer0_init+0x60>
 778:	21 30       	cpi	r18, 0x01	; 1
 77a:	41 f0       	breq	.+16     	; 0x78c <timer0_init+0x6e>
 77c:	0d c0       	rjmp	.+26     	; 0x798 <timer0_init+0x7a>
 77e:	93 b7       	in	r25, 0x33	; 51
 780:	90 62       	ori	r25, 0x20	; 32
 782:	93 bf       	out	0x33, r25	; 51
 784:	93 b7       	in	r25, 0x33	; 51
 786:	9f 7e       	andi	r25, 0xEF	; 239
 788:	93 bf       	out	0x33, r25	; 51
 78a:	06 c0       	rjmp	.+12     	; 0x798 <timer0_init+0x7a>
 78c:	93 b7       	in	r25, 0x33	; 51
 78e:	90 62       	ori	r25, 0x20	; 32
 790:	93 bf       	out	0x33, r25	; 51
 792:	93 b7       	in	r25, 0x33	; 51
 794:	90 61       	ori	r25, 0x10	; 16
 796:	93 bf       	out	0x33, r25	; 51
 798:	62 30       	cpi	r22, 0x02	; 2
 79a:	f9 f0       	breq	.+62     	; 0x7da <timer0_init+0xbc>
 79c:	28 f4       	brcc	.+10     	; 0x7a8 <timer0_init+0x8a>
 79e:	66 23       	and	r22, r22
 7a0:	41 f0       	breq	.+16     	; 0x7b2 <timer0_init+0x94>
 7a2:	61 30       	cpi	r22, 0x01	; 1
 7a4:	81 f0       	breq	.+32     	; 0x7c6 <timer0_init+0xa8>
 7a6:	36 c0       	rjmp	.+108    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7a8:	63 30       	cpi	r22, 0x03	; 3
 7aa:	09 f1       	breq	.+66     	; 0x7ee <timer0_init+0xd0>
 7ac:	64 30       	cpi	r22, 0x04	; 4
 7ae:	49 f1       	breq	.+82     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7b0:	31 c0       	rjmp	.+98     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7b2:	93 b7       	in	r25, 0x33	; 51
 7b4:	9b 7f       	andi	r25, 0xFB	; 251
 7b6:	93 bf       	out	0x33, r25	; 51
 7b8:	93 b7       	in	r25, 0x33	; 51
 7ba:	9d 7f       	andi	r25, 0xFD	; 253
 7bc:	93 bf       	out	0x33, r25	; 51
 7be:	93 b7       	in	r25, 0x33	; 51
 7c0:	91 60       	ori	r25, 0x01	; 1
 7c2:	93 bf       	out	0x33, r25	; 51
 7c4:	27 c0       	rjmp	.+78     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7c6:	93 b7       	in	r25, 0x33	; 51
 7c8:	9b 7f       	andi	r25, 0xFB	; 251
 7ca:	93 bf       	out	0x33, r25	; 51
 7cc:	93 b7       	in	r25, 0x33	; 51
 7ce:	92 60       	ori	r25, 0x02	; 2
 7d0:	93 bf       	out	0x33, r25	; 51
 7d2:	93 b7       	in	r25, 0x33	; 51
 7d4:	9e 7f       	andi	r25, 0xFE	; 254
 7d6:	93 bf       	out	0x33, r25	; 51
 7d8:	1d c0       	rjmp	.+58     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7da:	93 b7       	in	r25, 0x33	; 51
 7dc:	9b 7f       	andi	r25, 0xFB	; 251
 7de:	93 bf       	out	0x33, r25	; 51
 7e0:	93 b7       	in	r25, 0x33	; 51
 7e2:	92 60       	ori	r25, 0x02	; 2
 7e4:	93 bf       	out	0x33, r25	; 51
 7e6:	93 b7       	in	r25, 0x33	; 51
 7e8:	91 60       	ori	r25, 0x01	; 1
 7ea:	93 bf       	out	0x33, r25	; 51
 7ec:	13 c0       	rjmp	.+38     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7ee:	93 b7       	in	r25, 0x33	; 51
 7f0:	94 60       	ori	r25, 0x04	; 4
 7f2:	93 bf       	out	0x33, r25	; 51
 7f4:	93 b7       	in	r25, 0x33	; 51
 7f6:	9d 7f       	andi	r25, 0xFD	; 253
 7f8:	93 bf       	out	0x33, r25	; 51
 7fa:	93 b7       	in	r25, 0x33	; 51
 7fc:	9e 7f       	andi	r25, 0xFE	; 254
 7fe:	93 bf       	out	0x33, r25	; 51
 800:	09 c0       	rjmp	.+18     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 802:	93 b7       	in	r25, 0x33	; 51
 804:	94 60       	ori	r25, 0x04	; 4
 806:	93 bf       	out	0x33, r25	; 51
 808:	93 b7       	in	r25, 0x33	; 51
 80a:	9d 7f       	andi	r25, 0xFD	; 253
 80c:	93 bf       	out	0x33, r25	; 51
 80e:	93 b7       	in	r25, 0x33	; 51
 810:	91 60       	ori	r25, 0x01	; 1
 812:	93 bf       	out	0x33, r25	; 51
 814:	41 30       	cpi	r20, 0x01	; 1
 816:	61 f4       	brne	.+24     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 818:	88 23       	and	r24, r24
 81a:	19 f0       	breq	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81c:	82 30       	cpi	r24, 0x02	; 2
 81e:	29 f0       	breq	.+10     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 820:	08 95       	ret
 822:	89 b7       	in	r24, 0x39	; 57
 824:	81 60       	ori	r24, 0x01	; 1
 826:	89 bf       	out	0x39, r24	; 57
 828:	08 95       	ret
 82a:	89 b7       	in	r24, 0x39	; 57
 82c:	82 60       	ori	r24, 0x02	; 2
 82e:	89 bf       	out	0x39, r24	; 57
 830:	08 95       	ret

00000832 <PWM0_OC0_duty>:
 832:	85 36       	cpi	r24, 0x65	; 101
 834:	08 f0       	brcs	.+2      	; 0x838 <PWM0_OC0_duty+0x6>
 836:	84 e6       	ldi	r24, 0x64	; 100
 838:	63 30       	cpi	r22, 0x03	; 3
 83a:	91 f4       	brne	.+36     	; 0x860 <__stack+0x1>
 83c:	41 11       	cpse	r20, r1
 83e:	10 c0       	rjmp	.+32     	; 0x860 <__stack+0x1>
 840:	68 2f       	mov	r22, r24
 842:	70 e0       	ldi	r23, 0x00	; 0
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 38 05 	call	0xa70	; 0xa70 <__floatsisf>
 84c:	23 e3       	ldi	r18, 0x33	; 51
 84e:	33 e3       	ldi	r19, 0x33	; 51
 850:	43 e2       	ldi	r20, 0x23	; 35
 852:	50 e4       	ldi	r21, 0x40	; 64
 854:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 858:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 85c:	6c bf       	out	0x3c, r22	; 60
 85e:	08 95       	ret
 860:	63 30       	cpi	r22, 0x03	; 3
 862:	c9 f4       	brne	.+50     	; 0x896 <__stack+0x37>
 864:	41 30       	cpi	r20, 0x01	; 1
 866:	b9 f4       	brne	.+46     	; 0x896 <__stack+0x37>
 868:	68 2f       	mov	r22, r24
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 38 05 	call	0xa70	; 0xa70 <__floatsisf>
 874:	23 e3       	ldi	r18, 0x33	; 51
 876:	33 e3       	ldi	r19, 0x33	; 51
 878:	43 e2       	ldi	r20, 0x23	; 35
 87a:	50 e4       	ldi	r21, 0x40	; 64
 87c:	0e 94 c4 05 	call	0xb88	; 0xb88 <__mulsf3>
 880:	9b 01       	movw	r18, r22
 882:	ac 01       	movw	r20, r24
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	8f e7       	ldi	r24, 0x7F	; 127
 88a:	93 e4       	ldi	r25, 0x43	; 67
 88c:	0e 94 9a 04 	call	0x934	; 0x934 <__subsf3>
 890:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
 894:	6c bf       	out	0x3c, r22	; 60
 896:	08 95       	ret

00000898 <__vector_11>:

void __vector_11() __attribute__((signal));

void __vector_11(){
 898:	1f 92       	push	r1
 89a:	0f 92       	push	r0
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	0f 92       	push	r0
 8a0:	11 24       	eor	r1, r1
 8a2:	2f 93       	push	r18
 8a4:	3f 93       	push	r19
 8a6:	4f 93       	push	r20
 8a8:	5f 93       	push	r21
 8aa:	6f 93       	push	r22
 8ac:	7f 93       	push	r23
 8ae:	8f 93       	push	r24
 8b0:	9f 93       	push	r25
 8b2:	af 93       	push	r26
 8b4:	bf 93       	push	r27
 8b6:	ef 93       	push	r30
 8b8:	ff 93       	push	r31
	ptr_t0();
 8ba:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <ptr_t0>
 8be:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <ptr_t0+0x1>
 8c2:	09 95       	icall
}
 8c4:	ff 91       	pop	r31
 8c6:	ef 91       	pop	r30
 8c8:	bf 91       	pop	r27
 8ca:	af 91       	pop	r26
 8cc:	9f 91       	pop	r25
 8ce:	8f 91       	pop	r24
 8d0:	7f 91       	pop	r23
 8d2:	6f 91       	pop	r22
 8d4:	5f 91       	pop	r21
 8d6:	4f 91       	pop	r20
 8d8:	3f 91       	pop	r19
 8da:	2f 91       	pop	r18
 8dc:	0f 90       	pop	r0
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	0f 90       	pop	r0
 8e2:	1f 90       	pop	r1
 8e4:	18 95       	reti

000008e6 <__vector_10>:

void __vector_10() __attribute__((signal));

void __vector_10(){
 8e6:	1f 92       	push	r1
 8e8:	0f 92       	push	r0
 8ea:	0f b6       	in	r0, 0x3f	; 63
 8ec:	0f 92       	push	r0
 8ee:	11 24       	eor	r1, r1
 8f0:	2f 93       	push	r18
 8f2:	3f 93       	push	r19
 8f4:	4f 93       	push	r20
 8f6:	5f 93       	push	r21
 8f8:	6f 93       	push	r22
 8fa:	7f 93       	push	r23
 8fc:	8f 93       	push	r24
 8fe:	9f 93       	push	r25
 900:	af 93       	push	r26
 902:	bf 93       	push	r27
 904:	ef 93       	push	r30
 906:	ff 93       	push	r31
	ptr_t0();
 908:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <ptr_t0>
 90c:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <ptr_t0+0x1>
 910:	09 95       	icall
}
 912:	ff 91       	pop	r31
 914:	ef 91       	pop	r30
 916:	bf 91       	pop	r27
 918:	af 91       	pop	r26
 91a:	9f 91       	pop	r25
 91c:	8f 91       	pop	r24
 91e:	7f 91       	pop	r23
 920:	6f 91       	pop	r22
 922:	5f 91       	pop	r21
 924:	4f 91       	pop	r20
 926:	3f 91       	pop	r19
 928:	2f 91       	pop	r18
 92a:	0f 90       	pop	r0
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	0f 90       	pop	r0
 930:	1f 90       	pop	r1
 932:	18 95       	reti

00000934 <__subsf3>:
 934:	50 58       	subi	r21, 0x80	; 128

00000936 <__addsf3>:
 936:	bb 27       	eor	r27, r27
 938:	aa 27       	eor	r26, r26
 93a:	0e 94 b2 04 	call	0x964	; 0x964 <__addsf3x>
 93e:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
 942:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
 946:	38 f0       	brcs	.+14     	; 0x956 <__addsf3+0x20>
 948:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
 94c:	20 f0       	brcs	.+8      	; 0x956 <__addsf3+0x20>
 94e:	39 f4       	brne	.+14     	; 0x95e <__addsf3+0x28>
 950:	9f 3f       	cpi	r25, 0xFF	; 255
 952:	19 f4       	brne	.+6      	; 0x95a <__addsf3+0x24>
 954:	26 f4       	brtc	.+8      	; 0x95e <__addsf3+0x28>
 956:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
 95a:	0e f4       	brtc	.+2      	; 0x95e <__addsf3+0x28>
 95c:	e0 95       	com	r30
 95e:	e7 fb       	bst	r30, 7
 960:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>

00000964 <__addsf3x>:
 964:	e9 2f       	mov	r30, r25
 966:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
 96a:	58 f3       	brcs	.-42     	; 0x942 <__addsf3+0xc>
 96c:	ba 17       	cp	r27, r26
 96e:	62 07       	cpc	r22, r18
 970:	73 07       	cpc	r23, r19
 972:	84 07       	cpc	r24, r20
 974:	95 07       	cpc	r25, r21
 976:	20 f0       	brcs	.+8      	; 0x980 <__addsf3x+0x1c>
 978:	79 f4       	brne	.+30     	; 0x998 <__addsf3x+0x34>
 97a:	a6 f5       	brtc	.+104    	; 0x9e4 <__addsf3x+0x80>
 97c:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
 980:	0e f4       	brtc	.+2      	; 0x984 <__addsf3x+0x20>
 982:	e0 95       	com	r30
 984:	0b 2e       	mov	r0, r27
 986:	ba 2f       	mov	r27, r26
 988:	a0 2d       	mov	r26, r0
 98a:	0b 01       	movw	r0, r22
 98c:	b9 01       	movw	r22, r18
 98e:	90 01       	movw	r18, r0
 990:	0c 01       	movw	r0, r24
 992:	ca 01       	movw	r24, r20
 994:	a0 01       	movw	r20, r0
 996:	11 24       	eor	r1, r1
 998:	ff 27       	eor	r31, r31
 99a:	59 1b       	sub	r21, r25
 99c:	99 f0       	breq	.+38     	; 0x9c4 <__addsf3x+0x60>
 99e:	59 3f       	cpi	r21, 0xF9	; 249
 9a0:	50 f4       	brcc	.+20     	; 0x9b6 <__addsf3x+0x52>
 9a2:	50 3e       	cpi	r21, 0xE0	; 224
 9a4:	68 f1       	brcs	.+90     	; 0xa00 <__addsf3x+0x9c>
 9a6:	1a 16       	cp	r1, r26
 9a8:	f0 40       	sbci	r31, 0x00	; 0
 9aa:	a2 2f       	mov	r26, r18
 9ac:	23 2f       	mov	r18, r19
 9ae:	34 2f       	mov	r19, r20
 9b0:	44 27       	eor	r20, r20
 9b2:	58 5f       	subi	r21, 0xF8	; 248
 9b4:	f3 cf       	rjmp	.-26     	; 0x99c <__addsf3x+0x38>
 9b6:	46 95       	lsr	r20
 9b8:	37 95       	ror	r19
 9ba:	27 95       	ror	r18
 9bc:	a7 95       	ror	r26
 9be:	f0 40       	sbci	r31, 0x00	; 0
 9c0:	53 95       	inc	r21
 9c2:	c9 f7       	brne	.-14     	; 0x9b6 <__addsf3x+0x52>
 9c4:	7e f4       	brtc	.+30     	; 0x9e4 <__addsf3x+0x80>
 9c6:	1f 16       	cp	r1, r31
 9c8:	ba 0b       	sbc	r27, r26
 9ca:	62 0b       	sbc	r22, r18
 9cc:	73 0b       	sbc	r23, r19
 9ce:	84 0b       	sbc	r24, r20
 9d0:	ba f0       	brmi	.+46     	; 0xa00 <__addsf3x+0x9c>
 9d2:	91 50       	subi	r25, 0x01	; 1
 9d4:	a1 f0       	breq	.+40     	; 0x9fe <__addsf3x+0x9a>
 9d6:	ff 0f       	add	r31, r31
 9d8:	bb 1f       	adc	r27, r27
 9da:	66 1f       	adc	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	c2 f7       	brpl	.-16     	; 0x9d2 <__addsf3x+0x6e>
 9e2:	0e c0       	rjmp	.+28     	; 0xa00 <__addsf3x+0x9c>
 9e4:	ba 0f       	add	r27, r26
 9e6:	62 1f       	adc	r22, r18
 9e8:	73 1f       	adc	r23, r19
 9ea:	84 1f       	adc	r24, r20
 9ec:	48 f4       	brcc	.+18     	; 0xa00 <__addsf3x+0x9c>
 9ee:	87 95       	ror	r24
 9f0:	77 95       	ror	r23
 9f2:	67 95       	ror	r22
 9f4:	b7 95       	ror	r27
 9f6:	f7 95       	ror	r31
 9f8:	9e 3f       	cpi	r25, 0xFE	; 254
 9fa:	08 f0       	brcs	.+2      	; 0x9fe <__addsf3x+0x9a>
 9fc:	b0 cf       	rjmp	.-160    	; 0x95e <__addsf3+0x28>
 9fe:	93 95       	inc	r25
 a00:	88 0f       	add	r24, r24
 a02:	08 f0       	brcs	.+2      	; 0xa06 <__addsf3x+0xa2>
 a04:	99 27       	eor	r25, r25
 a06:	ee 0f       	add	r30, r30
 a08:	97 95       	ror	r25
 a0a:	87 95       	ror	r24
 a0c:	08 95       	ret

00000a0e <__fixunssfsi>:
 a0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_splitA>
 a12:	88 f0       	brcs	.+34     	; 0xa36 <__fixunssfsi+0x28>
 a14:	9f 57       	subi	r25, 0x7F	; 127
 a16:	98 f0       	brcs	.+38     	; 0xa3e <__fixunssfsi+0x30>
 a18:	b9 2f       	mov	r27, r25
 a1a:	99 27       	eor	r25, r25
 a1c:	b7 51       	subi	r27, 0x17	; 23
 a1e:	b0 f0       	brcs	.+44     	; 0xa4c <__fixunssfsi+0x3e>
 a20:	e1 f0       	breq	.+56     	; 0xa5a <__fixunssfsi+0x4c>
 a22:	66 0f       	add	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	1a f0       	brmi	.+6      	; 0xa32 <__fixunssfsi+0x24>
 a2c:	ba 95       	dec	r27
 a2e:	c9 f7       	brne	.-14     	; 0xa22 <__fixunssfsi+0x14>
 a30:	14 c0       	rjmp	.+40     	; 0xa5a <__fixunssfsi+0x4c>
 a32:	b1 30       	cpi	r27, 0x01	; 1
 a34:	91 f0       	breq	.+36     	; 0xa5a <__fixunssfsi+0x4c>
 a36:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_zero>
 a3a:	b1 e0       	ldi	r27, 0x01	; 1
 a3c:	08 95       	ret
 a3e:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__fp_zero>
 a42:	67 2f       	mov	r22, r23
 a44:	78 2f       	mov	r23, r24
 a46:	88 27       	eor	r24, r24
 a48:	b8 5f       	subi	r27, 0xF8	; 248
 a4a:	39 f0       	breq	.+14     	; 0xa5a <__fixunssfsi+0x4c>
 a4c:	b9 3f       	cpi	r27, 0xF9	; 249
 a4e:	cc f3       	brlt	.-14     	; 0xa42 <__fixunssfsi+0x34>
 a50:	86 95       	lsr	r24
 a52:	77 95       	ror	r23
 a54:	67 95       	ror	r22
 a56:	b3 95       	inc	r27
 a58:	d9 f7       	brne	.-10     	; 0xa50 <__fixunssfsi+0x42>
 a5a:	3e f4       	brtc	.+14     	; 0xa6a <__fixunssfsi+0x5c>
 a5c:	90 95       	com	r25
 a5e:	80 95       	com	r24
 a60:	70 95       	com	r23
 a62:	61 95       	neg	r22
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	08 95       	ret

00000a6c <__floatunsisf>:
 a6c:	e8 94       	clt
 a6e:	09 c0       	rjmp	.+18     	; 0xa82 <__floatsisf+0x12>

00000a70 <__floatsisf>:
 a70:	97 fb       	bst	r25, 7
 a72:	3e f4       	brtc	.+14     	; 0xa82 <__floatsisf+0x12>
 a74:	90 95       	com	r25
 a76:	80 95       	com	r24
 a78:	70 95       	com	r23
 a7a:	61 95       	neg	r22
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	99 23       	and	r25, r25
 a84:	a9 f0       	breq	.+42     	; 0xab0 <__floatsisf+0x40>
 a86:	f9 2f       	mov	r31, r25
 a88:	96 e9       	ldi	r25, 0x96	; 150
 a8a:	bb 27       	eor	r27, r27
 a8c:	93 95       	inc	r25
 a8e:	f6 95       	lsr	r31
 a90:	87 95       	ror	r24
 a92:	77 95       	ror	r23
 a94:	67 95       	ror	r22
 a96:	b7 95       	ror	r27
 a98:	f1 11       	cpse	r31, r1
 a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <__floatsisf+0x1c>
 a9c:	fa f4       	brpl	.+62     	; 0xadc <__floatsisf+0x6c>
 a9e:	bb 0f       	add	r27, r27
 aa0:	11 f4       	brne	.+4      	; 0xaa6 <__floatsisf+0x36>
 aa2:	60 ff       	sbrs	r22, 0
 aa4:	1b c0       	rjmp	.+54     	; 0xadc <__floatsisf+0x6c>
 aa6:	6f 5f       	subi	r22, 0xFF	; 255
 aa8:	7f 4f       	sbci	r23, 0xFF	; 255
 aaa:	8f 4f       	sbci	r24, 0xFF	; 255
 aac:	9f 4f       	sbci	r25, 0xFF	; 255
 aae:	16 c0       	rjmp	.+44     	; 0xadc <__floatsisf+0x6c>
 ab0:	88 23       	and	r24, r24
 ab2:	11 f0       	breq	.+4      	; 0xab8 <__floatsisf+0x48>
 ab4:	96 e9       	ldi	r25, 0x96	; 150
 ab6:	11 c0       	rjmp	.+34     	; 0xada <__floatsisf+0x6a>
 ab8:	77 23       	and	r23, r23
 aba:	21 f0       	breq	.+8      	; 0xac4 <__floatsisf+0x54>
 abc:	9e e8       	ldi	r25, 0x8E	; 142
 abe:	87 2f       	mov	r24, r23
 ac0:	76 2f       	mov	r23, r22
 ac2:	05 c0       	rjmp	.+10     	; 0xace <__floatsisf+0x5e>
 ac4:	66 23       	and	r22, r22
 ac6:	71 f0       	breq	.+28     	; 0xae4 <__floatsisf+0x74>
 ac8:	96 e8       	ldi	r25, 0x86	; 134
 aca:	86 2f       	mov	r24, r22
 acc:	70 e0       	ldi	r23, 0x00	; 0
 ace:	60 e0       	ldi	r22, 0x00	; 0
 ad0:	2a f0       	brmi	.+10     	; 0xadc <__floatsisf+0x6c>
 ad2:	9a 95       	dec	r25
 ad4:	66 0f       	add	r22, r22
 ad6:	77 1f       	adc	r23, r23
 ad8:	88 1f       	adc	r24, r24
 ada:	da f7       	brpl	.-10     	; 0xad2 <__floatsisf+0x62>
 adc:	88 0f       	add	r24, r24
 ade:	96 95       	lsr	r25
 ae0:	87 95       	ror	r24
 ae2:	97 f9       	bld	r25, 7
 ae4:	08 95       	ret

00000ae6 <__fp_inf>:
 ae6:	97 f9       	bld	r25, 7
 ae8:	9f 67       	ori	r25, 0x7F	; 127
 aea:	80 e8       	ldi	r24, 0x80	; 128
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	60 e0       	ldi	r22, 0x00	; 0
 af0:	08 95       	ret

00000af2 <__fp_nan>:
 af2:	9f ef       	ldi	r25, 0xFF	; 255
 af4:	80 ec       	ldi	r24, 0xC0	; 192
 af6:	08 95       	ret

00000af8 <__fp_pscA>:
 af8:	00 24       	eor	r0, r0
 afa:	0a 94       	dec	r0
 afc:	16 16       	cp	r1, r22
 afe:	17 06       	cpc	r1, r23
 b00:	18 06       	cpc	r1, r24
 b02:	09 06       	cpc	r0, r25
 b04:	08 95       	ret

00000b06 <__fp_pscB>:
 b06:	00 24       	eor	r0, r0
 b08:	0a 94       	dec	r0
 b0a:	12 16       	cp	r1, r18
 b0c:	13 06       	cpc	r1, r19
 b0e:	14 06       	cpc	r1, r20
 b10:	05 06       	cpc	r0, r21
 b12:	08 95       	ret

00000b14 <__fp_round>:
 b14:	09 2e       	mov	r0, r25
 b16:	03 94       	inc	r0
 b18:	00 0c       	add	r0, r0
 b1a:	11 f4       	brne	.+4      	; 0xb20 <__fp_round+0xc>
 b1c:	88 23       	and	r24, r24
 b1e:	52 f0       	brmi	.+20     	; 0xb34 <__fp_round+0x20>
 b20:	bb 0f       	add	r27, r27
 b22:	40 f4       	brcc	.+16     	; 0xb34 <__fp_round+0x20>
 b24:	bf 2b       	or	r27, r31
 b26:	11 f4       	brne	.+4      	; 0xb2c <__fp_round+0x18>
 b28:	60 ff       	sbrs	r22, 0
 b2a:	04 c0       	rjmp	.+8      	; 0xb34 <__fp_round+0x20>
 b2c:	6f 5f       	subi	r22, 0xFF	; 255
 b2e:	7f 4f       	sbci	r23, 0xFF	; 255
 b30:	8f 4f       	sbci	r24, 0xFF	; 255
 b32:	9f 4f       	sbci	r25, 0xFF	; 255
 b34:	08 95       	ret

00000b36 <__fp_split3>:
 b36:	57 fd       	sbrc	r21, 7
 b38:	90 58       	subi	r25, 0x80	; 128
 b3a:	44 0f       	add	r20, r20
 b3c:	55 1f       	adc	r21, r21
 b3e:	59 f0       	breq	.+22     	; 0xb56 <__fp_splitA+0x10>
 b40:	5f 3f       	cpi	r21, 0xFF	; 255
 b42:	71 f0       	breq	.+28     	; 0xb60 <__fp_splitA+0x1a>
 b44:	47 95       	ror	r20

00000b46 <__fp_splitA>:
 b46:	88 0f       	add	r24, r24
 b48:	97 fb       	bst	r25, 7
 b4a:	99 1f       	adc	r25, r25
 b4c:	61 f0       	breq	.+24     	; 0xb66 <__fp_splitA+0x20>
 b4e:	9f 3f       	cpi	r25, 0xFF	; 255
 b50:	79 f0       	breq	.+30     	; 0xb70 <__fp_splitA+0x2a>
 b52:	87 95       	ror	r24
 b54:	08 95       	ret
 b56:	12 16       	cp	r1, r18
 b58:	13 06       	cpc	r1, r19
 b5a:	14 06       	cpc	r1, r20
 b5c:	55 1f       	adc	r21, r21
 b5e:	f2 cf       	rjmp	.-28     	; 0xb44 <__fp_split3+0xe>
 b60:	46 95       	lsr	r20
 b62:	f1 df       	rcall	.-30     	; 0xb46 <__fp_splitA>
 b64:	08 c0       	rjmp	.+16     	; 0xb76 <__fp_splitA+0x30>
 b66:	16 16       	cp	r1, r22
 b68:	17 06       	cpc	r1, r23
 b6a:	18 06       	cpc	r1, r24
 b6c:	99 1f       	adc	r25, r25
 b6e:	f1 cf       	rjmp	.-30     	; 0xb52 <__fp_splitA+0xc>
 b70:	86 95       	lsr	r24
 b72:	71 05       	cpc	r23, r1
 b74:	61 05       	cpc	r22, r1
 b76:	08 94       	sec
 b78:	08 95       	ret

00000b7a <__fp_zero>:
 b7a:	e8 94       	clt

00000b7c <__fp_szero>:
 b7c:	bb 27       	eor	r27, r27
 b7e:	66 27       	eor	r22, r22
 b80:	77 27       	eor	r23, r23
 b82:	cb 01       	movw	r24, r22
 b84:	97 f9       	bld	r25, 7
 b86:	08 95       	ret

00000b88 <__mulsf3>:
 b88:	0e 94 d7 05 	call	0xbae	; 0xbae <__mulsf3x>
 b8c:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_round>
 b90:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_pscA>
 b94:	38 f0       	brcs	.+14     	; 0xba4 <__mulsf3+0x1c>
 b96:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscB>
 b9a:	20 f0       	brcs	.+8      	; 0xba4 <__mulsf3+0x1c>
 b9c:	95 23       	and	r25, r21
 b9e:	11 f0       	breq	.+4      	; 0xba4 <__mulsf3+0x1c>
 ba0:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
 ba4:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__fp_nan>
 ba8:	11 24       	eor	r1, r1
 baa:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>

00000bae <__mulsf3x>:
 bae:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_split3>
 bb2:	70 f3       	brcs	.-36     	; 0xb90 <__mulsf3+0x8>

00000bb4 <__mulsf3_pse>:
 bb4:	95 9f       	mul	r25, r21
 bb6:	c1 f3       	breq	.-16     	; 0xba8 <__mulsf3+0x20>
 bb8:	95 0f       	add	r25, r21
 bba:	50 e0       	ldi	r21, 0x00	; 0
 bbc:	55 1f       	adc	r21, r21
 bbe:	62 9f       	mul	r22, r18
 bc0:	f0 01       	movw	r30, r0
 bc2:	72 9f       	mul	r23, r18
 bc4:	bb 27       	eor	r27, r27
 bc6:	f0 0d       	add	r31, r0
 bc8:	b1 1d       	adc	r27, r1
 bca:	63 9f       	mul	r22, r19
 bcc:	aa 27       	eor	r26, r26
 bce:	f0 0d       	add	r31, r0
 bd0:	b1 1d       	adc	r27, r1
 bd2:	aa 1f       	adc	r26, r26
 bd4:	64 9f       	mul	r22, r20
 bd6:	66 27       	eor	r22, r22
 bd8:	b0 0d       	add	r27, r0
 bda:	a1 1d       	adc	r26, r1
 bdc:	66 1f       	adc	r22, r22
 bde:	82 9f       	mul	r24, r18
 be0:	22 27       	eor	r18, r18
 be2:	b0 0d       	add	r27, r0
 be4:	a1 1d       	adc	r26, r1
 be6:	62 1f       	adc	r22, r18
 be8:	73 9f       	mul	r23, r19
 bea:	b0 0d       	add	r27, r0
 bec:	a1 1d       	adc	r26, r1
 bee:	62 1f       	adc	r22, r18
 bf0:	83 9f       	mul	r24, r19
 bf2:	a0 0d       	add	r26, r0
 bf4:	61 1d       	adc	r22, r1
 bf6:	22 1f       	adc	r18, r18
 bf8:	74 9f       	mul	r23, r20
 bfa:	33 27       	eor	r19, r19
 bfc:	a0 0d       	add	r26, r0
 bfe:	61 1d       	adc	r22, r1
 c00:	23 1f       	adc	r18, r19
 c02:	84 9f       	mul	r24, r20
 c04:	60 0d       	add	r22, r0
 c06:	21 1d       	adc	r18, r1
 c08:	82 2f       	mov	r24, r18
 c0a:	76 2f       	mov	r23, r22
 c0c:	6a 2f       	mov	r22, r26
 c0e:	11 24       	eor	r1, r1
 c10:	9f 57       	subi	r25, 0x7F	; 127
 c12:	50 40       	sbci	r21, 0x00	; 0
 c14:	9a f0       	brmi	.+38     	; 0xc3c <__mulsf3_pse+0x88>
 c16:	f1 f0       	breq	.+60     	; 0xc54 <__mulsf3_pse+0xa0>
 c18:	88 23       	and	r24, r24
 c1a:	4a f0       	brmi	.+18     	; 0xc2e <__mulsf3_pse+0x7a>
 c1c:	ee 0f       	add	r30, r30
 c1e:	ff 1f       	adc	r31, r31
 c20:	bb 1f       	adc	r27, r27
 c22:	66 1f       	adc	r22, r22
 c24:	77 1f       	adc	r23, r23
 c26:	88 1f       	adc	r24, r24
 c28:	91 50       	subi	r25, 0x01	; 1
 c2a:	50 40       	sbci	r21, 0x00	; 0
 c2c:	a9 f7       	brne	.-22     	; 0xc18 <__mulsf3_pse+0x64>
 c2e:	9e 3f       	cpi	r25, 0xFE	; 254
 c30:	51 05       	cpc	r21, r1
 c32:	80 f0       	brcs	.+32     	; 0xc54 <__mulsf3_pse+0xa0>
 c34:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__fp_inf>
 c38:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__fp_szero>
 c3c:	5f 3f       	cpi	r21, 0xFF	; 255
 c3e:	e4 f3       	brlt	.-8      	; 0xc38 <__mulsf3_pse+0x84>
 c40:	98 3e       	cpi	r25, 0xE8	; 232
 c42:	d4 f3       	brlt	.-12     	; 0xc38 <__mulsf3_pse+0x84>
 c44:	86 95       	lsr	r24
 c46:	77 95       	ror	r23
 c48:	67 95       	ror	r22
 c4a:	b7 95       	ror	r27
 c4c:	f7 95       	ror	r31
 c4e:	e7 95       	ror	r30
 c50:	9f 5f       	subi	r25, 0xFF	; 255
 c52:	c1 f7       	brne	.-16     	; 0xc44 <__mulsf3_pse+0x90>
 c54:	fe 2b       	or	r31, r30
 c56:	88 0f       	add	r24, r24
 c58:	91 1d       	adc	r25, r1
 c5a:	96 95       	lsr	r25
 c5c:	87 95       	ror	r24
 c5e:	97 f9       	bld	r25, 7
 c60:	08 95       	ret

00000c62 <__udivmodsi4>:
 c62:	a1 e2       	ldi	r26, 0x21	; 33
 c64:	1a 2e       	mov	r1, r26
 c66:	aa 1b       	sub	r26, r26
 c68:	bb 1b       	sub	r27, r27
 c6a:	fd 01       	movw	r30, r26
 c6c:	0d c0       	rjmp	.+26     	; 0xc88 <__udivmodsi4_ep>

00000c6e <__udivmodsi4_loop>:
 c6e:	aa 1f       	adc	r26, r26
 c70:	bb 1f       	adc	r27, r27
 c72:	ee 1f       	adc	r30, r30
 c74:	ff 1f       	adc	r31, r31
 c76:	a2 17       	cp	r26, r18
 c78:	b3 07       	cpc	r27, r19
 c7a:	e4 07       	cpc	r30, r20
 c7c:	f5 07       	cpc	r31, r21
 c7e:	20 f0       	brcs	.+8      	; 0xc88 <__udivmodsi4_ep>
 c80:	a2 1b       	sub	r26, r18
 c82:	b3 0b       	sbc	r27, r19
 c84:	e4 0b       	sbc	r30, r20
 c86:	f5 0b       	sbc	r31, r21

00000c88 <__udivmodsi4_ep>:
 c88:	66 1f       	adc	r22, r22
 c8a:	77 1f       	adc	r23, r23
 c8c:	88 1f       	adc	r24, r24
 c8e:	99 1f       	adc	r25, r25
 c90:	1a 94       	dec	r1
 c92:	69 f7       	brne	.-38     	; 0xc6e <__udivmodsi4_loop>
 c94:	60 95       	com	r22
 c96:	70 95       	com	r23
 c98:	80 95       	com	r24
 c9a:	90 95       	com	r25
 c9c:	9b 01       	movw	r18, r22
 c9e:	ac 01       	movw	r20, r24
 ca0:	bd 01       	movw	r22, r26
 ca2:	cf 01       	movw	r24, r30
 ca4:	08 95       	ret

00000ca6 <__divmodsi4>:
 ca6:	05 2e       	mov	r0, r21
 ca8:	97 fb       	bst	r25, 7
 caa:	1e f4       	brtc	.+6      	; 0xcb2 <__divmodsi4+0xc>
 cac:	00 94       	com	r0
 cae:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__negsi2>
 cb2:	57 fd       	sbrc	r21, 7
 cb4:	07 d0       	rcall	.+14     	; 0xcc4 <__divmodsi4_neg2>
 cb6:	0e 94 31 06 	call	0xc62	; 0xc62 <__udivmodsi4>
 cba:	07 fc       	sbrc	r0, 7
 cbc:	03 d0       	rcall	.+6      	; 0xcc4 <__divmodsi4_neg2>
 cbe:	4e f4       	brtc	.+18     	; 0xcd2 <__divmodsi4_exit>
 cc0:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__negsi2>

00000cc4 <__divmodsi4_neg2>:
 cc4:	50 95       	com	r21
 cc6:	40 95       	com	r20
 cc8:	30 95       	com	r19
 cca:	21 95       	neg	r18
 ccc:	3f 4f       	sbci	r19, 0xFF	; 255
 cce:	4f 4f       	sbci	r20, 0xFF	; 255
 cd0:	5f 4f       	sbci	r21, 0xFF	; 255

00000cd2 <__divmodsi4_exit>:
 cd2:	08 95       	ret

00000cd4 <__negsi2>:
 cd4:	90 95       	com	r25
 cd6:	80 95       	com	r24
 cd8:	70 95       	com	r23
 cda:	61 95       	neg	r22
 cdc:	7f 4f       	sbci	r23, 0xFF	; 255
 cde:	8f 4f       	sbci	r24, 0xFF	; 255
 ce0:	9f 4f       	sbci	r25, 0xFF	; 255
 ce2:	08 95       	ret

00000ce4 <_exit>:
 ce4:	f8 94       	cli

00000ce6 <__stop_program>:
 ce6:	ff cf       	rjmp	.-2      	; 0xce6 <__stop_program>
