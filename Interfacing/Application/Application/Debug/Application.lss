
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000610  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000684  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a7  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aad  00000000  00000000  00001f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b38  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  0000350c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000794  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fa8  00000000  00000000  00004100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_1>
   8:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_2>
   c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_10>
  2c:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	a5 02       	muls	r26, r21
  56:	af 02       	muls	r26, r31
  58:	b9 02       	muls	r27, r25
  5a:	c3 02       	muls	r28, r19
  5c:	cd 02       	muls	r28, r29
  5e:	d7 02       	muls	r29, r23
  60:	e1 02       	muls	r30, r17
  62:	eb 02       	muls	r30, r27

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e0 e1       	ldi	r30, 0x10	; 16
  78:	f6 e0       	ldi	r31, 0x06	; 6
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a0 e6       	ldi	r26, 0x60	; 96
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a8 36       	cpi	r26, 0x68	; 104
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  9a:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <led_init>:
void led_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, OUTPUT);
}

void led_on(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, HIGH);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_voidSetPinDirection>
  a8:	08 95       	ret

000000aa <led_off>:
}

void led_off(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, LOW);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_voidSetPinValue>
  b0:	08 95       	ret

000000b2 <led_toggle>:
}

void led_toggle(uint8 copy_u8PortID, uint8 copy_u8PinID){
	switch(copy_u8PortID){
  b2:	82 34       	cpi	r24, 0x42	; 66
  b4:	a1 f0       	breq	.+40     	; 0xde <led_toggle+0x2c>
  b6:	18 f4       	brcc	.+6      	; 0xbe <led_toggle+0xc>
  b8:	81 34       	cpi	r24, 0x41	; 65
  ba:	31 f0       	breq	.+12     	; 0xc8 <led_toggle+0x16>
  bc:	08 95       	ret
  be:	83 34       	cpi	r24, 0x43	; 67
  c0:	c9 f0       	breq	.+50     	; 0xf4 <led_toggle+0x42>
  c2:	84 34       	cpi	r24, 0x44	; 68
  c4:	11 f1       	breq	.+68     	; 0x10a <led_toggle+0x58>
  c6:	08 95       	ret
		case portA: TOGBIT(PORTA, copy_u8PinID); break;
  c8:	2b b3       	in	r18, 0x1b	; 27
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <led_toggle+0x22>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <led_toggle+0x1e>
  d8:	82 27       	eor	r24, r18
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	08 95       	ret
		case portB: TOGBIT(PORTB, copy_u8PinID); break;
  de:	28 b3       	in	r18, 0x18	; 24
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <led_toggle+0x38>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <led_toggle+0x34>
  ee:	82 27       	eor	r24, r18
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	08 95       	ret
		case portC: TOGBIT(PORTC, copy_u8PinID); break;
  f4:	25 b3       	in	r18, 0x15	; 21
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <led_toggle+0x4e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <led_toggle+0x4a>
 104:	82 27       	eor	r24, r18
 106:	85 bb       	out	0x15, r24	; 21
 108:	08 95       	ret
		case portD: TOGBIT(PORTD, copy_u8PinID); break;
 10a:	22 b3       	in	r18, 0x12	; 18
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <led_toggle+0x64>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <led_toggle+0x60>
 11a:	82 27       	eor	r24, r18
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	08 95       	ret

00000120 <toggle_led_yel>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	66 e0       	ldi	r22, 0x06	; 6
 122:	81 e4       	ldi	r24, 0x41	; 65
 124:	0e 94 59 00 	call	0xb2	; 0xb2 <led_toggle>
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	83 ed       	ldi	r24, 0xD3	; 211
 12c:	90 e3       	ldi	r25, 0x30	; 48
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <toggle_led_yel+0xe>
 136:	00 c0       	rjmp	.+0      	; 0x138 <toggle_led_yel+0x18>
 138:	00 00       	nop
 13a:	08 95       	ret

0000013c <toggle_led_blue>:
 13c:	65 e0       	ldi	r22, 0x05	; 5
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 59 00 	call	0xb2	; 0xb2 <led_toggle>
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	83 ed       	ldi	r24, 0xD3	; 211
 148:	90 e3       	ldi	r25, 0x30	; 48
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <toggle_led_blue+0xe>
 152:	00 c0       	rjmp	.+0      	; 0x154 <toggle_led_blue+0x18>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <toggle_led_green>:
 158:	64 e0       	ldi	r22, 0x04	; 4
 15a:	81 e4       	ldi	r24, 0x41	; 65
 15c:	0e 94 59 00 	call	0xb2	; 0xb2 <led_toggle>
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	83 ed       	ldi	r24, 0xD3	; 211
 164:	90 e3       	ldi	r25, 0x30	; 48
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <toggle_led_green+0xe>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <toggle_led_green+0x18>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <main>:
	_delay_ms(1000);
}

int main(void)
{
	led_init(portA, 4);
 174:	64 e0       	ldi	r22, 0x04	; 4
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	0e 94 51 00 	call	0xa2	; 0xa2 <led_init>
	led_init(portA, 5);
 17c:	65 e0       	ldi	r22, 0x05	; 5
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 51 00 	call	0xa2	; 0xa2 <led_init>
	led_init(portA, 6);
 184:	66 e0       	ldi	r22, 0x06	; 6
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	0e 94 51 00 	call	0xa2	; 0xa2 <led_init>
	led_init(portB, 7);
 18c:	67 e0       	ldi	r22, 0x07	; 7
 18e:	82 e4       	ldi	r24, 0x42	; 66
 190:	0e 94 51 00 	call	0xa2	; 0xa2 <led_init>
	
	led_off(portA, 4);
 194:	64 e0       	ldi	r22, 0x04	; 4
 196:	81 e4       	ldi	r24, 0x41	; 65
 198:	0e 94 55 00 	call	0xaa	; 0xaa <led_off>
	led_off(portA, 5);
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0e 94 55 00 	call	0xaa	; 0xaa <led_off>
	led_off(portA, 6);
 1a4:	66 e0       	ldi	r22, 0x06	; 6
 1a6:	81 e4       	ldi	r24, 0x41	; 65
 1a8:	0e 94 55 00 	call	0xaa	; 0xaa <led_off>
	led_off(portB, 7);
 1ac:	67 e0       	ldi	r22, 0x07	; 7
 1ae:	82 e4       	ldi	r24, 0x42	; 66
 1b0:	0e 94 55 00 	call	0xaa	; 0xaa <led_off>
	
	
		
	while (1)
	{
		wdt_enable(T2_1_s);
 1b4:	87 e0       	ldi	r24, 0x07	; 7
 1b6:	0e 94 9b 02 	call	0x536	; 0x536 <wdt_enable>
		toggle_led_blue();
 1ba:	0e 94 9e 00 	call	0x13c	; 0x13c <toggle_led_blue>
		wdt_disable();
 1be:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <wdt_disable>
		
		wdt_enable(T2_1_s);
 1c2:	87 e0       	ldi	r24, 0x07	; 7
 1c4:	0e 94 9b 02 	call	0x536	; 0x536 <wdt_enable>
		toggle_led_yel();
 1c8:	0e 94 90 00 	call	0x120	; 0x120 <toggle_led_yel>
		wdt_disable();
 1cc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <wdt_disable>
		
		wdt_enable(T2_1_s);
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	0e 94 9b 02 	call	0x536	; 0x536 <wdt_enable>
		toggle_led_green();
 1d6:	0e 94 ac 00 	call	0x158	; 0x158 <toggle_led_green>
		wdt_disable();
 1da:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <wdt_disable>
 1de:	ea cf       	rjmp	.-44     	; 0x1b4 <main+0x40>

000001e0 <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinDir){
	
	if(Copy_u8PinDir == INPUT){ // input
 1e0:	41 11       	cpse	r20, r1
 1e2:	3b c0       	rjmp	.+118    	; 0x25a <DIO_voidSetPinDirection+0x7a>
		switch(copy_u8PortID){
 1e4:	82 34       	cpi	r24, 0x42	; 66
 1e6:	a9 f0       	breq	.+42     	; 0x212 <DIO_voidSetPinDirection+0x32>
 1e8:	18 f4       	brcc	.+6      	; 0x1f0 <DIO_voidSetPinDirection+0x10>
 1ea:	81 34       	cpi	r24, 0x41	; 65
 1ec:	31 f0       	breq	.+12     	; 0x1fa <DIO_voidSetPinDirection+0x1a>
 1ee:	08 95       	ret
 1f0:	83 34       	cpi	r24, 0x43	; 67
 1f2:	d9 f0       	breq	.+54     	; 0x22a <DIO_voidSetPinDirection+0x4a>
 1f4:	84 34       	cpi	r24, 0x44	; 68
 1f6:	29 f1       	breq	.+74     	; 0x242 <DIO_voidSetPinDirection+0x62>
 1f8:	08 95       	ret
			case portA: CLRBIT(DDRA, copy_u8PinID); break;
 1fa:	2a b3       	in	r18, 0x1a	; 26
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinDirection+0x26>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinDirection+0x22>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	8a bb       	out	0x1a, r24	; 26
 210:	08 95       	ret
			case portB: CLRBIT(DDRB, copy_u8PinID); break;
 212:	27 b3       	in	r18, 0x17	; 23
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_voidSetPinDirection+0x3e>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_voidSetPinDirection+0x3a>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	87 bb       	out	0x17, r24	; 23
 228:	08 95       	ret
			case portC: CLRBIT(DDRC, copy_u8PinID); break;
 22a:	24 b3       	in	r18, 0x14	; 20
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_voidSetPinDirection+0x56>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_voidSetPinDirection+0x52>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	84 bb       	out	0x14, r24	; 20
 240:	08 95       	ret
			case portD: CLRBIT(DDRD, copy_u8PinID); break;
 242:	21 b3       	in	r18, 0x11	; 17
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_voidSetPinDirection+0x6e>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_voidSetPinDirection+0x6a>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	81 bb       	out	0x11, r24	; 17
 258:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
 25a:	82 34       	cpi	r24, 0x42	; 66
 25c:	a1 f0       	breq	.+40     	; 0x286 <DIO_voidSetPinDirection+0xa6>
 25e:	18 f4       	brcc	.+6      	; 0x266 <DIO_voidSetPinDirection+0x86>
 260:	81 34       	cpi	r24, 0x41	; 65
 262:	31 f0       	breq	.+12     	; 0x270 <DIO_voidSetPinDirection+0x90>
 264:	08 95       	ret
 266:	83 34       	cpi	r24, 0x43	; 67
 268:	c9 f0       	breq	.+50     	; 0x29c <DIO_voidSetPinDirection+0xbc>
 26a:	84 34       	cpi	r24, 0x44	; 68
 26c:	11 f1       	breq	.+68     	; 0x2b2 <DIO_voidSetPinDirection+0xd2>
 26e:	08 95       	ret
			case portA: SETBIT(DDRA, copy_u8PinID); break;
 270:	2a b3       	in	r18, 0x1a	; 26
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_voidSetPinDirection+0x9c>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_voidSetPinDirection+0x98>
 280:	82 2b       	or	r24, r18
 282:	8a bb       	out	0x1a, r24	; 26
 284:	08 95       	ret
			case portB: SETBIT(DDRB, copy_u8PinID); break;
 286:	27 b3       	in	r18, 0x17	; 23
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_voidSetPinDirection+0xb2>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_voidSetPinDirection+0xae>
 296:	82 2b       	or	r24, r18
 298:	87 bb       	out	0x17, r24	; 23
 29a:	08 95       	ret
			case portC: SETBIT(DDRC, copy_u8PinID); break;
 29c:	24 b3       	in	r18, 0x14	; 20
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_voidSetPinDirection+0xc8>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_voidSetPinDirection+0xc4>
 2ac:	82 2b       	or	r24, r18
 2ae:	84 bb       	out	0x14, r24	; 20
 2b0:	08 95       	ret
			case portD: SETBIT(DDRD, copy_u8PinID); break;
 2b2:	21 b3       	in	r18, 0x11	; 17
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_voidSetPinDirection+0xde>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_voidSetPinDirection+0xda>
 2c2:	82 2b       	or	r24, r18
 2c4:	81 bb       	out	0x11, r24	; 17
 2c6:	08 95       	ret

000002c8 <DIO_voidSetPinValue>:
		}
	}
	
}
void DIO_voidSetPinValue(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinValue){
	if(Copy_u8PinValue == LOW){ // LOW
 2c8:	41 11       	cpse	r20, r1
 2ca:	3b c0       	rjmp	.+118    	; 0x342 <DIO_voidSetPinValue+0x7a>
		switch(copy_u8PortID){
 2cc:	82 34       	cpi	r24, 0x42	; 66
 2ce:	a9 f0       	breq	.+42     	; 0x2fa <DIO_voidSetPinValue+0x32>
 2d0:	18 f4       	brcc	.+6      	; 0x2d8 <DIO_voidSetPinValue+0x10>
 2d2:	81 34       	cpi	r24, 0x41	; 65
 2d4:	31 f0       	breq	.+12     	; 0x2e2 <DIO_voidSetPinValue+0x1a>
 2d6:	08 95       	ret
 2d8:	83 34       	cpi	r24, 0x43	; 67
 2da:	d9 f0       	breq	.+54     	; 0x312 <DIO_voidSetPinValue+0x4a>
 2dc:	84 34       	cpi	r24, 0x44	; 68
 2de:	29 f1       	breq	.+74     	; 0x32a <DIO_voidSetPinValue+0x62>
 2e0:	08 95       	ret
			case portA: CLRBIT(PORTA, copy_u8PinID); break;
 2e2:	2b b3       	in	r18, 0x1b	; 27
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_voidSetPinValue+0x26>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_voidSetPinValue+0x22>
 2f2:	80 95       	com	r24
 2f4:	82 23       	and	r24, r18
 2f6:	8b bb       	out	0x1b, r24	; 27
 2f8:	08 95       	ret
			case portB: CLRBIT(PORTB, copy_u8PinID); break;
 2fa:	28 b3       	in	r18, 0x18	; 24
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_voidSetPinValue+0x3e>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_voidSetPinValue+0x3a>
 30a:	80 95       	com	r24
 30c:	82 23       	and	r24, r18
 30e:	88 bb       	out	0x18, r24	; 24
 310:	08 95       	ret
			case portC: CLRBIT(PORTC, copy_u8PinID); break;
 312:	25 b3       	in	r18, 0x15	; 21
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_voidSetPinValue+0x56>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_voidSetPinValue+0x52>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	85 bb       	out	0x15, r24	; 21
 328:	08 95       	ret
			case portD: CLRBIT(PORTD, copy_u8PinID); break;
 32a:	22 b3       	in	r18, 0x12	; 18
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_voidSetPinValue+0x6e>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_voidSetPinValue+0x6a>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	82 bb       	out	0x12, r24	; 18
 340:	08 95       	ret
		}
	}
	else{ // HIGH
		switch(copy_u8PortID){
 342:	82 34       	cpi	r24, 0x42	; 66
 344:	a1 f0       	breq	.+40     	; 0x36e <DIO_voidSetPinValue+0xa6>
 346:	18 f4       	brcc	.+6      	; 0x34e <DIO_voidSetPinValue+0x86>
 348:	81 34       	cpi	r24, 0x41	; 65
 34a:	31 f0       	breq	.+12     	; 0x358 <DIO_voidSetPinValue+0x90>
 34c:	08 95       	ret
 34e:	83 34       	cpi	r24, 0x43	; 67
 350:	c9 f0       	breq	.+50     	; 0x384 <DIO_voidSetPinValue+0xbc>
 352:	84 34       	cpi	r24, 0x44	; 68
 354:	11 f1       	breq	.+68     	; 0x39a <DIO_voidSetPinValue+0xd2>
 356:	08 95       	ret
			case portA: SETBIT(PORTA, copy_u8PinID); break;
 358:	2b b3       	in	r18, 0x1b	; 27
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_voidSetPinValue+0x9c>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_voidSetPinValue+0x98>
 368:	82 2b       	or	r24, r18
 36a:	8b bb       	out	0x1b, r24	; 27
 36c:	08 95       	ret
			case portB: SETBIT(PORTB, copy_u8PinID); break;
 36e:	28 b3       	in	r18, 0x18	; 24
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_voidSetPinValue+0xb2>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_voidSetPinValue+0xae>
 37e:	82 2b       	or	r24, r18
 380:	88 bb       	out	0x18, r24	; 24
 382:	08 95       	ret
			case portC: SETBIT(PORTC, copy_u8PinID); break;
 384:	25 b3       	in	r18, 0x15	; 21
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_voidSetPinValue+0xc8>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_voidSetPinValue+0xc4>
 394:	82 2b       	or	r24, r18
 396:	85 bb       	out	0x15, r24	; 21
 398:	08 95       	ret
			case portD: SETBIT(PORTD, copy_u8PinID); break;
 39a:	22 b3       	in	r18, 0x12	; 18
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_voidSetPinValue+0xde>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_voidSetPinValue+0xda>
 3aa:	82 2b       	or	r24, r18
 3ac:	82 bb       	out	0x12, r24	; 18
 3ae:	08 95       	ret

000003b0 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
	ptr_EXT1();
 3d2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr_EXT1>
 3d6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ptr_EXT1+0x1>
 3da:	09 95       	icall
}
 3dc:	ff 91       	pop	r31
 3de:	ef 91       	pop	r30
 3e0:	bf 91       	pop	r27
 3e2:	af 91       	pop	r26
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	7f 91       	pop	r23
 3ea:	6f 91       	pop	r22
 3ec:	5f 91       	pop	r21
 3ee:	4f 91       	pop	r20
 3f0:	3f 91       	pop	r19
 3f2:	2f 91       	pop	r18
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	2f 93       	push	r18
 40a:	3f 93       	push	r19
 40c:	4f 93       	push	r20
 40e:	5f 93       	push	r21
 410:	6f 93       	push	r22
 412:	7f 93       	push	r23
 414:	8f 93       	push	r24
 416:	9f 93       	push	r25
 418:	af 93       	push	r26
 41a:	bf 93       	push	r27
 41c:	ef 93       	push	r30
 41e:	ff 93       	push	r31
	ptr_EXT2();
 420:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ptr_EXT2>
 424:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ptr_EXT2+0x1>
 428:	09 95       	icall
}
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	3f 91       	pop	r19
 440:	2f 91       	pop	r18
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
	ptr_EXT3();
 46e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 472:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 476:	09 95       	icall
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_11>:
	timer0_disable();
}

void __vector_11() __attribute__((signal));

void __vector_11(){
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
	ptr_t0();
 4bc:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_t0>
 4c0:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_t0+0x1>
 4c4:	09 95       	icall
}
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
 4ca:	bf 91       	pop	r27
 4cc:	af 91       	pop	r26
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	7f 91       	pop	r23
 4d4:	6f 91       	pop	r22
 4d6:	5f 91       	pop	r21
 4d8:	4f 91       	pop	r20
 4da:	3f 91       	pop	r19
 4dc:	2f 91       	pop	r18
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <__vector_10>:

void __vector_10() __attribute__((signal));

void __vector_10(){
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	2f 93       	push	r18
 4f4:	3f 93       	push	r19
 4f6:	4f 93       	push	r20
 4f8:	5f 93       	push	r21
 4fa:	6f 93       	push	r22
 4fc:	7f 93       	push	r23
 4fe:	8f 93       	push	r24
 500:	9f 93       	push	r25
 502:	af 93       	push	r26
 504:	bf 93       	push	r27
 506:	ef 93       	push	r30
 508:	ff 93       	push	r31
	ptr_t0();
 50a:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <ptr_t0>
 50e:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <ptr_t0+0x1>
 512:	09 95       	icall
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <wdt_enable>:
#include "WDT_Interface.h"
#include "WDT_Private.h"

void wdt_enable(uint8 Time){
	// WDT PRescaler = 1sec
	switch(Time){
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	88 30       	cpi	r24, 0x08	; 8
 53a:	91 05       	cpc	r25, r1
 53c:	08 f0       	brcs	.+2      	; 0x540 <wdt_enable+0xa>
 53e:	54 c0       	rjmp	.+168    	; 0x5e8 <wdt_enable+0xb2>
 540:	fc 01       	movw	r30, r24
 542:	e6 5d       	subi	r30, 0xD6	; 214
 544:	ff 4f       	sbci	r31, 0xFF	; 255
 546:	0c 94 00 03 	jmp	0x600	; 0x600 <__tablejump2__>
		case T16_3_ms: CLRBIT(WDTCR, WDP2); CLRBIT(WDTCR, WDP1); CLRBIT(WDTCR, WDP0); break;
 54a:	81 b5       	in	r24, 0x21	; 33
 54c:	8b 7f       	andi	r24, 0xFB	; 251
 54e:	81 bd       	out	0x21, r24	; 33
 550:	81 b5       	in	r24, 0x21	; 33
 552:	8d 7f       	andi	r24, 0xFD	; 253
 554:	81 bd       	out	0x21, r24	; 33
 556:	81 b5       	in	r24, 0x21	; 33
 558:	8e 7f       	andi	r24, 0xFE	; 254
 55a:	81 bd       	out	0x21, r24	; 33
 55c:	45 c0       	rjmp	.+138    	; 0x5e8 <wdt_enable+0xb2>
		case T32_5ms:  CLRBIT(WDTCR, WDP2); CLRBIT(WDTCR, WDP1); SETBIT(WDTCR, WDP0); break;
 55e:	81 b5       	in	r24, 0x21	; 33
 560:	8b 7f       	andi	r24, 0xFB	; 251
 562:	81 bd       	out	0x21, r24	; 33
 564:	81 b5       	in	r24, 0x21	; 33
 566:	8d 7f       	andi	r24, 0xFD	; 253
 568:	81 bd       	out	0x21, r24	; 33
 56a:	81 b5       	in	r24, 0x21	; 33
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	81 bd       	out	0x21, r24	; 33
 570:	3b c0       	rjmp	.+118    	; 0x5e8 <wdt_enable+0xb2>
		case T65_ms:   CLRBIT(WDTCR, WDP2); SETBIT(WDTCR, WDP1); CLRBIT(WDTCR, WDP0); break;
 572:	81 b5       	in	r24, 0x21	; 33
 574:	8b 7f       	andi	r24, 0xFB	; 251
 576:	81 bd       	out	0x21, r24	; 33
 578:	81 b5       	in	r24, 0x21	; 33
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	81 bd       	out	0x21, r24	; 33
 57e:	81 b5       	in	r24, 0x21	; 33
 580:	8e 7f       	andi	r24, 0xFE	; 254
 582:	81 bd       	out	0x21, r24	; 33
 584:	31 c0       	rjmp	.+98     	; 0x5e8 <wdt_enable+0xb2>
		case T0_13_s:  CLRBIT(WDTCR, WDP2); SETBIT(WDTCR, WDP1); SETBIT(WDTCR, WDP0); break;
 586:	81 b5       	in	r24, 0x21	; 33
 588:	8b 7f       	andi	r24, 0xFB	; 251
 58a:	81 bd       	out	0x21, r24	; 33
 58c:	81 b5       	in	r24, 0x21	; 33
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	81 bd       	out	0x21, r24	; 33
 592:	81 b5       	in	r24, 0x21	; 33
 594:	81 60       	ori	r24, 0x01	; 1
 596:	81 bd       	out	0x21, r24	; 33
 598:	27 c0       	rjmp	.+78     	; 0x5e8 <wdt_enable+0xb2>
		case T0_26_s:  SETBIT(WDTCR, WDP2); CLRBIT(WDTCR, WDP1); CLRBIT(WDTCR, WDP0); break;
 59a:	81 b5       	in	r24, 0x21	; 33
 59c:	84 60       	ori	r24, 0x04	; 4
 59e:	81 bd       	out	0x21, r24	; 33
 5a0:	81 b5       	in	r24, 0x21	; 33
 5a2:	8d 7f       	andi	r24, 0xFD	; 253
 5a4:	81 bd       	out	0x21, r24	; 33
 5a6:	81 b5       	in	r24, 0x21	; 33
 5a8:	8e 7f       	andi	r24, 0xFE	; 254
 5aa:	81 bd       	out	0x21, r24	; 33
 5ac:	1d c0       	rjmp	.+58     	; 0x5e8 <wdt_enable+0xb2>
		case T0_52_s:  SETBIT(WDTCR, WDP2); CLRBIT(WDTCR, WDP1); SETBIT(WDTCR, WDP0); break;
 5ae:	81 b5       	in	r24, 0x21	; 33
 5b0:	84 60       	ori	r24, 0x04	; 4
 5b2:	81 bd       	out	0x21, r24	; 33
 5b4:	81 b5       	in	r24, 0x21	; 33
 5b6:	8d 7f       	andi	r24, 0xFD	; 253
 5b8:	81 bd       	out	0x21, r24	; 33
 5ba:	81 b5       	in	r24, 0x21	; 33
 5bc:	81 60       	ori	r24, 0x01	; 1
 5be:	81 bd       	out	0x21, r24	; 33
 5c0:	13 c0       	rjmp	.+38     	; 0x5e8 <wdt_enable+0xb2>
		case T1_s:     SETBIT(WDTCR, WDP2); SETBIT(WDTCR, WDP1); CLRBIT(WDTCR, WDP0); break;
 5c2:	81 b5       	in	r24, 0x21	; 33
 5c4:	84 60       	ori	r24, 0x04	; 4
 5c6:	81 bd       	out	0x21, r24	; 33
 5c8:	81 b5       	in	r24, 0x21	; 33
 5ca:	82 60       	ori	r24, 0x02	; 2
 5cc:	81 bd       	out	0x21, r24	; 33
 5ce:	81 b5       	in	r24, 0x21	; 33
 5d0:	8e 7f       	andi	r24, 0xFE	; 254
 5d2:	81 bd       	out	0x21, r24	; 33
 5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <wdt_enable+0xb2>
		case T2_1_s:   SETBIT(WDTCR, WDP2); SETBIT(WDTCR, WDP1); SETBIT(WDTCR, WDP0); break;
 5d6:	81 b5       	in	r24, 0x21	; 33
 5d8:	84 60       	ori	r24, 0x04	; 4
 5da:	81 bd       	out	0x21, r24	; 33
 5dc:	81 b5       	in	r24, 0x21	; 33
 5de:	82 60       	ori	r24, 0x02	; 2
 5e0:	81 bd       	out	0x21, r24	; 33
 5e2:	81 b5       	in	r24, 0x21	; 33
 5e4:	81 60       	ori	r24, 0x01	; 1
 5e6:	81 bd       	out	0x21, r24	; 33
	}
	
	// Enable WDT
	SETBIT(WDTCR, WDE);
 5e8:	81 b5       	in	r24, 0x21	; 33
 5ea:	88 60       	ori	r24, 0x08	; 8
 5ec:	81 bd       	out	0x21, r24	; 33
 5ee:	08 95       	ret

000005f0 <wdt_disable>:
}
void wdt_disable(void){
	SETBIT(WDTCR, WDE); SETBIT(WDTCR, WDTOE);
 5f0:	81 b5       	in	r24, 0x21	; 33
 5f2:	88 60       	ori	r24, 0x08	; 8
 5f4:	81 bd       	out	0x21, r24	; 33
 5f6:	81 b5       	in	r24, 0x21	; 33
 5f8:	80 61       	ori	r24, 0x10	; 16
 5fa:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0;
 5fc:	11 bc       	out	0x21, r1	; 33
 5fe:	08 95       	ret

00000600 <__tablejump2__>:
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	05 90       	lpm	r0, Z+
 606:	f4 91       	lpm	r31, Z
 608:	e0 2d       	mov	r30, r0
 60a:	09 94       	ijmp

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
