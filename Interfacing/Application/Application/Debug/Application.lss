
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c95  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ef  00000000  00000000  00001105  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000594  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c4  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000573  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000029db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  64:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <button_init>:
 *  Author: Ali
 */ 

#include "Button.h"

void button_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	c8 2f       	mov	r28, r24
  72:	d6 2f       	mov	r29, r22
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, INPUT);
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_voidSetPinDirection>
	
	// Pullup
	switch(copy_u8PortID){
  7a:	c2 34       	cpi	r28, 0x42	; 66
  7c:	a1 f0       	breq	.+40     	; 0xa6 <button_init+0x3a>
  7e:	18 f4       	brcc	.+6      	; 0x86 <button_init+0x1a>
  80:	c1 34       	cpi	r28, 0x41	; 65
  82:	31 f0       	breq	.+12     	; 0x90 <button_init+0x24>
  84:	30 c0       	rjmp	.+96     	; 0xe6 <button_init+0x7a>
  86:	c3 34       	cpi	r28, 0x43	; 67
  88:	c9 f0       	breq	.+50     	; 0xbc <button_init+0x50>
  8a:	c4 34       	cpi	r28, 0x44	; 68
  8c:	11 f1       	breq	.+68     	; 0xd2 <button_init+0x66>
  8e:	2b c0       	rjmp	.+86     	; 0xe6 <button_init+0x7a>
		case portA: SETBIT(PORTA, copy_u8PinID); break;
  90:	2b b3       	in	r18, 0x1b	; 27
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <button_init+0x30>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	da 95       	dec	r29
  9e:	e2 f7       	brpl	.-8      	; 0x98 <button_init+0x2c>
  a0:	82 2b       	or	r24, r18
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	20 c0       	rjmp	.+64     	; 0xe6 <button_init+0x7a>
		case portB: SETBIT(PORTB, copy_u8PinID); break;
  a6:	28 b3       	in	r18, 0x18	; 24
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <button_init+0x46>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	da 95       	dec	r29
  b4:	e2 f7       	brpl	.-8      	; 0xae <button_init+0x42>
  b6:	82 2b       	or	r24, r18
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	15 c0       	rjmp	.+42     	; 0xe6 <button_init+0x7a>
		case portC: SETBIT(PORTC, copy_u8PinID); break;
  bc:	25 b3       	in	r18, 0x15	; 21
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <button_init+0x5c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	da 95       	dec	r29
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <button_init+0x58>
  cc:	82 2b       	or	r24, r18
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	0a c0       	rjmp	.+20     	; 0xe6 <button_init+0x7a>
		case portD: SETBIT(PORTD, copy_u8PinID); break;
  d2:	22 b3       	in	r18, 0x12	; 18
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <button_init+0x72>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	da 95       	dec	r29
  e0:	e2 f7       	brpl	.-8      	; 0xda <button_init+0x6e>
  e2:	82 2b       	or	r24, r18
  e4:	82 bb       	out	0x12, r24	; 18
	}
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <button_read>:

uint8 button_read(uint8 copy_u8PortID, uint8 copy_u8PinID){
	return DIO_voidGetBitValue(copy_u8PortID, copy_u8PinID);
  ec:	0e 94 44 01 	call	0x288	; 0x288 <DIO_voidGetBitValue>
}
  f0:	08 95       	ret

000000f2 <led_init>:
void led_on(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, HIGH);
}

void led_off(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, LOW);
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_voidSetPinDirection>
  f8:	08 95       	ret

000000fa <led_toggle>:
}

void led_toggle(uint8 copy_u8PortID, uint8 copy_u8PinID){
	switch(copy_u8PortID){
  fa:	82 34       	cpi	r24, 0x42	; 66
  fc:	a1 f0       	breq	.+40     	; 0x126 <led_toggle+0x2c>
  fe:	18 f4       	brcc	.+6      	; 0x106 <led_toggle+0xc>
 100:	81 34       	cpi	r24, 0x41	; 65
 102:	31 f0       	breq	.+12     	; 0x110 <led_toggle+0x16>
 104:	08 95       	ret
 106:	83 34       	cpi	r24, 0x43	; 67
 108:	c9 f0       	breq	.+50     	; 0x13c <led_toggle+0x42>
 10a:	84 34       	cpi	r24, 0x44	; 68
 10c:	11 f1       	breq	.+68     	; 0x152 <led_toggle+0x58>
 10e:	08 95       	ret
		case portA: TOGBIT(PORTA, copy_u8PinID); break;
 110:	2b b3       	in	r18, 0x1b	; 27
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <led_toggle+0x22>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <led_toggle+0x1e>
 120:	82 27       	eor	r24, r18
 122:	8b bb       	out	0x1b, r24	; 27
 124:	08 95       	ret
		case portB: TOGBIT(PORTB, copy_u8PinID); break;
 126:	28 b3       	in	r18, 0x18	; 24
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <led_toggle+0x38>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <led_toggle+0x34>
 136:	82 27       	eor	r24, r18
 138:	88 bb       	out	0x18, r24	; 24
 13a:	08 95       	ret
		case portC: TOGBIT(PORTC, copy_u8PinID); break;
 13c:	25 b3       	in	r18, 0x15	; 21
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <led_toggle+0x4e>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <led_toggle+0x4a>
 14c:	82 27       	eor	r24, r18
 14e:	85 bb       	out	0x15, r24	; 21
 150:	08 95       	ret
		case portD: TOGBIT(PORTD, copy_u8PinID); break;
 152:	22 b3       	in	r18, 0x12	; 18
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <led_toggle+0x64>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <led_toggle+0x60>
 162:	82 27       	eor	r24, r18
 164:	82 bb       	out	0x12, r24	; 18
 166:	08 95       	ret

00000168 <main>:
#include "MCAL/DIO.h"
#include "HAL/Button.h"

int main(void)
{
	led_init(portA, 7);
 168:	67 e0       	ldi	r22, 0x07	; 7
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 79 00 	call	0xf2	; 0xf2 <led_init>
	button_init(portB, 0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 36 00 	call	0x6c	; 0x6c <button_init>
	while(1){
		if(!button_read(portB, 0)){
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	82 e4       	ldi	r24, 0x42	; 66
 17c:	0e 94 76 00 	call	0xec	; 0xec <button_read>
 180:	81 11       	cpse	r24, r1
 182:	fa cf       	rjmp	.-12     	; 0x178 <main+0x10>
			led_toggle(portA, 7);
 184:	67 e0       	ldi	r22, 0x07	; 7
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	0e 94 7d 00 	call	0xfa	; 0xfa <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	85 ea       	ldi	r24, 0xA5	; 165
 190:	9e e0       	ldi	r25, 0x0E	; 14
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x2a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x34>
 19c:	00 00       	nop
 19e:	ec cf       	rjmp	.-40     	; 0x178 <main+0x10>

000001a0 <DIO_voidSetPinDirection>:
	else{ // HIGH
		switch(copy_u8PortID){
			case portA: SETBIT(PORTA, copy_u8PinID); break;
			case portB: SETBIT(PORTB, copy_u8PinID); break;
			case portC: SETBIT(PORTC, copy_u8PinID); break;
			case portD: SETBIT(PORTD, copy_u8PinID); break;
 1a0:	41 11       	cpse	r20, r1
 1a2:	3b c0       	rjmp	.+118    	; 0x21a <DIO_voidSetPinDirection+0x7a>
 1a4:	82 34       	cpi	r24, 0x42	; 66
 1a6:	a9 f0       	breq	.+42     	; 0x1d2 <DIO_voidSetPinDirection+0x32>
 1a8:	18 f4       	brcc	.+6      	; 0x1b0 <DIO_voidSetPinDirection+0x10>
 1aa:	81 34       	cpi	r24, 0x41	; 65
 1ac:	31 f0       	breq	.+12     	; 0x1ba <DIO_voidSetPinDirection+0x1a>
 1ae:	08 95       	ret
 1b0:	83 34       	cpi	r24, 0x43	; 67
 1b2:	d9 f0       	breq	.+54     	; 0x1ea <DIO_voidSetPinDirection+0x4a>
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	29 f1       	breq	.+74     	; 0x202 <DIO_voidSetPinDirection+0x62>
 1b8:	08 95       	ret
 1ba:	2a b3       	in	r18, 0x1a	; 26
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_voidSetPinDirection+0x26>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_voidSetPinDirection+0x22>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	8a bb       	out	0x1a, r24	; 26
 1d0:	08 95       	ret
 1d2:	27 b3       	in	r18, 0x17	; 23
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_voidSetPinDirection+0x3e>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_voidSetPinDirection+0x3a>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	87 bb       	out	0x17, r24	; 23
 1e8:	08 95       	ret
 1ea:	24 b3       	in	r18, 0x14	; 20
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_voidSetPinDirection+0x56>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_voidSetPinDirection+0x52>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	84 bb       	out	0x14, r24	; 20
 200:	08 95       	ret
 202:	21 b3       	in	r18, 0x11	; 17
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_voidSetPinDirection+0x6e>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_voidSetPinDirection+0x6a>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	81 bb       	out	0x11, r24	; 17
 218:	08 95       	ret
 21a:	82 34       	cpi	r24, 0x42	; 66
 21c:	a1 f0       	breq	.+40     	; 0x246 <DIO_voidSetPinDirection+0xa6>
 21e:	18 f4       	brcc	.+6      	; 0x226 <DIO_voidSetPinDirection+0x86>
 220:	81 34       	cpi	r24, 0x41	; 65
 222:	31 f0       	breq	.+12     	; 0x230 <DIO_voidSetPinDirection+0x90>
 224:	08 95       	ret
 226:	83 34       	cpi	r24, 0x43	; 67
 228:	c9 f0       	breq	.+50     	; 0x25c <DIO_voidSetPinDirection+0xbc>
 22a:	84 34       	cpi	r24, 0x44	; 68
 22c:	11 f1       	breq	.+68     	; 0x272 <DIO_voidSetPinDirection+0xd2>
 22e:	08 95       	ret
 230:	2a b3       	in	r18, 0x1a	; 26
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_voidSetPinDirection+0x9c>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_voidSetPinDirection+0x98>
 240:	82 2b       	or	r24, r18
 242:	8a bb       	out	0x1a, r24	; 26
 244:	08 95       	ret
 246:	27 b3       	in	r18, 0x17	; 23
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_voidSetPinDirection+0xb2>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_voidSetPinDirection+0xae>
 256:	82 2b       	or	r24, r18
 258:	87 bb       	out	0x17, r24	; 23
 25a:	08 95       	ret
 25c:	24 b3       	in	r18, 0x14	; 20
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_voidSetPinDirection+0xc8>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_voidSetPinDirection+0xc4>
 26c:	82 2b       	or	r24, r18
 26e:	84 bb       	out	0x14, r24	; 20
 270:	08 95       	ret
 272:	21 b3       	in	r18, 0x11	; 17
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_voidSetPinDirection+0xde>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_voidSetPinDirection+0xda>
 282:	82 2b       	or	r24, r18
 284:	81 bb       	out	0x11, r24	; 17
 286:	08 95       	ret

00000288 <DIO_voidGetBitValue>:
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
	switch(copy_u8PortID){
 288:	82 34       	cpi	r24, 0x42	; 66
 28a:	91 f0       	breq	.+36     	; 0x2b0 <DIO_voidGetBitValue+0x28>
 28c:	18 f4       	brcc	.+6      	; 0x294 <DIO_voidGetBitValue+0xc>
 28e:	81 34       	cpi	r24, 0x41	; 65
 290:	31 f0       	breq	.+12     	; 0x29e <DIO_voidGetBitValue+0x16>
 292:	29 c0       	rjmp	.+82     	; 0x2e6 <DIO_voidGetBitValue+0x5e>
 294:	83 34       	cpi	r24, 0x43	; 67
 296:	a9 f0       	breq	.+42     	; 0x2c2 <DIO_voidGetBitValue+0x3a>
 298:	84 34       	cpi	r24, 0x44	; 68
 29a:	e1 f0       	breq	.+56     	; 0x2d4 <DIO_voidGetBitValue+0x4c>
 29c:	24 c0       	rjmp	.+72     	; 0x2e6 <DIO_voidGetBitValue+0x5e>
		case portA: value = READBIT(PINA, copy_u8PinID); break;
 29e:	89 b3       	in	r24, 0x19	; 25
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_voidGetBitValue+0x20>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_voidGetBitValue+0x1c>
 2ac:	81 70       	andi	r24, 0x01	; 1
 2ae:	08 95       	ret
		case portB: value = READBIT(PINB, copy_u8PinID); break;
 2b0:	86 b3       	in	r24, 0x16	; 22
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_voidGetBitValue+0x32>
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_voidGetBitValue+0x2e>
 2be:	81 70       	andi	r24, 0x01	; 1
 2c0:	08 95       	ret
		case portC: value = READBIT(PINC, copy_u8PinID); break;
 2c2:	83 b3       	in	r24, 0x13	; 19
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_voidGetBitValue+0x44>
 2c8:	95 95       	asr	r25
 2ca:	87 95       	ror	r24
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_voidGetBitValue+0x40>
 2d0:	81 70       	andi	r24, 0x01	; 1
 2d2:	08 95       	ret
		case portD: value = READBIT(PIND, copy_u8PinID); break;
 2d4:	80 b3       	in	r24, 0x10	; 16
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_voidGetBitValue+0x56>
 2da:	95 95       	asr	r25
 2dc:	87 95       	ror	r24
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_voidGetBitValue+0x52>
 2e2:	81 70       	andi	r24, 0x01	; 1
 2e4:	08 95       	ret
		}
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
		case portB: value = READBIT(PINB, copy_u8PinID); break;
		case portC: value = READBIT(PINC, copy_u8PinID); break;
		case portD: value = READBIT(PIND, copy_u8PinID); break;
	}
	return value;
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
