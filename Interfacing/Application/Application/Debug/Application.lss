
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000baa  00000c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00000c46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c91  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd2  00000000  00000000  00002b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001061  00000000  00000000  000037ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00004860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c7  00000000  00000000  00004d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001432  00000000  00000000  0000555f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006991  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_1>
   8:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_2>
   c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_10>
  2c:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 14 02 	call	0x428	; 0x428 <main>
  8a:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:
 *  Author: Ali
 */ 

#include "Button.h"

void button_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	d6 2f       	mov	r29, r22
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, INPUT);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <DIO_voidSetPinDirection>
	
	// Pullup
	switch(copy_u8PortID){
  a0:	c2 34       	cpi	r28, 0x42	; 66
  a2:	a1 f0       	breq	.+40     	; 0xcc <button_init+0x3a>
  a4:	18 f4       	brcc	.+6      	; 0xac <button_init+0x1a>
  a6:	c1 34       	cpi	r28, 0x41	; 65
  a8:	31 f0       	breq	.+12     	; 0xb6 <button_init+0x24>
  aa:	30 c0       	rjmp	.+96     	; 0x10c <button_init+0x7a>
  ac:	c3 34       	cpi	r28, 0x43	; 67
  ae:	c9 f0       	breq	.+50     	; 0xe2 <button_init+0x50>
  b0:	c4 34       	cpi	r28, 0x44	; 68
  b2:	11 f1       	breq	.+68     	; 0xf8 <button_init+0x66>
  b4:	2b c0       	rjmp	.+86     	; 0x10c <button_init+0x7a>
		case portA: SETBIT(PORTA, copy_u8PinID); break;
  b6:	2b b3       	in	r18, 0x1b	; 27
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <button_init+0x30>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	da 95       	dec	r29
  c4:	e2 f7       	brpl	.-8      	; 0xbe <button_init+0x2c>
  c6:	82 2b       	or	r24, r18
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	20 c0       	rjmp	.+64     	; 0x10c <button_init+0x7a>
		case portB: SETBIT(PORTB, copy_u8PinID); break;
  cc:	28 b3       	in	r18, 0x18	; 24
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <button_init+0x46>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	da 95       	dec	r29
  da:	e2 f7       	brpl	.-8      	; 0xd4 <button_init+0x42>
  dc:	82 2b       	or	r24, r18
  de:	88 bb       	out	0x18, r24	; 24
  e0:	15 c0       	rjmp	.+42     	; 0x10c <button_init+0x7a>
		case portC: SETBIT(PORTC, copy_u8PinID); break;
  e2:	25 b3       	in	r18, 0x15	; 21
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <button_init+0x5c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	da 95       	dec	r29
  f0:	e2 f7       	brpl	.-8      	; 0xea <button_init+0x58>
  f2:	82 2b       	or	r24, r18
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	0a c0       	rjmp	.+20     	; 0x10c <button_init+0x7a>
		case portD: SETBIT(PORTD, copy_u8PinID); break;
  f8:	22 b3       	in	r18, 0x12	; 18
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <button_init+0x72>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	da 95       	dec	r29
 106:	e2 f7       	brpl	.-8      	; 0x100 <button_init+0x6e>
 108:	82 2b       	or	r24, r18
 10a:	82 bb       	out	0x12, r24	; 18
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <button_read>:

uint8 button_read(uint8 copy_u8PortID, uint8 copy_u8PinID){
	return DIO_voidGetBitValue(copy_u8PortID, copy_u8PinID);
 112:	0e 94 cf 02 	call	0x59e	; 0x59e <DIO_voidGetBitValue>
}
 116:	08 95       	ret

00000118 <LCD_write_char>:
* Purpose      : Write a specific Ascii char (data) to lcd (valid only with 4-bit mode)
* Parameters   : data  (data to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_char(uint8 data){
	LCD_RS(1);
 118:	9b b3       	in	r25, 0x1b	; 27
 11a:	98 60       	ori	r25, 0x08	; 8
 11c:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(data, 4));
 11e:	84 ff       	sbrs	r24, 4
 120:	04 c0       	rjmp	.+8      	; 0x12a <LCD_write_char+0x12>
 122:	98 b3       	in	r25, 0x18	; 24
 124:	91 60       	ori	r25, 0x01	; 1
 126:	98 bb       	out	0x18, r25	; 24
 128:	03 c0       	rjmp	.+6      	; 0x130 <LCD_write_char+0x18>
 12a:	98 b3       	in	r25, 0x18	; 24
 12c:	9e 7f       	andi	r25, 0xFE	; 254
 12e:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 5));
 130:	85 ff       	sbrs	r24, 5
 132:	04 c0       	rjmp	.+8      	; 0x13c <LCD_write_char+0x24>
 134:	98 b3       	in	r25, 0x18	; 24
 136:	92 60       	ori	r25, 0x02	; 2
 138:	98 bb       	out	0x18, r25	; 24
 13a:	03 c0       	rjmp	.+6      	; 0x142 <LCD_write_char+0x2a>
 13c:	98 b3       	in	r25, 0x18	; 24
 13e:	9d 7f       	andi	r25, 0xFD	; 253
 140:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 6));
 142:	86 ff       	sbrs	r24, 6
 144:	04 c0       	rjmp	.+8      	; 0x14e <LCD_write_char+0x36>
 146:	98 b3       	in	r25, 0x18	; 24
 148:	94 60       	ori	r25, 0x04	; 4
 14a:	98 bb       	out	0x18, r25	; 24
 14c:	03 c0       	rjmp	.+6      	; 0x154 <LCD_write_char+0x3c>
 14e:	98 b3       	in	r25, 0x18	; 24
 150:	9b 7f       	andi	r25, 0xFB	; 251
 152:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 7));
 154:	88 23       	and	r24, r24
 156:	24 f4       	brge	.+8      	; 0x160 <LCD_write_char+0x48>
 158:	98 b3       	in	r25, 0x18	; 24
 15a:	90 61       	ori	r25, 0x10	; 16
 15c:	98 bb       	out	0x18, r25	; 24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <LCD_write_char+0x4e>
 160:	98 b3       	in	r25, 0x18	; 24
 162:	9f 7e       	andi	r25, 0xEF	; 239
 164:	98 bb       	out	0x18, r25	; 24
	
	LCD_EN(1);
 166:	9b b3       	in	r25, 0x1b	; 27
 168:	94 60       	ori	r25, 0x04	; 4
 16a:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	ef e9       	ldi	r30, 0x9F	; 159
 16e:	ff e0       	ldi	r31, 0x0F	; 15
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_write_char+0x58>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_write_char+0x5e>
 176:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 178:	9b b3       	in	r25, 0x1b	; 27
 17a:	9b 7f       	andi	r25, 0xFB	; 251
 17c:	9b bb       	out	0x1b, r25	; 27
 17e:	ef e9       	ldi	r30, 0x9F	; 159
 180:	ff e0       	ldi	r31, 0x0F	; 15
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_write_char+0x6a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_write_char+0x70>
 188:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(data, 0));
 18a:	80 ff       	sbrs	r24, 0
 18c:	04 c0       	rjmp	.+8      	; 0x196 <LCD_write_char+0x7e>
 18e:	98 b3       	in	r25, 0x18	; 24
 190:	91 60       	ori	r25, 0x01	; 1
 192:	98 bb       	out	0x18, r25	; 24
 194:	03 c0       	rjmp	.+6      	; 0x19c <LCD_write_char+0x84>
 196:	98 b3       	in	r25, 0x18	; 24
 198:	9e 7f       	andi	r25, 0xFE	; 254
 19a:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 1));
 19c:	81 ff       	sbrs	r24, 1
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <LCD_write_char+0x90>
 1a0:	98 b3       	in	r25, 0x18	; 24
 1a2:	92 60       	ori	r25, 0x02	; 2
 1a4:	98 bb       	out	0x18, r25	; 24
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <LCD_write_char+0x96>
 1a8:	98 b3       	in	r25, 0x18	; 24
 1aa:	9d 7f       	andi	r25, 0xFD	; 253
 1ac:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 2));
 1ae:	82 ff       	sbrs	r24, 2
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <LCD_write_char+0xa2>
 1b2:	98 b3       	in	r25, 0x18	; 24
 1b4:	94 60       	ori	r25, 0x04	; 4
 1b6:	98 bb       	out	0x18, r25	; 24
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <LCD_write_char+0xa8>
 1ba:	98 b3       	in	r25, 0x18	; 24
 1bc:	9b 7f       	andi	r25, 0xFB	; 251
 1be:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 3));
 1c0:	83 ff       	sbrs	r24, 3
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <LCD_write_char+0xb4>
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <LCD_write_char+0xba>
 1cc:	88 b3       	in	r24, 0x18	; 24
 1ce:	8f 7e       	andi	r24, 0xEF	; 239
 1d0:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 1d2:	8b b3       	in	r24, 0x1b	; 27
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	8b bb       	out	0x1b, r24	; 27
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_write_char+0xc4>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_write_char+0xca>
 1e2:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 1e4:	8b b3       	in	r24, 0x1b	; 27
 1e6:	8b 7f       	andi	r24, 0xFB	; 251
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	ef e9       	ldi	r30, 0x9F	; 159
 1ec:	ff e0       	ldi	r31, 0x0F	; 15
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_write_char+0xd6>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_write_char+0xdc>
 1f4:	00 00       	nop
 1f6:	08 95       	ret

000001f8 <LCD_write_command>:
* Purpose      : Send a specific command (cmd) to lcd (valid only with 4-bit mode)
* Parameters   : cmd  (command to be done by lcd)
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8 cmd){
	LCD_RS(0);
 1f8:	9b b3       	in	r25, 0x1b	; 27
 1fa:	97 7f       	andi	r25, 0xF7	; 247
 1fc:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(cmd, 4));
 1fe:	84 ff       	sbrs	r24, 4
 200:	04 c0       	rjmp	.+8      	; 0x20a <LCD_write_command+0x12>
 202:	98 b3       	in	r25, 0x18	; 24
 204:	91 60       	ori	r25, 0x01	; 1
 206:	98 bb       	out	0x18, r25	; 24
 208:	03 c0       	rjmp	.+6      	; 0x210 <LCD_write_command+0x18>
 20a:	98 b3       	in	r25, 0x18	; 24
 20c:	9e 7f       	andi	r25, 0xFE	; 254
 20e:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 5));
 210:	85 ff       	sbrs	r24, 5
 212:	04 c0       	rjmp	.+8      	; 0x21c <LCD_write_command+0x24>
 214:	98 b3       	in	r25, 0x18	; 24
 216:	92 60       	ori	r25, 0x02	; 2
 218:	98 bb       	out	0x18, r25	; 24
 21a:	03 c0       	rjmp	.+6      	; 0x222 <LCD_write_command+0x2a>
 21c:	98 b3       	in	r25, 0x18	; 24
 21e:	9d 7f       	andi	r25, 0xFD	; 253
 220:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 6));
 222:	86 ff       	sbrs	r24, 6
 224:	04 c0       	rjmp	.+8      	; 0x22e <LCD_write_command+0x36>
 226:	98 b3       	in	r25, 0x18	; 24
 228:	94 60       	ori	r25, 0x04	; 4
 22a:	98 bb       	out	0x18, r25	; 24
 22c:	03 c0       	rjmp	.+6      	; 0x234 <LCD_write_command+0x3c>
 22e:	98 b3       	in	r25, 0x18	; 24
 230:	9b 7f       	andi	r25, 0xFB	; 251
 232:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 7));
 234:	88 23       	and	r24, r24
 236:	24 f4       	brge	.+8      	; 0x240 <LCD_write_command+0x48>
 238:	98 b3       	in	r25, 0x18	; 24
 23a:	90 61       	ori	r25, 0x10	; 16
 23c:	98 bb       	out	0x18, r25	; 24
 23e:	03 c0       	rjmp	.+6      	; 0x246 <LCD_write_command+0x4e>
 240:	98 b3       	in	r25, 0x18	; 24
 242:	9f 7e       	andi	r25, 0xEF	; 239
 244:	98 bb       	out	0x18, r25	; 24

	LCD_EN(1);
 246:	9b b3       	in	r25, 0x1b	; 27
 248:	94 60       	ori	r25, 0x04	; 4
 24a:	9b bb       	out	0x1b, r25	; 27
 24c:	ef e9       	ldi	r30, 0x9F	; 159
 24e:	ff e0       	ldi	r31, 0x0F	; 15
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_write_command+0x58>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_write_command+0x5e>
 256:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 258:	9b b3       	in	r25, 0x1b	; 27
 25a:	9b 7f       	andi	r25, 0xFB	; 251
 25c:	9b bb       	out	0x1b, r25	; 27
 25e:	ef e9       	ldi	r30, 0x9F	; 159
 260:	ff e0       	ldi	r31, 0x0F	; 15
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_write_command+0x6a>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_write_command+0x70>
 268:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(cmd, 0));
 26a:	80 ff       	sbrs	r24, 0
 26c:	04 c0       	rjmp	.+8      	; 0x276 <LCD_write_command+0x7e>
 26e:	98 b3       	in	r25, 0x18	; 24
 270:	91 60       	ori	r25, 0x01	; 1
 272:	98 bb       	out	0x18, r25	; 24
 274:	03 c0       	rjmp	.+6      	; 0x27c <LCD_write_command+0x84>
 276:	98 b3       	in	r25, 0x18	; 24
 278:	9e 7f       	andi	r25, 0xFE	; 254
 27a:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 1));
 27c:	81 ff       	sbrs	r24, 1
 27e:	04 c0       	rjmp	.+8      	; 0x288 <LCD_write_command+0x90>
 280:	98 b3       	in	r25, 0x18	; 24
 282:	92 60       	ori	r25, 0x02	; 2
 284:	98 bb       	out	0x18, r25	; 24
 286:	03 c0       	rjmp	.+6      	; 0x28e <LCD_write_command+0x96>
 288:	98 b3       	in	r25, 0x18	; 24
 28a:	9d 7f       	andi	r25, 0xFD	; 253
 28c:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 2));
 28e:	82 ff       	sbrs	r24, 2
 290:	04 c0       	rjmp	.+8      	; 0x29a <LCD_write_command+0xa2>
 292:	98 b3       	in	r25, 0x18	; 24
 294:	94 60       	ori	r25, 0x04	; 4
 296:	98 bb       	out	0x18, r25	; 24
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <LCD_write_command+0xa8>
 29a:	98 b3       	in	r25, 0x18	; 24
 29c:	9b 7f       	andi	r25, 0xFB	; 251
 29e:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 3));
 2a0:	83 ff       	sbrs	r24, 3
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <LCD_write_command+0xb4>
 2a4:	88 b3       	in	r24, 0x18	; 24
 2a6:	80 61       	ori	r24, 0x10	; 16
 2a8:	88 bb       	out	0x18, r24	; 24
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <LCD_write_command+0xba>
 2ac:	88 b3       	in	r24, 0x18	; 24
 2ae:	8f 7e       	andi	r24, 0xEF	; 239
 2b0:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 2b2:	8b b3       	in	r24, 0x1b	; 27
 2b4:	84 60       	ori	r24, 0x04	; 4
 2b6:	8b bb       	out	0x1b, r24	; 27
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_write_command+0xc4>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_write_command+0xca>
 2c2:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 2c4:	8b b3       	in	r24, 0x1b	; 27
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	ef e9       	ldi	r30, 0x9F	; 159
 2cc:	ff e0       	ldi	r31, 0x0F	; 15
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_write_command+0xd6>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_write_command+0xdc>
 2d4:	00 00       	nop
 2d6:	08 95       	ret

000002d8 <LCD_init>:
* Parameters   : void
* Return value : void

*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PINS();
 2d8:	8a b3       	in	r24, 0x1a	; 26
 2da:	88 60       	ori	r24, 0x08	; 8
 2dc:	8a bb       	out	0x1a, r24	; 26
 2de:	8a b3       	in	r24, 0x1a	; 26
 2e0:	84 60       	ori	r24, 0x04	; 4
 2e2:	8a bb       	out	0x1a, r24	; 26
 2e4:	87 b3       	in	r24, 0x17	; 23
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	87 bb       	out	0x17, r24	; 23
 2ea:	87 b3       	in	r24, 0x17	; 23
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	87 bb       	out	0x17, r24	; 23
 2f0:	87 b3       	in	r24, 0x17	; 23
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	87 bb       	out	0x17, r24	; 23
 2f6:	87 b3       	in	r24, 0x17	; 23
 2f8:	80 61       	ori	r24, 0x10	; 16
 2fa:	87 bb       	out	0x17, r24	; 23
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	89 ef       	ldi	r24, 0xF9	; 249
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <LCD_init+0x2a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_init+0x34>
 30c:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_write_command(0x02);		      /* send for 4 bit initialization of LCD  */
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 314:	88 e2       	ldi	r24, 0x28	; 40
 316:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x0c);              /* Display on cursor off*/
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x06);              /* Increment cursor (shift cursor to right)*/
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x01);              /* Clear display screen*/
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	86 e7       	ldi	r24, 0x76	; 118
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <LCD_init+0x5a>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_init+0x64>
 33c:	00 00       	nop
 33e:	08 95       	ret

00000340 <LCD_write_number>:
* Function Name: LCD_write_num
* Purpose      : Write a specific number (num) on lcd (valid only with 4-bit mode)
* Parameters   : num  (num to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	2a 97       	sbiw	r28, 0x0a	; 10
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
	
	if(num < 0){
 358:	99 23       	and	r25, r25
 35a:	4c f4       	brge	.+18     	; 0x36e <LCD_write_number+0x2e>
		num *= -1;
 35c:	90 95       	com	r25
 35e:	80 95       	com	r24
 360:	70 95       	com	r23
 362:	61 95       	neg	r22
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	8f 4f       	sbci	r24, 0xFF	; 255
 368:	9f 4f       	sbci	r25, 0xFF	; 255
		neg_flag = 1;
 36a:	01 e0       	ldi	r16, 0x01	; 1
 36c:	01 c0       	rjmp	.+2      	; 0x370 <LCD_write_number+0x30>
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
 36e:	00 e0       	ldi	r16, 0x00	; 0
	if(num < 0){
		num *= -1;
		neg_flag = 1;
	}
	
	if(num == 0) {
 370:	61 15       	cp	r22, r1
 372:	71 05       	cpc	r23, r1
 374:	81 05       	cpc	r24, r1
 376:	91 05       	cpc	r25, r1
 378:	d1 f4       	brne	.+52     	; 0x3ae <LCD_write_number+0x6e>
		LCD_write_char('0');
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
 380:	31 c0       	rjmp	.+98     	; 0x3e4 <LCD_write_number+0xa4>
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
		num_arr[i] = num % 10 + '0';
 382:	2a e0       	ldi	r18, 0x0A	; 10
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	0e 94 b4 05 	call	0xb68	; 0xb68 <__divmodsi4>
 38e:	e1 e0       	ldi	r30, 0x01	; 1
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	e1 0f       	add	r30, r17
 398:	f1 1d       	adc	r31, r1
 39a:	17 fd       	sbrc	r17, 7
 39c:	fa 95       	dec	r31
 39e:	60 5d       	subi	r22, 0xD0	; 208
 3a0:	60 83       	st	Z, r22
		num /= 10;
 3a2:	62 2f       	mov	r22, r18
 3a4:	73 2f       	mov	r23, r19
 3a6:	84 2f       	mov	r24, r20
 3a8:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_char('0');
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
 3aa:	1f 5f       	subi	r17, 0xFF	; 255
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <LCD_write_number+0x70>
 3ae:	10 e0       	ldi	r17, 0x00	; 0
 3b0:	61 15       	cp	r22, r1
 3b2:	71 05       	cpc	r23, r1
 3b4:	81 05       	cpc	r24, r1
 3b6:	91 05       	cpc	r25, r1
 3b8:	21 f7       	brne	.-56     	; 0x382 <LCD_write_number+0x42>
		num_arr[i] = num % 10 + '0';
		num /= 10;
	}
	i--;
 3ba:	11 50       	subi	r17, 0x01	; 1
	if(neg_flag == 1){
 3bc:	01 30       	cpi	r16, 0x01	; 1
 3be:	81 f4       	brne	.+32     	; 0x3e0 <LCD_write_number+0xa0>
		LCD_write_char('-');
 3c0:	8d e2       	ldi	r24, 0x2D	; 45
 3c2:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
 3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <LCD_write_number+0xa0>
	}
	while (i >= 0){
		LCD_write_char(num_arr[i]);
 3c8:	e1 e0       	ldi	r30, 0x01	; 1
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	ec 0f       	add	r30, r28
 3ce:	fd 1f       	adc	r31, r29
 3d0:	e1 0f       	add	r30, r17
 3d2:	f1 1d       	adc	r31, r1
 3d4:	17 fd       	sbrc	r17, 7
 3d6:	fa 95       	dec	r31
 3d8:	80 81       	ld	r24, Z
 3da:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
		i--;
 3de:	11 50       	subi	r17, 0x01	; 1
	}
	i--;
	if(neg_flag == 1){
		LCD_write_char('-');
	}
	while (i >= 0){
 3e0:	11 23       	and	r17, r17
 3e2:	94 f7       	brge	.-28     	; 0x3c8 <LCD_write_number+0x88>
		LCD_write_char(num_arr[i]);
		i--;
	}
}
 3e4:	2a 96       	adiw	r28, 0x0a	; 10
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <LCD_write_string>:
* Purpose      : Write a string (*txt) to lcd (valid only with 4-bit mode)
*                (assume the end char of string is NULL (Ascii:'\0' - decimal:0 ))
* Parameters   : *txt  (array of char to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	8c 01       	movw	r16, r24
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	03 c0       	rjmp	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		LCD_write_char(str[i]);
 406:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 40a:	cf 5f       	subi	r28, 0xFF	; 255
 40c:	f8 01       	movw	r30, r16
 40e:	ec 0f       	add	r30, r28
 410:	f1 1d       	adc	r31, r1
 412:	80 81       	ld	r24, Z
 414:	81 11       	cpse	r24, r1
 416:	f7 cf       	rjmp	.-18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		LCD_write_char(str[i]);
	}
	
}
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <led_init>:
 */ 

#include "LED.h"

void led_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, OUTPUT);
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <DIO_voidSetPinDirection>
 426:	08 95       	ret

00000428 <main>:
#include "MCAL/Timer0/Timer0_Interface.h"

int main(void)
{
	// Init led
	LCD_init();
 428:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_init>
	button_init(portD, 7);
 42c:	67 e0       	ldi	r22, 0x07	; 7
 42e:	84 e4       	ldi	r24, 0x44	; 68
 430:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	led_init(portA, 5);
 434:	65 e0       	ldi	r22, 0x05	; 5
 436:	81 e4       	ldi	r24, 0x41	; 65
 438:	0e 94 10 02 	call	0x420	; 0x420 <led_init>
	
	uint8 duty = 0;
	
	GIE_Disable();
 43c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <GIE_Disable>
	PWM0_OC0_duty(duty);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 07 04 	call	0x80e	; 0x80e <PWM0_OC0_duty>
	timer0_init(PWM_FAST, P8, INTERUPT_OFF, NON_INVERTED);
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	40 e0       	ldi	r20, 0x00	; 0
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <timer0_init>
	GIE_Enable();
 452:	0e 94 75 03 	call	0x6ea	; 0x6ea <GIE_Enable>
	
	LCD_write_command(0x80);
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_string("Duty= ");
 45c:	80 e6       	ldi	r24, 0x60	; 96
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
	LCD_write_command(0x86);
 464:	86 e8       	ldi	r24, 0x86	; 134
 466:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_number(duty);
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	cb 01       	movw	r24, r22
 470:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_write_number>
	// Init led
	LCD_init();
	button_init(portD, 7);
	led_init(portA, 5);
	
	uint8 duty = 0;
 474:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_write_command(0x86);
	LCD_write_number(duty);
		
	while (1)
	{
		if(!button_read(portD, 7)){
 476:	67 e0       	ldi	r22, 0x07	; 7
 478:	84 e4       	ldi	r24, 0x44	; 68
 47a:	0e 94 89 00 	call	0x112	; 0x112 <button_read>
 47e:	81 11       	cpse	r24, r1
 480:	fa cf       	rjmp	.-12     	; 0x476 <main+0x4e>
			duty += 10;
 482:	c6 5f       	subi	r28, 0xF6	; 246
			if(duty == 110){
 484:	ce 36       	cpi	r28, 0x6E	; 110
 486:	09 f4       	brne	.+2      	; 0x48a <main+0x62>
				duty = 0;
 488:	c0 e0       	ldi	r28, 0x00	; 0
			}
			PWM0_OC0_duty(duty);
 48a:	8c 2f       	mov	r24, r28
 48c:	0e 94 07 04 	call	0x80e	; 0x80e <PWM0_OC0_duty>
			LCD_write_command(0x86);
 490:	86 e8       	ldi	r24, 0x86	; 134
 492:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
			LCD_write_number(duty);
 496:	6c 2f       	mov	r22, r28
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_write_number>
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	85 ea       	ldi	r24, 0xA5	; 165
 4a6:	9e e0       	ldi	r25, 0x0E	; 14
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <main+0x80>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <main+0x8a>
 4b2:	00 00       	nop
 4b4:	e0 cf       	rjmp	.-64     	; 0x476 <main+0x4e>

000004b6 <DIO_voidSetPinDirection>:
	else{ // HIGH
		switch(copy_u8PortID){
			case portA: SETBIT(PORTA, copy_u8PinID); break;
			case portB: SETBIT(PORTB, copy_u8PinID); break;
			case portC: SETBIT(PORTC, copy_u8PinID); break;
			case portD: SETBIT(PORTD, copy_u8PinID); break;
 4b6:	41 11       	cpse	r20, r1
 4b8:	3b c0       	rjmp	.+118    	; 0x530 <DIO_voidSetPinDirection+0x7a>
 4ba:	82 34       	cpi	r24, 0x42	; 66
 4bc:	a9 f0       	breq	.+42     	; 0x4e8 <DIO_voidSetPinDirection+0x32>
 4be:	18 f4       	brcc	.+6      	; 0x4c6 <DIO_voidSetPinDirection+0x10>
 4c0:	81 34       	cpi	r24, 0x41	; 65
 4c2:	31 f0       	breq	.+12     	; 0x4d0 <DIO_voidSetPinDirection+0x1a>
 4c4:	08 95       	ret
 4c6:	83 34       	cpi	r24, 0x43	; 67
 4c8:	d9 f0       	breq	.+54     	; 0x500 <DIO_voidSetPinDirection+0x4a>
 4ca:	84 34       	cpi	r24, 0x44	; 68
 4cc:	29 f1       	breq	.+74     	; 0x518 <DIO_voidSetPinDirection+0x62>
 4ce:	08 95       	ret
 4d0:	2a b3       	in	r18, 0x1a	; 26
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_voidSetPinDirection+0x26>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_voidSetPinDirection+0x22>
 4e0:	80 95       	com	r24
 4e2:	82 23       	and	r24, r18
 4e4:	8a bb       	out	0x1a, r24	; 26
 4e6:	08 95       	ret
 4e8:	27 b3       	in	r18, 0x17	; 23
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_voidSetPinDirection+0x3e>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_voidSetPinDirection+0x3a>
 4f8:	80 95       	com	r24
 4fa:	82 23       	and	r24, r18
 4fc:	87 bb       	out	0x17, r24	; 23
 4fe:	08 95       	ret
 500:	24 b3       	in	r18, 0x14	; 20
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_voidSetPinDirection+0x56>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_voidSetPinDirection+0x52>
 510:	80 95       	com	r24
 512:	82 23       	and	r24, r18
 514:	84 bb       	out	0x14, r24	; 20
 516:	08 95       	ret
 518:	21 b3       	in	r18, 0x11	; 17
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_voidSetPinDirection+0x6e>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_voidSetPinDirection+0x6a>
 528:	80 95       	com	r24
 52a:	82 23       	and	r24, r18
 52c:	81 bb       	out	0x11, r24	; 17
 52e:	08 95       	ret
 530:	82 34       	cpi	r24, 0x42	; 66
 532:	a1 f0       	breq	.+40     	; 0x55c <DIO_voidSetPinDirection+0xa6>
 534:	18 f4       	brcc	.+6      	; 0x53c <DIO_voidSetPinDirection+0x86>
 536:	81 34       	cpi	r24, 0x41	; 65
 538:	31 f0       	breq	.+12     	; 0x546 <DIO_voidSetPinDirection+0x90>
 53a:	08 95       	ret
 53c:	83 34       	cpi	r24, 0x43	; 67
 53e:	c9 f0       	breq	.+50     	; 0x572 <DIO_voidSetPinDirection+0xbc>
 540:	84 34       	cpi	r24, 0x44	; 68
 542:	11 f1       	breq	.+68     	; 0x588 <DIO_voidSetPinDirection+0xd2>
 544:	08 95       	ret
 546:	2a b3       	in	r18, 0x1a	; 26
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_voidSetPinDirection+0x9c>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_voidSetPinDirection+0x98>
 556:	82 2b       	or	r24, r18
 558:	8a bb       	out	0x1a, r24	; 26
 55a:	08 95       	ret
 55c:	27 b3       	in	r18, 0x17	; 23
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_voidSetPinDirection+0xb2>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	6a 95       	dec	r22
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_voidSetPinDirection+0xae>
 56c:	82 2b       	or	r24, r18
 56e:	87 bb       	out	0x17, r24	; 23
 570:	08 95       	ret
 572:	24 b3       	in	r18, 0x14	; 20
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_voidSetPinDirection+0xc8>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_voidSetPinDirection+0xc4>
 582:	82 2b       	or	r24, r18
 584:	84 bb       	out	0x14, r24	; 20
 586:	08 95       	ret
 588:	21 b3       	in	r18, 0x11	; 17
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_voidSetPinDirection+0xde>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_voidSetPinDirection+0xda>
 598:	82 2b       	or	r24, r18
 59a:	81 bb       	out	0x11, r24	; 17
 59c:	08 95       	ret

0000059e <DIO_voidGetBitValue>:
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
	switch(copy_u8PortID){
 59e:	82 34       	cpi	r24, 0x42	; 66
 5a0:	91 f0       	breq	.+36     	; 0x5c6 <DIO_voidGetBitValue+0x28>
 5a2:	18 f4       	brcc	.+6      	; 0x5aa <DIO_voidGetBitValue+0xc>
 5a4:	81 34       	cpi	r24, 0x41	; 65
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <DIO_voidGetBitValue+0x16>
 5a8:	29 c0       	rjmp	.+82     	; 0x5fc <DIO_voidGetBitValue+0x5e>
 5aa:	83 34       	cpi	r24, 0x43	; 67
 5ac:	a9 f0       	breq	.+42     	; 0x5d8 <DIO_voidGetBitValue+0x3a>
 5ae:	84 34       	cpi	r24, 0x44	; 68
 5b0:	e1 f0       	breq	.+56     	; 0x5ea <DIO_voidGetBitValue+0x4c>
 5b2:	24 c0       	rjmp	.+72     	; 0x5fc <DIO_voidGetBitValue+0x5e>
		case portA: value = READBIT(PINA, copy_u8PinID); break;
 5b4:	89 b3       	in	r24, 0x19	; 25
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_voidGetBitValue+0x20>
 5ba:	95 95       	asr	r25
 5bc:	87 95       	ror	r24
 5be:	6a 95       	dec	r22
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_voidGetBitValue+0x1c>
 5c2:	81 70       	andi	r24, 0x01	; 1
 5c4:	08 95       	ret
		case portB: value = READBIT(PINB, copy_u8PinID); break;
 5c6:	86 b3       	in	r24, 0x16	; 22
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_voidGetBitValue+0x32>
 5cc:	95 95       	asr	r25
 5ce:	87 95       	ror	r24
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_voidGetBitValue+0x2e>
 5d4:	81 70       	andi	r24, 0x01	; 1
 5d6:	08 95       	ret
		case portC: value = READBIT(PINC, copy_u8PinID); break;
 5d8:	83 b3       	in	r24, 0x13	; 19
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_voidGetBitValue+0x44>
 5de:	95 95       	asr	r25
 5e0:	87 95       	ror	r24
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_voidGetBitValue+0x40>
 5e6:	81 70       	andi	r24, 0x01	; 1
 5e8:	08 95       	ret
		case portD: value = READBIT(PIND, copy_u8PinID); break;
 5ea:	80 b3       	in	r24, 0x10	; 16
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_voidGetBitValue+0x56>
 5f0:	95 95       	asr	r25
 5f2:	87 95       	ror	r24
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_voidGetBitValue+0x52>
 5f8:	81 70       	andi	r24, 0x01	; 1
 5fa:	08 95       	ret
		}
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
 5fc:	80 e0       	ldi	r24, 0x00	; 0
		case portB: value = READBIT(PINB, copy_u8PinID); break;
		case portC: value = READBIT(PINC, copy_u8PinID); break;
		case portD: value = READBIT(PIND, copy_u8PinID); break;
	}
	return value;
 5fe:	08 95       	ret

00000600 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	3f 93       	push	r19
 60e:	4f 93       	push	r20
 610:	5f 93       	push	r21
 612:	6f 93       	push	r22
 614:	7f 93       	push	r23
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	af 93       	push	r26
 61c:	bf 93       	push	r27
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
	ptr_EXT1();
 622:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <ptr_EXT1>
 626:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <ptr_EXT1+0x1>
 62a:	09 95       	icall
}
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	2f 93       	push	r18
 65a:	3f 93       	push	r19
 65c:	4f 93       	push	r20
 65e:	5f 93       	push	r21
 660:	6f 93       	push	r22
 662:	7f 93       	push	r23
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
 668:	af 93       	push	r26
 66a:	bf 93       	push	r27
 66c:	ef 93       	push	r30
 66e:	ff 93       	push	r31
	ptr_EXT2();
 670:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <ptr_EXT2>
 674:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <ptr_EXT2+0x1>
 678:	09 95       	icall
}
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	7f 91       	pop	r23
 688:	6f 91       	pop	r22
 68a:	5f 91       	pop	r21
 68c:	4f 91       	pop	r20
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	2f 93       	push	r18
 6a8:	3f 93       	push	r19
 6aa:	4f 93       	push	r20
 6ac:	5f 93       	push	r21
 6ae:	6f 93       	push	r22
 6b0:	7f 93       	push	r23
 6b2:	8f 93       	push	r24
 6b4:	9f 93       	push	r25
 6b6:	af 93       	push	r26
 6b8:	bf 93       	push	r27
 6ba:	ef 93       	push	r30
 6bc:	ff 93       	push	r31
	ptr_EXT3();
 6be:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 6c2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 6c6:	09 95       	icall
 6c8:	ff 91       	pop	r31
 6ca:	ef 91       	pop	r30
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	7f 91       	pop	r23
 6d6:	6f 91       	pop	r22
 6d8:	5f 91       	pop	r21
 6da:	4f 91       	pop	r20
 6dc:	3f 91       	pop	r19
 6de:	2f 91       	pop	r18
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

000006ea <GIE_Enable>:

#include "GIE_Interface.h"
#include "std_macros.h"

void GIE_Enable(void){
	SETBIT(SREG, I_BIT);
 6ea:	8f b7       	in	r24, 0x3f	; 63
 6ec:	80 68       	ori	r24, 0x80	; 128
 6ee:	8f bf       	out	0x3f, r24	; 63
 6f0:	08 95       	ret

000006f2 <GIE_Disable>:
}

void GIE_Disable(void){
	CLRBIT(SREG, I_BIT);
 6f2:	8f b7       	in	r24, 0x3f	; 63
 6f4:	8f 77       	andi	r24, 0x7F	; 127
 6f6:	8f bf       	out	0x3f, r24	; 63
 6f8:	08 95       	ret

000006fa <timer0_init>:
		SETBIT(TIFR,TOV0);
		
	}
	
	timer0_disable();
}
 6fa:	12 be       	out	0x32, r1	; 50
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	69 f0       	breq	.+26     	; 0x71a <timer0_init+0x20>
 700:	28 f0       	brcs	.+10     	; 0x70c <timer0_init+0x12>
 702:	82 30       	cpi	r24, 0x02	; 2
 704:	89 f0       	breq	.+34     	; 0x728 <timer0_init+0x2e>
 706:	83 30       	cpi	r24, 0x03	; 3
 708:	b1 f0       	breq	.+44     	; 0x736 <timer0_init+0x3c>
 70a:	1b c0       	rjmp	.+54     	; 0x742 <timer0_init+0x48>
 70c:	93 b7       	in	r25, 0x33	; 51
 70e:	97 7f       	andi	r25, 0xF7	; 247
 710:	93 bf       	out	0x33, r25	; 51
 712:	93 b7       	in	r25, 0x33	; 51
 714:	9f 7b       	andi	r25, 0xBF	; 191
 716:	93 bf       	out	0x33, r25	; 51
 718:	14 c0       	rjmp	.+40     	; 0x742 <timer0_init+0x48>
 71a:	93 b7       	in	r25, 0x33	; 51
 71c:	97 7f       	andi	r25, 0xF7	; 247
 71e:	93 bf       	out	0x33, r25	; 51
 720:	93 b7       	in	r25, 0x33	; 51
 722:	90 64       	ori	r25, 0x40	; 64
 724:	93 bf       	out	0x33, r25	; 51
 726:	0d c0       	rjmp	.+26     	; 0x742 <timer0_init+0x48>
 728:	93 b7       	in	r25, 0x33	; 51
 72a:	98 60       	ori	r25, 0x08	; 8
 72c:	93 bf       	out	0x33, r25	; 51
 72e:	93 b7       	in	r25, 0x33	; 51
 730:	9f 7b       	andi	r25, 0xBF	; 191
 732:	93 bf       	out	0x33, r25	; 51
 734:	06 c0       	rjmp	.+12     	; 0x742 <timer0_init+0x48>
 736:	93 b7       	in	r25, 0x33	; 51
 738:	98 60       	ori	r25, 0x08	; 8
 73a:	93 bf       	out	0x33, r25	; 51
 73c:	93 b7       	in	r25, 0x33	; 51
 73e:	90 64       	ori	r25, 0x40	; 64
 740:	93 bf       	out	0x33, r25	; 51
 742:	83 30       	cpi	r24, 0x03	; 3
 744:	11 f0       	breq	.+4      	; 0x74a <timer0_init+0x50>
 746:	81 30       	cpi	r24, 0x01	; 1
 748:	a9 f4       	brne	.+42     	; 0x774 <timer0_init+0x7a>
 74a:	97 b3       	in	r25, 0x17	; 23
 74c:	98 60       	ori	r25, 0x08	; 8
 74e:	97 bb       	out	0x17, r25	; 23
 750:	22 23       	and	r18, r18
 752:	19 f0       	breq	.+6      	; 0x75a <timer0_init+0x60>
 754:	21 30       	cpi	r18, 0x01	; 1
 756:	41 f0       	breq	.+16     	; 0x768 <timer0_init+0x6e>
 758:	0d c0       	rjmp	.+26     	; 0x774 <timer0_init+0x7a>
 75a:	93 b7       	in	r25, 0x33	; 51
 75c:	90 62       	ori	r25, 0x20	; 32
 75e:	93 bf       	out	0x33, r25	; 51
 760:	93 b7       	in	r25, 0x33	; 51
 762:	9f 7e       	andi	r25, 0xEF	; 239
 764:	93 bf       	out	0x33, r25	; 51
 766:	06 c0       	rjmp	.+12     	; 0x774 <timer0_init+0x7a>
 768:	93 b7       	in	r25, 0x33	; 51
 76a:	90 62       	ori	r25, 0x20	; 32
 76c:	93 bf       	out	0x33, r25	; 51
 76e:	93 b7       	in	r25, 0x33	; 51
 770:	90 61       	ori	r25, 0x10	; 16
 772:	93 bf       	out	0x33, r25	; 51
 774:	62 30       	cpi	r22, 0x02	; 2
 776:	f9 f0       	breq	.+62     	; 0x7b6 <timer0_init+0xbc>
 778:	28 f4       	brcc	.+10     	; 0x784 <timer0_init+0x8a>
 77a:	66 23       	and	r22, r22
 77c:	41 f0       	breq	.+16     	; 0x78e <timer0_init+0x94>
 77e:	61 30       	cpi	r22, 0x01	; 1
 780:	81 f0       	breq	.+32     	; 0x7a2 <timer0_init+0xa8>
 782:	36 c0       	rjmp	.+108    	; 0x7f0 <timer0_init+0xf6>
 784:	63 30       	cpi	r22, 0x03	; 3
 786:	09 f1       	breq	.+66     	; 0x7ca <timer0_init+0xd0>
 788:	64 30       	cpi	r22, 0x04	; 4
 78a:	49 f1       	breq	.+82     	; 0x7de <timer0_init+0xe4>
 78c:	31 c0       	rjmp	.+98     	; 0x7f0 <timer0_init+0xf6>
 78e:	93 b7       	in	r25, 0x33	; 51
 790:	9b 7f       	andi	r25, 0xFB	; 251
 792:	93 bf       	out	0x33, r25	; 51
 794:	93 b7       	in	r25, 0x33	; 51
 796:	9d 7f       	andi	r25, 0xFD	; 253
 798:	93 bf       	out	0x33, r25	; 51
 79a:	93 b7       	in	r25, 0x33	; 51
 79c:	91 60       	ori	r25, 0x01	; 1
 79e:	93 bf       	out	0x33, r25	; 51
 7a0:	27 c0       	rjmp	.+78     	; 0x7f0 <timer0_init+0xf6>
 7a2:	93 b7       	in	r25, 0x33	; 51
 7a4:	9b 7f       	andi	r25, 0xFB	; 251
 7a6:	93 bf       	out	0x33, r25	; 51
 7a8:	93 b7       	in	r25, 0x33	; 51
 7aa:	92 60       	ori	r25, 0x02	; 2
 7ac:	93 bf       	out	0x33, r25	; 51
 7ae:	93 b7       	in	r25, 0x33	; 51
 7b0:	9e 7f       	andi	r25, 0xFE	; 254
 7b2:	93 bf       	out	0x33, r25	; 51
 7b4:	1d c0       	rjmp	.+58     	; 0x7f0 <timer0_init+0xf6>
 7b6:	93 b7       	in	r25, 0x33	; 51
 7b8:	9b 7f       	andi	r25, 0xFB	; 251
 7ba:	93 bf       	out	0x33, r25	; 51
 7bc:	93 b7       	in	r25, 0x33	; 51
 7be:	92 60       	ori	r25, 0x02	; 2
 7c0:	93 bf       	out	0x33, r25	; 51
 7c2:	93 b7       	in	r25, 0x33	; 51
 7c4:	91 60       	ori	r25, 0x01	; 1
 7c6:	93 bf       	out	0x33, r25	; 51
 7c8:	13 c0       	rjmp	.+38     	; 0x7f0 <timer0_init+0xf6>
 7ca:	93 b7       	in	r25, 0x33	; 51
 7cc:	94 60       	ori	r25, 0x04	; 4
 7ce:	93 bf       	out	0x33, r25	; 51
 7d0:	93 b7       	in	r25, 0x33	; 51
 7d2:	9d 7f       	andi	r25, 0xFD	; 253
 7d4:	93 bf       	out	0x33, r25	; 51
 7d6:	93 b7       	in	r25, 0x33	; 51
 7d8:	9e 7f       	andi	r25, 0xFE	; 254
 7da:	93 bf       	out	0x33, r25	; 51
 7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <timer0_init+0xf6>
 7de:	93 b7       	in	r25, 0x33	; 51
 7e0:	94 60       	ori	r25, 0x04	; 4
 7e2:	93 bf       	out	0x33, r25	; 51
 7e4:	93 b7       	in	r25, 0x33	; 51
 7e6:	9d 7f       	andi	r25, 0xFD	; 253
 7e8:	93 bf       	out	0x33, r25	; 51
 7ea:	93 b7       	in	r25, 0x33	; 51
 7ec:	91 60       	ori	r25, 0x01	; 1
 7ee:	93 bf       	out	0x33, r25	; 51
 7f0:	41 30       	cpi	r20, 0x01	; 1
 7f2:	61 f4       	brne	.+24     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f4:	88 23       	and	r24, r24
 7f6:	19 f0       	breq	.+6      	; 0x7fe <timer0_init+0x104>
 7f8:	82 30       	cpi	r24, 0x02	; 2
 7fa:	29 f0       	breq	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fc:	08 95       	ret
 7fe:	89 b7       	in	r24, 0x39	; 57
 800:	81 60       	ori	r24, 0x01	; 1
 802:	89 bf       	out	0x39, r24	; 57
 804:	08 95       	ret
 806:	89 b7       	in	r24, 0x39	; 57
 808:	82 60       	ori	r24, 0x02	; 2
 80a:	89 bf       	out	0x39, r24	; 57
 80c:	08 95       	ret

0000080e <PWM0_OC0_duty>:
 80e:	85 36       	cpi	r24, 0x65	; 101
 810:	08 f0       	brcs	.+2      	; 0x814 <PWM0_OC0_duty+0x6>
 812:	84 e6       	ldi	r24, 0x64	; 100
 814:	68 2f       	mov	r22, r24
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 99 04 	call	0x932	; 0x932 <__floatsisf>
 820:	23 e3       	ldi	r18, 0x33	; 51
 822:	33 e3       	ldi	r19, 0x33	; 51
 824:	43 e2       	ldi	r20, 0x23	; 35
 826:	50 e4       	ldi	r21, 0x40	; 64
 828:	0e 94 25 05 	call	0xa4a	; 0xa4a <__mulsf3>
 82c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fixunssfsi>
 830:	6c bf       	out	0x3c, r22	; 60
 832:	08 95       	ret

00000834 <__vector_11>:

void __vector_11() __attribute__((signal));

void __vector_11(){
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	2f 93       	push	r18
 840:	3f 93       	push	r19
 842:	4f 93       	push	r20
 844:	5f 93       	push	r21
 846:	6f 93       	push	r22
 848:	7f 93       	push	r23
 84a:	8f 93       	push	r24
 84c:	9f 93       	push	r25
 84e:	af 93       	push	r26
 850:	bf 93       	push	r27
 852:	ef 93       	push	r30
 854:	ff 93       	push	r31
	ptr_t0();
 856:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <ptr_t0>
 85a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <ptr_t0+0x1>
 85e:	09 95       	icall
}
 860:	ff 91       	pop	r31
 862:	ef 91       	pop	r30
 864:	bf 91       	pop	r27
 866:	af 91       	pop	r26
 868:	9f 91       	pop	r25
 86a:	8f 91       	pop	r24
 86c:	7f 91       	pop	r23
 86e:	6f 91       	pop	r22
 870:	5f 91       	pop	r21
 872:	4f 91       	pop	r20
 874:	3f 91       	pop	r19
 876:	2f 91       	pop	r18
 878:	0f 90       	pop	r0
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	0f 90       	pop	r0
 87e:	1f 90       	pop	r1
 880:	18 95       	reti

00000882 <__vector_10>:

void __vector_10() __attribute__((signal));

void __vector_10(){
 882:	1f 92       	push	r1
 884:	0f 92       	push	r0
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	0f 92       	push	r0
 88a:	11 24       	eor	r1, r1
 88c:	2f 93       	push	r18
 88e:	3f 93       	push	r19
 890:	4f 93       	push	r20
 892:	5f 93       	push	r21
 894:	6f 93       	push	r22
 896:	7f 93       	push	r23
 898:	8f 93       	push	r24
 89a:	9f 93       	push	r25
 89c:	af 93       	push	r26
 89e:	bf 93       	push	r27
 8a0:	ef 93       	push	r30
 8a2:	ff 93       	push	r31
	ptr_t0();
 8a4:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <ptr_t0>
 8a8:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <ptr_t0+0x1>
 8ac:	09 95       	icall
}
 8ae:	ff 91       	pop	r31
 8b0:	ef 91       	pop	r30
 8b2:	bf 91       	pop	r27
 8b4:	af 91       	pop	r26
 8b6:	9f 91       	pop	r25
 8b8:	8f 91       	pop	r24
 8ba:	7f 91       	pop	r23
 8bc:	6f 91       	pop	r22
 8be:	5f 91       	pop	r21
 8c0:	4f 91       	pop	r20
 8c2:	3f 91       	pop	r19
 8c4:	2f 91       	pop	r18
 8c6:	0f 90       	pop	r0
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	0f 90       	pop	r0
 8cc:	1f 90       	pop	r1
 8ce:	18 95       	reti

000008d0 <__fixunssfsi>:
 8d0:	0e 94 04 05 	call	0xa08	; 0xa08 <__fp_splitA>
 8d4:	88 f0       	brcs	.+34     	; 0x8f8 <__fixunssfsi+0x28>
 8d6:	9f 57       	subi	r25, 0x7F	; 127
 8d8:	98 f0       	brcs	.+38     	; 0x900 <__fixunssfsi+0x30>
 8da:	b9 2f       	mov	r27, r25
 8dc:	99 27       	eor	r25, r25
 8de:	b7 51       	subi	r27, 0x17	; 23
 8e0:	b0 f0       	brcs	.+44     	; 0x90e <__fixunssfsi+0x3e>
 8e2:	e1 f0       	breq	.+56     	; 0x91c <__fixunssfsi+0x4c>
 8e4:	66 0f       	add	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	1a f0       	brmi	.+6      	; 0x8f4 <__fixunssfsi+0x24>
 8ee:	ba 95       	dec	r27
 8f0:	c9 f7       	brne	.-14     	; 0x8e4 <__fixunssfsi+0x14>
 8f2:	14 c0       	rjmp	.+40     	; 0x91c <__fixunssfsi+0x4c>
 8f4:	b1 30       	cpi	r27, 0x01	; 1
 8f6:	91 f0       	breq	.+36     	; 0x91c <__fixunssfsi+0x4c>
 8f8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__fp_zero>
 8fc:	b1 e0       	ldi	r27, 0x01	; 1
 8fe:	08 95       	ret
 900:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_zero>
 904:	67 2f       	mov	r22, r23
 906:	78 2f       	mov	r23, r24
 908:	88 27       	eor	r24, r24
 90a:	b8 5f       	subi	r27, 0xF8	; 248
 90c:	39 f0       	breq	.+14     	; 0x91c <__fixunssfsi+0x4c>
 90e:	b9 3f       	cpi	r27, 0xF9	; 249
 910:	cc f3       	brlt	.-14     	; 0x904 <__fixunssfsi+0x34>
 912:	86 95       	lsr	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b3 95       	inc	r27
 91a:	d9 f7       	brne	.-10     	; 0x912 <__fixunssfsi+0x42>
 91c:	3e f4       	brtc	.+14     	; 0x92c <__fixunssfsi+0x5c>
 91e:	90 95       	com	r25
 920:	80 95       	com	r24
 922:	70 95       	com	r23
 924:	61 95       	neg	r22
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	8f 4f       	sbci	r24, 0xFF	; 255
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	08 95       	ret

0000092e <__floatunsisf>:
 92e:	e8 94       	clt
 930:	09 c0       	rjmp	.+18     	; 0x944 <__floatsisf+0x12>

00000932 <__floatsisf>:
 932:	97 fb       	bst	r25, 7
 934:	3e f4       	brtc	.+14     	; 0x944 <__floatsisf+0x12>
 936:	90 95       	com	r25
 938:	80 95       	com	r24
 93a:	70 95       	com	r23
 93c:	61 95       	neg	r22
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	99 23       	and	r25, r25
 946:	a9 f0       	breq	.+42     	; 0x972 <__floatsisf+0x40>
 948:	f9 2f       	mov	r31, r25
 94a:	96 e9       	ldi	r25, 0x96	; 150
 94c:	bb 27       	eor	r27, r27
 94e:	93 95       	inc	r25
 950:	f6 95       	lsr	r31
 952:	87 95       	ror	r24
 954:	77 95       	ror	r23
 956:	67 95       	ror	r22
 958:	b7 95       	ror	r27
 95a:	f1 11       	cpse	r31, r1
 95c:	f8 cf       	rjmp	.-16     	; 0x94e <__floatsisf+0x1c>
 95e:	fa f4       	brpl	.+62     	; 0x99e <__floatsisf+0x6c>
 960:	bb 0f       	add	r27, r27
 962:	11 f4       	brne	.+4      	; 0x968 <__floatsisf+0x36>
 964:	60 ff       	sbrs	r22, 0
 966:	1b c0       	rjmp	.+54     	; 0x99e <__floatsisf+0x6c>
 968:	6f 5f       	subi	r22, 0xFF	; 255
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	16 c0       	rjmp	.+44     	; 0x99e <__floatsisf+0x6c>
 972:	88 23       	and	r24, r24
 974:	11 f0       	breq	.+4      	; 0x97a <__floatsisf+0x48>
 976:	96 e9       	ldi	r25, 0x96	; 150
 978:	11 c0       	rjmp	.+34     	; 0x99c <__floatsisf+0x6a>
 97a:	77 23       	and	r23, r23
 97c:	21 f0       	breq	.+8      	; 0x986 <__floatsisf+0x54>
 97e:	9e e8       	ldi	r25, 0x8E	; 142
 980:	87 2f       	mov	r24, r23
 982:	76 2f       	mov	r23, r22
 984:	05 c0       	rjmp	.+10     	; 0x990 <__floatsisf+0x5e>
 986:	66 23       	and	r22, r22
 988:	71 f0       	breq	.+28     	; 0x9a6 <__floatsisf+0x74>
 98a:	96 e8       	ldi	r25, 0x86	; 134
 98c:	86 2f       	mov	r24, r22
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	2a f0       	brmi	.+10     	; 0x99e <__floatsisf+0x6c>
 994:	9a 95       	dec	r25
 996:	66 0f       	add	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	da f7       	brpl	.-10     	; 0x994 <__floatsisf+0x62>
 99e:	88 0f       	add	r24, r24
 9a0:	96 95       	lsr	r25
 9a2:	87 95       	ror	r24
 9a4:	97 f9       	bld	r25, 7
 9a6:	08 95       	ret

000009a8 <__fp_inf>:
 9a8:	97 f9       	bld	r25, 7
 9aa:	9f 67       	ori	r25, 0x7F	; 127
 9ac:	80 e8       	ldi	r24, 0x80	; 128
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	08 95       	ret

000009b4 <__fp_nan>:
 9b4:	9f ef       	ldi	r25, 0xFF	; 255
 9b6:	80 ec       	ldi	r24, 0xC0	; 192
 9b8:	08 95       	ret

000009ba <__fp_pscA>:
 9ba:	00 24       	eor	r0, r0
 9bc:	0a 94       	dec	r0
 9be:	16 16       	cp	r1, r22
 9c0:	17 06       	cpc	r1, r23
 9c2:	18 06       	cpc	r1, r24
 9c4:	09 06       	cpc	r0, r25
 9c6:	08 95       	ret

000009c8 <__fp_pscB>:
 9c8:	00 24       	eor	r0, r0
 9ca:	0a 94       	dec	r0
 9cc:	12 16       	cp	r1, r18
 9ce:	13 06       	cpc	r1, r19
 9d0:	14 06       	cpc	r1, r20
 9d2:	05 06       	cpc	r0, r21
 9d4:	08 95       	ret

000009d6 <__fp_round>:
 9d6:	09 2e       	mov	r0, r25
 9d8:	03 94       	inc	r0
 9da:	00 0c       	add	r0, r0
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <__fp_round+0xc>
 9de:	88 23       	and	r24, r24
 9e0:	52 f0       	brmi	.+20     	; 0x9f6 <__fp_round+0x20>
 9e2:	bb 0f       	add	r27, r27
 9e4:	40 f4       	brcc	.+16     	; 0x9f6 <__fp_round+0x20>
 9e6:	bf 2b       	or	r27, r31
 9e8:	11 f4       	brne	.+4      	; 0x9ee <__fp_round+0x18>
 9ea:	60 ff       	sbrs	r22, 0
 9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <__fp_round+0x20>
 9ee:	6f 5f       	subi	r22, 0xFF	; 255
 9f0:	7f 4f       	sbci	r23, 0xFF	; 255
 9f2:	8f 4f       	sbci	r24, 0xFF	; 255
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	08 95       	ret

000009f8 <__fp_split3>:
 9f8:	57 fd       	sbrc	r21, 7
 9fa:	90 58       	subi	r25, 0x80	; 128
 9fc:	44 0f       	add	r20, r20
 9fe:	55 1f       	adc	r21, r21
 a00:	59 f0       	breq	.+22     	; 0xa18 <__fp_splitA+0x10>
 a02:	5f 3f       	cpi	r21, 0xFF	; 255
 a04:	71 f0       	breq	.+28     	; 0xa22 <__fp_splitA+0x1a>
 a06:	47 95       	ror	r20

00000a08 <__fp_splitA>:
 a08:	88 0f       	add	r24, r24
 a0a:	97 fb       	bst	r25, 7
 a0c:	99 1f       	adc	r25, r25
 a0e:	61 f0       	breq	.+24     	; 0xa28 <__fp_splitA+0x20>
 a10:	9f 3f       	cpi	r25, 0xFF	; 255
 a12:	79 f0       	breq	.+30     	; 0xa32 <__fp_splitA+0x2a>
 a14:	87 95       	ror	r24
 a16:	08 95       	ret
 a18:	12 16       	cp	r1, r18
 a1a:	13 06       	cpc	r1, r19
 a1c:	14 06       	cpc	r1, r20
 a1e:	55 1f       	adc	r21, r21
 a20:	f2 cf       	rjmp	.-28     	; 0xa06 <__fp_split3+0xe>
 a22:	46 95       	lsr	r20
 a24:	f1 df       	rcall	.-30     	; 0xa08 <__fp_splitA>
 a26:	08 c0       	rjmp	.+16     	; 0xa38 <__fp_splitA+0x30>
 a28:	16 16       	cp	r1, r22
 a2a:	17 06       	cpc	r1, r23
 a2c:	18 06       	cpc	r1, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	f1 cf       	rjmp	.-30     	; 0xa14 <__fp_splitA+0xc>
 a32:	86 95       	lsr	r24
 a34:	71 05       	cpc	r23, r1
 a36:	61 05       	cpc	r22, r1
 a38:	08 94       	sec
 a3a:	08 95       	ret

00000a3c <__fp_zero>:
 a3c:	e8 94       	clt

00000a3e <__fp_szero>:
 a3e:	bb 27       	eor	r27, r27
 a40:	66 27       	eor	r22, r22
 a42:	77 27       	eor	r23, r23
 a44:	cb 01       	movw	r24, r22
 a46:	97 f9       	bld	r25, 7
 a48:	08 95       	ret

00000a4a <__mulsf3>:
 a4a:	0e 94 38 05 	call	0xa70	; 0xa70 <__mulsf3x>
 a4e:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_round>
 a52:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fp_pscA>
 a56:	38 f0       	brcs	.+14     	; 0xa66 <__mulsf3+0x1c>
 a58:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_pscB>
 a5c:	20 f0       	brcs	.+8      	; 0xa66 <__mulsf3+0x1c>
 a5e:	95 23       	and	r25, r21
 a60:	11 f0       	breq	.+4      	; 0xa66 <__mulsf3+0x1c>
 a62:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_inf>
 a66:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_nan>
 a6a:	11 24       	eor	r1, r1
 a6c:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_szero>

00000a70 <__mulsf3x>:
 a70:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fp_split3>
 a74:	70 f3       	brcs	.-36     	; 0xa52 <__mulsf3+0x8>

00000a76 <__mulsf3_pse>:
 a76:	95 9f       	mul	r25, r21
 a78:	c1 f3       	breq	.-16     	; 0xa6a <__mulsf3+0x20>
 a7a:	95 0f       	add	r25, r21
 a7c:	50 e0       	ldi	r21, 0x00	; 0
 a7e:	55 1f       	adc	r21, r21
 a80:	62 9f       	mul	r22, r18
 a82:	f0 01       	movw	r30, r0
 a84:	72 9f       	mul	r23, r18
 a86:	bb 27       	eor	r27, r27
 a88:	f0 0d       	add	r31, r0
 a8a:	b1 1d       	adc	r27, r1
 a8c:	63 9f       	mul	r22, r19
 a8e:	aa 27       	eor	r26, r26
 a90:	f0 0d       	add	r31, r0
 a92:	b1 1d       	adc	r27, r1
 a94:	aa 1f       	adc	r26, r26
 a96:	64 9f       	mul	r22, r20
 a98:	66 27       	eor	r22, r22
 a9a:	b0 0d       	add	r27, r0
 a9c:	a1 1d       	adc	r26, r1
 a9e:	66 1f       	adc	r22, r22
 aa0:	82 9f       	mul	r24, r18
 aa2:	22 27       	eor	r18, r18
 aa4:	b0 0d       	add	r27, r0
 aa6:	a1 1d       	adc	r26, r1
 aa8:	62 1f       	adc	r22, r18
 aaa:	73 9f       	mul	r23, r19
 aac:	b0 0d       	add	r27, r0
 aae:	a1 1d       	adc	r26, r1
 ab0:	62 1f       	adc	r22, r18
 ab2:	83 9f       	mul	r24, r19
 ab4:	a0 0d       	add	r26, r0
 ab6:	61 1d       	adc	r22, r1
 ab8:	22 1f       	adc	r18, r18
 aba:	74 9f       	mul	r23, r20
 abc:	33 27       	eor	r19, r19
 abe:	a0 0d       	add	r26, r0
 ac0:	61 1d       	adc	r22, r1
 ac2:	23 1f       	adc	r18, r19
 ac4:	84 9f       	mul	r24, r20
 ac6:	60 0d       	add	r22, r0
 ac8:	21 1d       	adc	r18, r1
 aca:	82 2f       	mov	r24, r18
 acc:	76 2f       	mov	r23, r22
 ace:	6a 2f       	mov	r22, r26
 ad0:	11 24       	eor	r1, r1
 ad2:	9f 57       	subi	r25, 0x7F	; 127
 ad4:	50 40       	sbci	r21, 0x00	; 0
 ad6:	9a f0       	brmi	.+38     	; 0xafe <__mulsf3_pse+0x88>
 ad8:	f1 f0       	breq	.+60     	; 0xb16 <__mulsf3_pse+0xa0>
 ada:	88 23       	and	r24, r24
 adc:	4a f0       	brmi	.+18     	; 0xaf0 <__mulsf3_pse+0x7a>
 ade:	ee 0f       	add	r30, r30
 ae0:	ff 1f       	adc	r31, r31
 ae2:	bb 1f       	adc	r27, r27
 ae4:	66 1f       	adc	r22, r22
 ae6:	77 1f       	adc	r23, r23
 ae8:	88 1f       	adc	r24, r24
 aea:	91 50       	subi	r25, 0x01	; 1
 aec:	50 40       	sbci	r21, 0x00	; 0
 aee:	a9 f7       	brne	.-22     	; 0xada <__mulsf3_pse+0x64>
 af0:	9e 3f       	cpi	r25, 0xFE	; 254
 af2:	51 05       	cpc	r21, r1
 af4:	80 f0       	brcs	.+32     	; 0xb16 <__mulsf3_pse+0xa0>
 af6:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_inf>
 afa:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_szero>
 afe:	5f 3f       	cpi	r21, 0xFF	; 255
 b00:	e4 f3       	brlt	.-8      	; 0xafa <__mulsf3_pse+0x84>
 b02:	98 3e       	cpi	r25, 0xE8	; 232
 b04:	d4 f3       	brlt	.-12     	; 0xafa <__mulsf3_pse+0x84>
 b06:	86 95       	lsr	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b7 95       	ror	r27
 b0e:	f7 95       	ror	r31
 b10:	e7 95       	ror	r30
 b12:	9f 5f       	subi	r25, 0xFF	; 255
 b14:	c1 f7       	brne	.-16     	; 0xb06 <__mulsf3_pse+0x90>
 b16:	fe 2b       	or	r31, r30
 b18:	88 0f       	add	r24, r24
 b1a:	91 1d       	adc	r25, r1
 b1c:	96 95       	lsr	r25
 b1e:	87 95       	ror	r24
 b20:	97 f9       	bld	r25, 7
 b22:	08 95       	ret

00000b24 <__udivmodsi4>:
 b24:	a1 e2       	ldi	r26, 0x21	; 33
 b26:	1a 2e       	mov	r1, r26
 b28:	aa 1b       	sub	r26, r26
 b2a:	bb 1b       	sub	r27, r27
 b2c:	fd 01       	movw	r30, r26
 b2e:	0d c0       	rjmp	.+26     	; 0xb4a <__udivmodsi4_ep>

00000b30 <__udivmodsi4_loop>:
 b30:	aa 1f       	adc	r26, r26
 b32:	bb 1f       	adc	r27, r27
 b34:	ee 1f       	adc	r30, r30
 b36:	ff 1f       	adc	r31, r31
 b38:	a2 17       	cp	r26, r18
 b3a:	b3 07       	cpc	r27, r19
 b3c:	e4 07       	cpc	r30, r20
 b3e:	f5 07       	cpc	r31, r21
 b40:	20 f0       	brcs	.+8      	; 0xb4a <__udivmodsi4_ep>
 b42:	a2 1b       	sub	r26, r18
 b44:	b3 0b       	sbc	r27, r19
 b46:	e4 0b       	sbc	r30, r20
 b48:	f5 0b       	sbc	r31, r21

00000b4a <__udivmodsi4_ep>:
 b4a:	66 1f       	adc	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	1a 94       	dec	r1
 b54:	69 f7       	brne	.-38     	; 0xb30 <__udivmodsi4_loop>
 b56:	60 95       	com	r22
 b58:	70 95       	com	r23
 b5a:	80 95       	com	r24
 b5c:	90 95       	com	r25
 b5e:	9b 01       	movw	r18, r22
 b60:	ac 01       	movw	r20, r24
 b62:	bd 01       	movw	r22, r26
 b64:	cf 01       	movw	r24, r30
 b66:	08 95       	ret

00000b68 <__divmodsi4>:
 b68:	05 2e       	mov	r0, r21
 b6a:	97 fb       	bst	r25, 7
 b6c:	1e f4       	brtc	.+6      	; 0xb74 <__divmodsi4+0xc>
 b6e:	00 94       	com	r0
 b70:	0e 94 cb 05 	call	0xb96	; 0xb96 <__negsi2>
 b74:	57 fd       	sbrc	r21, 7
 b76:	07 d0       	rcall	.+14     	; 0xb86 <__divmodsi4_neg2>
 b78:	0e 94 92 05 	call	0xb24	; 0xb24 <__udivmodsi4>
 b7c:	07 fc       	sbrc	r0, 7
 b7e:	03 d0       	rcall	.+6      	; 0xb86 <__divmodsi4_neg2>
 b80:	4e f4       	brtc	.+18     	; 0xb94 <__divmodsi4_exit>
 b82:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__negsi2>

00000b86 <__divmodsi4_neg2>:
 b86:	50 95       	com	r21
 b88:	40 95       	com	r20
 b8a:	30 95       	com	r19
 b8c:	21 95       	neg	r18
 b8e:	3f 4f       	sbci	r19, 0xFF	; 255
 b90:	4f 4f       	sbci	r20, 0xFF	; 255
 b92:	5f 4f       	sbci	r21, 0xFF	; 255

00000b94 <__divmodsi4_exit>:
 b94:	08 95       	ret

00000b96 <__negsi2>:
 b96:	90 95       	com	r25
 b98:	80 95       	com	r24
 b9a:	70 95       	com	r23
 b9c:	61 95       	neg	r22
 b9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ba0:	8f 4f       	sbci	r24, 0xFF	; 255
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	08 95       	ret

00000ba6 <_exit>:
 ba6:	f8 94       	cli

00000ba8 <__stop_program>:
 ba8:	ff cf       	rjmp	.-2      	; 0xba8 <__stop_program>
