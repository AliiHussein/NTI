
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000abf  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000730  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d8  00000000  00000000  0000153b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049c  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000044a  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000023d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <led_init>:
void led_on(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, HIGH);
}

void led_off(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, LOW);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	0e 94 83 00 	call	0x106	; 0x106 <DIO_voidSetPinDirection>
  72:	08 95       	ret

00000074 <led_toggle>:
}

void led_toggle(uint8 copy_u8PortID, uint8 copy_u8PinID){
	switch(copy_u8PortID){
  74:	82 34       	cpi	r24, 0x42	; 66
  76:	a1 f0       	breq	.+40     	; 0xa0 <led_toggle+0x2c>
  78:	18 f4       	brcc	.+6      	; 0x80 <led_toggle+0xc>
  7a:	81 34       	cpi	r24, 0x41	; 65
  7c:	31 f0       	breq	.+12     	; 0x8a <led_toggle+0x16>
  7e:	08 95       	ret
  80:	83 34       	cpi	r24, 0x43	; 67
  82:	c9 f0       	breq	.+50     	; 0xb6 <led_toggle+0x42>
  84:	84 34       	cpi	r24, 0x44	; 68
  86:	11 f1       	breq	.+68     	; 0xcc <led_toggle+0x58>
  88:	08 95       	ret
		case portA: TOGBIT(PORTA, copy_u8PinID); break;
  8a:	2b b3       	in	r18, 0x1b	; 27
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <led_toggle+0x22>
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	6a 95       	dec	r22
  98:	e2 f7       	brpl	.-8      	; 0x92 <led_toggle+0x1e>
  9a:	82 27       	eor	r24, r18
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	08 95       	ret
		case portB: TOGBIT(PORTB, copy_u8PinID); break;
  a0:	28 b3       	in	r18, 0x18	; 24
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <led_toggle+0x38>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <led_toggle+0x34>
  b0:	82 27       	eor	r24, r18
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	08 95       	ret
		case portC: TOGBIT(PORTC, copy_u8PinID); break;
  b6:	25 b3       	in	r18, 0x15	; 21
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <led_toggle+0x4e>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <led_toggle+0x4a>
  c6:	82 27       	eor	r24, r18
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	08 95       	ret
		case portD: TOGBIT(PORTD, copy_u8PinID); break;
  cc:	22 b3       	in	r18, 0x12	; 18
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <led_toggle+0x64>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <led_toggle+0x60>
  dc:	82 27       	eor	r24, r18
  de:	82 bb       	out	0x12, r24	; 18
  e0:	08 95       	ret

000000e2 <main>:
#include "HAL/LED.h"
#include "MCAL/DIO.h"

int main(void)
{
	led_init(portA, 7);
  e2:	67 e0       	ldi	r22, 0x07	; 7
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <led_init>
	while(1){
		
		led_toggle(portA, 7);
  ea:	67 e0       	ldi	r22, 0x07	; 7
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 3a 00 	call	0x74	; 0x74 <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	83 ed       	ldi	r24, 0xD3	; 211
  f6:	90 e3       	ldi	r25, 0x30	; 48
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x16>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x20>
 102:	00 00       	nop
 104:	f2 cf       	rjmp	.-28     	; 0xea <main+0x8>

00000106 <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinDir){
	
	if(Copy_u8PinDir == INPUT){ // input
 106:	41 11       	cpse	r20, r1
 108:	3b c0       	rjmp	.+118    	; 0x180 <DIO_voidSetPinDirection+0x7a>
		switch(copy_u8PortID){
 10a:	82 34       	cpi	r24, 0x42	; 66
 10c:	a9 f0       	breq	.+42     	; 0x138 <DIO_voidSetPinDirection+0x32>
 10e:	18 f4       	brcc	.+6      	; 0x116 <DIO_voidSetPinDirection+0x10>
 110:	81 34       	cpi	r24, 0x41	; 65
 112:	31 f0       	breq	.+12     	; 0x120 <DIO_voidSetPinDirection+0x1a>
 114:	08 95       	ret
 116:	83 34       	cpi	r24, 0x43	; 67
 118:	d9 f0       	breq	.+54     	; 0x150 <DIO_voidSetPinDirection+0x4a>
 11a:	84 34       	cpi	r24, 0x44	; 68
 11c:	29 f1       	breq	.+74     	; 0x168 <DIO_voidSetPinDirection+0x62>
 11e:	08 95       	ret
			case portA: CLRBIT(DDRA, copy_u8PinID); break;
 120:	2a b3       	in	r18, 0x1a	; 26
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_voidSetPinDirection+0x26>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_voidSetPinDirection+0x22>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	8a bb       	out	0x1a, r24	; 26
 136:	08 95       	ret
			case portB: CLRBIT(DDRB, copy_u8PinID); break;
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_voidSetPinDirection+0x3e>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_voidSetPinDirection+0x3a>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	87 bb       	out	0x17, r24	; 23
 14e:	08 95       	ret
			case portC: CLRBIT(DDRC, copy_u8PinID); break;
 150:	24 b3       	in	r18, 0x14	; 20
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_voidSetPinDirection+0x56>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_voidSetPinDirection+0x52>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	84 bb       	out	0x14, r24	; 20
 166:	08 95       	ret
			case portD: CLRBIT(DDRD, copy_u8PinID); break;
 168:	21 b3       	in	r18, 0x11	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_voidSetPinDirection+0x6e>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_voidSetPinDirection+0x6a>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
 180:	82 34       	cpi	r24, 0x42	; 66
 182:	a1 f0       	breq	.+40     	; 0x1ac <DIO_voidSetPinDirection+0xa6>
 184:	18 f4       	brcc	.+6      	; 0x18c <DIO_voidSetPinDirection+0x86>
 186:	81 34       	cpi	r24, 0x41	; 65
 188:	31 f0       	breq	.+12     	; 0x196 <DIO_voidSetPinDirection+0x90>
 18a:	08 95       	ret
 18c:	83 34       	cpi	r24, 0x43	; 67
 18e:	c9 f0       	breq	.+50     	; 0x1c2 <DIO_voidSetPinDirection+0xbc>
 190:	84 34       	cpi	r24, 0x44	; 68
 192:	11 f1       	breq	.+68     	; 0x1d8 <DIO_voidSetPinDirection+0xd2>
 194:	08 95       	ret
			case portA: SETBIT(DDRA, copy_u8PinID); break;
 196:	2a b3       	in	r18, 0x1a	; 26
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_voidSetPinDirection+0x9c>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_voidSetPinDirection+0x98>
 1a6:	82 2b       	or	r24, r18
 1a8:	8a bb       	out	0x1a, r24	; 26
 1aa:	08 95       	ret
			case portB: SETBIT(DDRB, copy_u8PinID); break;
 1ac:	27 b3       	in	r18, 0x17	; 23
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_voidSetPinDirection+0xb2>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_voidSetPinDirection+0xae>
 1bc:	82 2b       	or	r24, r18
 1be:	87 bb       	out	0x17, r24	; 23
 1c0:	08 95       	ret
			case portC: SETBIT(DDRC, copy_u8PinID); break;
 1c2:	24 b3       	in	r18, 0x14	; 20
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_voidSetPinDirection+0xc8>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_voidSetPinDirection+0xc4>
 1d2:	82 2b       	or	r24, r18
 1d4:	84 bb       	out	0x14, r24	; 20
 1d6:	08 95       	ret
			case portD: SETBIT(DDRD, copy_u8PinID); break;
 1d8:	21 b3       	in	r18, 0x11	; 17
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_voidSetPinDirection+0xde>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_voidSetPinDirection+0xda>
 1e8:	82 2b       	or	r24, r18
 1ea:	81 bb       	out	0x11, r24	; 17
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
