
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d1  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032a  00000000  00000000  00001193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000199  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	7c 00       	.word	0x007c	; ????
  56:	89 00       	.word	0x0089	; ????
  58:	96 00       	.word	0x0096	; ????
  5a:	a3 00       	.word	0x00a3	; ????
  5c:	b0 00       	.word	0x00b0	; ????
  5e:	bd 00       	.word	0x00bd	; ????
  60:	ca 00       	.word	0x00ca	; ????
  62:	d7 00       	.word	0x00d7	; ????
  64:	e4 00       	.word	0x00e4	; ????
  66:	f1 00       	.word	0x00f1	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 04 01 	call	0x208	; 0x208 <main>
  78:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <sevenseg_init>:
 */ 

#include "SevenSeg.h"

void sevenseg_init(){
	SEVEN_SEG_INIT_PORTS();
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	87 bb       	out	0x17, r24	; 23
  84:	88 bb       	out	0x18, r24	; 24
  86:	8a b3       	in	r24, 0x1a	; 26
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	8a bb       	out	0x1a, r24	; 26
  8c:	8a b3       	in	r24, 0x1a	; 26
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	8a bb       	out	0x1a, r24	; 26
  92:	08 95       	ret

00000094 <sevenseg_write>:
	
}

void sevenseg_write(uint8 value, uint8 ss_num){
  94:	e8 2f       	mov	r30, r24
	
	EN1_DIS();EN2_DIS();EN3_DIS();EN4_DIS();
  96:	8b b3       	in	r24, 0x1b	; 27
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	88 bb       	out	0x18, r24	; 24
	
	switch(ss_num){
  ae:	62 30       	cpi	r22, 0x02	; 2
  b0:	69 f0       	breq	.+26     	; 0xcc <sevenseg_write+0x38>
  b2:	18 f4       	brcc	.+6      	; 0xba <sevenseg_write+0x26>
  b4:	61 30       	cpi	r22, 0x01	; 1
  b6:	31 f0       	breq	.+12     	; 0xc4 <sevenseg_write+0x30>
  b8:	14 c0       	rjmp	.+40     	; 0xe2 <sevenseg_write+0x4e>
  ba:	63 30       	cpi	r22, 0x03	; 3
  bc:	59 f0       	breq	.+22     	; 0xd4 <sevenseg_write+0x40>
  be:	64 30       	cpi	r22, 0x04	; 4
  c0:	69 f0       	breq	.+26     	; 0xdc <sevenseg_write+0x48>
  c2:	0f c0       	rjmp	.+30     	; 0xe2 <sevenseg_write+0x4e>
		case 1: EN1_EN(); break;
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	87 7f       	andi	r24, 0xF7	; 247
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	0b c0       	rjmp	.+22     	; 0xe2 <sevenseg_write+0x4e>
		case 2: EN2_EN(); break;
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	07 c0       	rjmp	.+14     	; 0xe2 <sevenseg_write+0x4e>
		case 3: EN3_EN(); break;
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	88 bb       	out	0x18, r24	; 24
  da:	03 c0       	rjmp	.+6      	; 0xe2 <sevenseg_write+0x4e>
		case 4: EN4_EN(); break;
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	8f 7b       	andi	r24, 0xBF	; 191
  e0:	88 bb       	out	0x18, r24	; 24
	}
	
	switch(value){
  e2:	8e 2f       	mov	r24, r30
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	8a 30       	cpi	r24, 0x0A	; 10
  e8:	91 05       	cpc	r25, r1
  ea:	08 f0       	brcs	.+2      	; 0xee <sevenseg_write+0x5a>
  ec:	86 c0       	rjmp	.+268    	; 0x1fa <sevenseg_write+0x166>
  ee:	fc 01       	movw	r30, r24
  f0:	e6 5d       	subi	r30, 0xD6	; 214
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__tablejump2__>
		case 0: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
  f8:	88 b3       	in	r24, 0x18	; 24
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	88 bb       	out	0x18, r24	; 24
 104:	88 b3       	in	r24, 0x18	; 24
 106:	8d 7f       	andi	r24, 0xFD	; 253
 108:	88 bb       	out	0x18, r24	; 24
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	88 bb       	out	0x18, r24	; 24
 110:	74 c0       	rjmp	.+232    	; 0x1fa <sevenseg_write+0x166>
		case 1: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 112:	88 b3       	in	r24, 0x18	; 24
 114:	8f 7e       	andi	r24, 0xEF	; 239
 116:	88 bb       	out	0x18, r24	; 24
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	88 bb       	out	0x18, r24	; 24
 124:	88 b3       	in	r24, 0x18	; 24
 126:	81 60       	ori	r24, 0x01	; 1
 128:	88 bb       	out	0x18, r24	; 24
 12a:	67 c0       	rjmp	.+206    	; 0x1fa <sevenseg_write+0x166>
		case 2: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); SETBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	8f 7e       	andi	r24, 0xEF	; 239
 130:	88 bb       	out	0x18, r24	; 24
 132:	88 b3       	in	r24, 0x18	; 24
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	88 bb       	out	0x18, r24	; 24
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	8e 7f       	andi	r24, 0xFE	; 254
 142:	88 bb       	out	0x18, r24	; 24
 144:	5a c0       	rjmp	.+180    	; 0x1fa <sevenseg_write+0x166>
		case 3: CLRBIT(PORTB, 4); CLRBIT(PORTB, 2); SETBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 146:	88 b3       	in	r24, 0x18	; 24
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	8b 7f       	andi	r24, 0xFB	; 251
 150:	88 bb       	out	0x18, r24	; 24
 152:	88 b3       	in	r24, 0x18	; 24
 154:	82 60       	ori	r24, 0x02	; 2
 156:	88 bb       	out	0x18, r24	; 24
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	4d c0       	rjmp	.+154    	; 0x1fa <sevenseg_write+0x166>
		case 4: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); CLRBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 160:	88 b3       	in	r24, 0x18	; 24
 162:	8f 7e       	andi	r24, 0xEF	; 239
 164:	88 bb       	out	0x18, r24	; 24
 166:	88 b3       	in	r24, 0x18	; 24
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	88 bb       	out	0x18, r24	; 24
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	8d 7f       	andi	r24, 0xFD	; 253
 170:	88 bb       	out	0x18, r24	; 24
 172:	88 b3       	in	r24, 0x18	; 24
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	88 bb       	out	0x18, r24	; 24
 178:	40 c0       	rjmp	.+128    	; 0x1fa <sevenseg_write+0x166>
		case 5: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); CLRBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 17a:	88 b3       	in	r24, 0x18	; 24
 17c:	8f 7e       	andi	r24, 0xEF	; 239
 17e:	88 bb       	out	0x18, r24	; 24
 180:	88 b3       	in	r24, 0x18	; 24
 182:	84 60       	ori	r24, 0x04	; 4
 184:	88 bb       	out	0x18, r24	; 24
 186:	88 b3       	in	r24, 0x18	; 24
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	88 bb       	out	0x18, r24	; 24
 18c:	88 b3       	in	r24, 0x18	; 24
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	88 bb       	out	0x18, r24	; 24
 192:	33 c0       	rjmp	.+102    	; 0x1fa <sevenseg_write+0x166>
		case 6: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); SETBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 194:	88 b3       	in	r24, 0x18	; 24
 196:	8f 7e       	andi	r24, 0xEF	; 239
 198:	88 bb       	out	0x18, r24	; 24
 19a:	88 b3       	in	r24, 0x18	; 24
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	88 bb       	out	0x18, r24	; 24
 1a0:	88 b3       	in	r24, 0x18	; 24
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	88 bb       	out	0x18, r24	; 24
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	8e 7f       	andi	r24, 0xFE	; 254
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	26 c0       	rjmp	.+76     	; 0x1fa <sevenseg_write+0x166>
		case 7: CLRBIT(PORTB, 4); SETBIT(PORTB, 2); SETBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	88 b3       	in	r24, 0x18	; 24
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	88 bb       	out	0x18, r24	; 24
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	19 c0       	rjmp	.+50     	; 0x1fa <sevenseg_write+0x166>
		case 8: SETBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); CLRBIT(PORTB, 0); break;
 1c8:	88 b3       	in	r24, 0x18	; 24
 1ca:	80 61       	ori	r24, 0x10	; 16
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	88 b3       	in	r24, 0x18	; 24
 1d0:	8b 7f       	andi	r24, 0xFB	; 251
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	88 b3       	in	r24, 0x18	; 24
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	88 b3       	in	r24, 0x18	; 24
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <sevenseg_write+0x166>
		case 9: SETBIT(PORTB, 4); CLRBIT(PORTB, 2); CLRBIT(PORTB, 1); SETBIT(PORTB, 0); break;
 1e2:	88 b3       	in	r24, 0x18	; 24
 1e4:	80 61       	ori	r24, 0x10	; 16
 1e6:	88 bb       	out	0x18, r24	; 24
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	88 bb       	out	0x18, r24	; 24
 1ee:	88 b3       	in	r24, 0x18	; 24
 1f0:	8d 7f       	andi	r24, 0xFD	; 253
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8f e9       	ldi	r24, 0x9F	; 159
 1fc:	9f e0       	ldi	r25, 0x0F	; 15
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <sevenseg_write+0x16a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <sevenseg_write+0x170>
 204:	00 00       	nop
 206:	08 95       	ret

00000208 <main>:
#include "MCAL/DIO.h"
#include "HAL/Button.h"

int main(void)
{
	sevenseg_init();
 208:	0e 94 40 00 	call	0x80	; 0x80 <sevenseg_init>
	uint16 value = 1260;
	uint16 temp;
	while(1){
		temp = value;
		sevenseg_write(temp%10, 1);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 4a 00 	call	0x94	; 0x94 <sevenseg_write>
		temp /= 10;
		sevenseg_write(temp%10, 2);
 218:	62 e0       	ldi	r22, 0x02	; 2
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 4a 00 	call	0x94	; 0x94 <sevenseg_write>
		temp /= 10;
		sevenseg_write(temp%10, 3);
 224:	63 e0       	ldi	r22, 0x03	; 3
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 4a 00 	call	0x94	; 0x94 <sevenseg_write>
		temp /= 10;
		sevenseg_write(temp%10, 4);
 230:	64 e0       	ldi	r22, 0x04	; 4
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 4a 00 	call	0x94	; 0x94 <sevenseg_write>
 23c:	e7 cf       	rjmp	.-50     	; 0x20c <main+0x4>

0000023e <__tablejump2__>:
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	05 90       	lpm	r0, Z+
 244:	f4 91       	lpm	r31, Z
 246:	e0 2d       	mov	r30, r0
 248:	09 94       	ijmp

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
