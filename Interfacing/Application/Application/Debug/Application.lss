
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000003e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9e  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d1  00000000  00000000  000011ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000589  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00001f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fa  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d8  00000000  00000000  0000263e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002e16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_1>
   8:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_2>
   c:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <led_init>:
 */ 

#include "LED.h"

void led_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_voidSetPinDirection>
  98:	08 95       	ret

0000009a <led_on>:
}

void led_on(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, HIGH);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_voidSetPinValue>
  a0:	08 95       	ret

000000a2 <main>:
#include "MCAL/GIE/GIE_Interface.h"
#include "MCAL/ADC/ADC_Interface.h"

int main(void)
{	
	led_init(portD, 5);
  a2:	65 e0       	ldi	r22, 0x05	; 5
  a4:	84 e4       	ldi	r24, 0x44	; 68
  a6:	0e 94 49 00 	call	0x92	; 0x92 <led_init>
	led_on(portD, 5);	
  aa:	65 e0       	ldi	r22, 0x05	; 5
  ac:	84 e4       	ldi	r24, 0x44	; 68
  ae:	0e 94 4d 00 	call	0x9a	; 0x9a <led_on>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x10>

000000b4 <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinDir){
	
	if(Copy_u8PinDir == INPUT){ // input
  b4:	41 11       	cpse	r20, r1
  b6:	3b c0       	rjmp	.+118    	; 0x12e <DIO_voidSetPinDirection+0x7a>
		switch(copy_u8PortID){
  b8:	82 34       	cpi	r24, 0x42	; 66
  ba:	a9 f0       	breq	.+42     	; 0xe6 <DIO_voidSetPinDirection+0x32>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <DIO_voidSetPinDirection+0x10>
  be:	81 34       	cpi	r24, 0x41	; 65
  c0:	31 f0       	breq	.+12     	; 0xce <DIO_voidSetPinDirection+0x1a>
  c2:	08 95       	ret
  c4:	83 34       	cpi	r24, 0x43	; 67
  c6:	d9 f0       	breq	.+54     	; 0xfe <DIO_voidSetPinDirection+0x4a>
  c8:	84 34       	cpi	r24, 0x44	; 68
  ca:	29 f1       	breq	.+74     	; 0x116 <DIO_voidSetPinDirection+0x62>
  cc:	08 95       	ret
			case portA: CLRBIT(DDRA, copy_u8PinID); break;
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinDirection+0x26>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinDirection+0x22>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	8a bb       	out	0x1a, r24	; 26
  e4:	08 95       	ret
			case portB: CLRBIT(DDRB, copy_u8PinID); break;
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_voidSetPinDirection+0x3e>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_voidSetPinDirection+0x3a>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
			case portC: CLRBIT(DDRC, copy_u8PinID); break;
  fe:	24 b3       	in	r18, 0x14	; 20
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_voidSetPinDirection+0x56>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_voidSetPinDirection+0x52>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	84 bb       	out	0x14, r24	; 20
 114:	08 95       	ret
			case portD: CLRBIT(DDRD, copy_u8PinID); break;
 116:	21 b3       	in	r18, 0x11	; 17
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_voidSetPinDirection+0x6e>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_voidSetPinDirection+0x6a>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
 12e:	82 34       	cpi	r24, 0x42	; 66
 130:	a1 f0       	breq	.+40     	; 0x15a <DIO_voidSetPinDirection+0xa6>
 132:	18 f4       	brcc	.+6      	; 0x13a <DIO_voidSetPinDirection+0x86>
 134:	81 34       	cpi	r24, 0x41	; 65
 136:	31 f0       	breq	.+12     	; 0x144 <DIO_voidSetPinDirection+0x90>
 138:	08 95       	ret
 13a:	83 34       	cpi	r24, 0x43	; 67
 13c:	c9 f0       	breq	.+50     	; 0x170 <DIO_voidSetPinDirection+0xbc>
 13e:	84 34       	cpi	r24, 0x44	; 68
 140:	11 f1       	breq	.+68     	; 0x186 <DIO_voidSetPinDirection+0xd2>
 142:	08 95       	ret
			case portA: SETBIT(DDRA, copy_u8PinID); break;
 144:	2a b3       	in	r18, 0x1a	; 26
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_voidSetPinDirection+0x9c>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_voidSetPinDirection+0x98>
 154:	82 2b       	or	r24, r18
 156:	8a bb       	out	0x1a, r24	; 26
 158:	08 95       	ret
			case portB: SETBIT(DDRB, copy_u8PinID); break;
 15a:	27 b3       	in	r18, 0x17	; 23
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinDirection+0xb2>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinDirection+0xae>
 16a:	82 2b       	or	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
 16e:	08 95       	ret
			case portC: SETBIT(DDRC, copy_u8PinID); break;
 170:	24 b3       	in	r18, 0x14	; 20
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinDirection+0xc8>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinDirection+0xc4>
 180:	82 2b       	or	r24, r18
 182:	84 bb       	out	0x14, r24	; 20
 184:	08 95       	ret
			case portD: SETBIT(DDRD, copy_u8PinID); break;
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_voidSetPinDirection+0xde>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_voidSetPinDirection+0xda>
 196:	82 2b       	or	r24, r18
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret

0000019c <DIO_voidSetPinValue>:
		}
	}
	
}
void DIO_voidSetPinValue(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinValue){
	if(Copy_u8PinValue == LOW){ // LOW
 19c:	41 11       	cpse	r20, r1
 19e:	3b c0       	rjmp	.+118    	; 0x216 <DIO_voidSetPinValue+0x7a>
		switch(copy_u8PortID){
 1a0:	82 34       	cpi	r24, 0x42	; 66
 1a2:	a9 f0       	breq	.+42     	; 0x1ce <DIO_voidSetPinValue+0x32>
 1a4:	18 f4       	brcc	.+6      	; 0x1ac <DIO_voidSetPinValue+0x10>
 1a6:	81 34       	cpi	r24, 0x41	; 65
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <DIO_voidSetPinValue+0x1a>
 1aa:	08 95       	ret
 1ac:	83 34       	cpi	r24, 0x43	; 67
 1ae:	d9 f0       	breq	.+54     	; 0x1e6 <DIO_voidSetPinValue+0x4a>
 1b0:	84 34       	cpi	r24, 0x44	; 68
 1b2:	29 f1       	breq	.+74     	; 0x1fe <DIO_voidSetPinValue+0x62>
 1b4:	08 95       	ret
			case portA: CLRBIT(PORTA, copy_u8PinID); break;
 1b6:	2b b3       	in	r18, 0x1b	; 27
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_voidSetPinValue+0x26>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_voidSetPinValue+0x22>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	08 95       	ret
			case portB: CLRBIT(PORTB, copy_u8PinID); break;
 1ce:	28 b3       	in	r18, 0x18	; 24
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_voidSetPinValue+0x3e>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_voidSetPinValue+0x3a>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	08 95       	ret
			case portC: CLRBIT(PORTC, copy_u8PinID); break;
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_voidSetPinValue+0x56>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_voidSetPinValue+0x52>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	85 bb       	out	0x15, r24	; 21
 1fc:	08 95       	ret
			case portD: CLRBIT(PORTD, copy_u8PinID); break;
 1fe:	22 b3       	in	r18, 0x12	; 18
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_voidSetPinValue+0x6e>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_voidSetPinValue+0x6a>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	82 bb       	out	0x12, r24	; 18
 214:	08 95       	ret
		}
	}
	else{ // HIGH
		switch(copy_u8PortID){
 216:	82 34       	cpi	r24, 0x42	; 66
 218:	a1 f0       	breq	.+40     	; 0x242 <DIO_voidSetPinValue+0xa6>
 21a:	18 f4       	brcc	.+6      	; 0x222 <DIO_voidSetPinValue+0x86>
 21c:	81 34       	cpi	r24, 0x41	; 65
 21e:	31 f0       	breq	.+12     	; 0x22c <DIO_voidSetPinValue+0x90>
 220:	08 95       	ret
 222:	83 34       	cpi	r24, 0x43	; 67
 224:	c9 f0       	breq	.+50     	; 0x258 <DIO_voidSetPinValue+0xbc>
 226:	84 34       	cpi	r24, 0x44	; 68
 228:	11 f1       	breq	.+68     	; 0x26e <DIO_voidSetPinValue+0xd2>
 22a:	08 95       	ret
			case portA: SETBIT(PORTA, copy_u8PinID); break;
 22c:	2b b3       	in	r18, 0x1b	; 27
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinValue+0x9c>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinValue+0x98>
 23c:	82 2b       	or	r24, r18
 23e:	8b bb       	out	0x1b, r24	; 27
 240:	08 95       	ret
			case portB: SETBIT(PORTB, copy_u8PinID); break;
 242:	28 b3       	in	r18, 0x18	; 24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_voidSetPinValue+0xb2>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_voidSetPinValue+0xae>
 252:	82 2b       	or	r24, r18
 254:	88 bb       	out	0x18, r24	; 24
 256:	08 95       	ret
			case portC: SETBIT(PORTC, copy_u8PinID); break;
 258:	25 b3       	in	r18, 0x15	; 21
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_voidSetPinValue+0xc8>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_voidSetPinValue+0xc4>
 268:	82 2b       	or	r24, r18
 26a:	85 bb       	out	0x15, r24	; 21
 26c:	08 95       	ret
			case portD: SETBIT(PORTD, copy_u8PinID); break;
 26e:	22 b3       	in	r18, 0x12	; 18
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_voidSetPinValue+0xde>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_voidSetPinValue+0xda>
 27e:	82 2b       	or	r24, r18
 280:	82 bb       	out	0x12, r24	; 18
 282:	08 95       	ret

00000284 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
	ptr_EXT1();
 2a6:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr_EXT1>
 2aa:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ptr_EXT1+0x1>
 2ae:	09 95       	icall
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
	ptr_EXT2();
 2f4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ptr_EXT2>
 2f8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ptr_EXT2+0x1>
 2fc:	09 95       	icall
}
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	ptr_EXT3();
 342:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 346:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 34a:	09 95       	icall
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
