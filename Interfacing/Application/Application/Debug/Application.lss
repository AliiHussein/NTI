
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000354  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099d  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042d  00000000  00000000  000014a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000360  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  64:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPortDirection>:
 */ 

#include "DIO.h"

void DIO_voidSetPortDirection(uint8 copy_u8PortID, uint8 copy_u8PortDir){
	if(copy_u8PortDir == INPUT){ // input
  6c:	61 11       	cpse	r22, r1
  6e:	13 c0       	rjmp	.+38     	; 0x96 <DIO_voidSetPortDirection+0x2a>
		switch(copy_u8PortID){
  70:	82 34       	cpi	r24, 0x42	; 66
  72:	59 f0       	breq	.+22     	; 0x8a <DIO_voidSetPortDirection+0x1e>
  74:	18 f4       	brcc	.+6      	; 0x7c <DIO_voidSetPortDirection+0x10>
  76:	81 34       	cpi	r24, 0x41	; 65
  78:	31 f0       	breq	.+12     	; 0x86 <DIO_voidSetPortDirection+0x1a>
  7a:	08 95       	ret
  7c:	83 34       	cpi	r24, 0x43	; 67
  7e:	39 f0       	breq	.+14     	; 0x8e <DIO_voidSetPortDirection+0x22>
  80:	84 34       	cpi	r24, 0x44	; 68
  82:	39 f0       	breq	.+14     	; 0x92 <DIO_voidSetPortDirection+0x26>
  84:	08 95       	ret
			case portA: DDRA = 0; break;
  86:	1a ba       	out	0x1a, r1	; 26
  88:	08 95       	ret
			case portB: DDRB = 0; break;
  8a:	17 ba       	out	0x17, r1	; 23
  8c:	08 95       	ret
			case portC: DDRC = 0; break;
  8e:	14 ba       	out	0x14, r1	; 20
  90:	08 95       	ret
			case portD: DDRD = 0; break;
  92:	11 ba       	out	0x11, r1	; 17
  94:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
  96:	82 34       	cpi	r24, 0x42	; 66
  98:	61 f0       	breq	.+24     	; 0xb2 <DIO_voidSetPortDirection+0x46>
  9a:	18 f4       	brcc	.+6      	; 0xa2 <DIO_voidSetPortDirection+0x36>
  9c:	81 34       	cpi	r24, 0x41	; 65
  9e:	31 f0       	breq	.+12     	; 0xac <DIO_voidSetPortDirection+0x40>
  a0:	08 95       	ret
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	49 f0       	breq	.+18     	; 0xb8 <DIO_voidSetPortDirection+0x4c>
  a6:	84 34       	cpi	r24, 0x44	; 68
  a8:	51 f0       	breq	.+20     	; 0xbe <DIO_voidSetPortDirection+0x52>
  aa:	08 95       	ret
			case portA: DDRA = 0xFF; break;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
			case portB: DDRB = 0xFF; break;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	87 bb       	out	0x17, r24	; 23
  b6:	08 95       	ret
			case portC: DDRC = 0xFF; break;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
  bc:	08 95       	ret
			case portD: DDRD = 0xFF; break;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	81 bb       	out	0x11, r24	; 17
  c2:	08 95       	ret

000000c4 <DIO_voidSetPortValue>:
		}
	}
}
void DIO_voidSetPortValue(uint8 copy_u8PortID, uint8 copy_u8PortVal){
	if(copy_u8PortVal == LOW){ // LOW
  c4:	61 11       	cpse	r22, r1
  c6:	13 c0       	rjmp	.+38     	; 0xee <DIO_voidSetPortValue+0x2a>
		switch(copy_u8PortID){
  c8:	82 34       	cpi	r24, 0x42	; 66
  ca:	59 f0       	breq	.+22     	; 0xe2 <DIO_voidSetPortValue+0x1e>
  cc:	18 f4       	brcc	.+6      	; 0xd4 <DIO_voidSetPortValue+0x10>
  ce:	81 34       	cpi	r24, 0x41	; 65
  d0:	31 f0       	breq	.+12     	; 0xde <DIO_voidSetPortValue+0x1a>
  d2:	08 95       	ret
  d4:	83 34       	cpi	r24, 0x43	; 67
  d6:	39 f0       	breq	.+14     	; 0xe6 <DIO_voidSetPortValue+0x22>
  d8:	84 34       	cpi	r24, 0x44	; 68
  da:	39 f0       	breq	.+14     	; 0xea <DIO_voidSetPortValue+0x26>
  dc:	08 95       	ret
			case portA: PORTA = 0; break;
  de:	1b ba       	out	0x1b, r1	; 27
  e0:	08 95       	ret
			case portB: PORTB = 0; break;
  e2:	18 ba       	out	0x18, r1	; 24
  e4:	08 95       	ret
			case portC: PORTC = 0; break;
  e6:	15 ba       	out	0x15, r1	; 21
  e8:	08 95       	ret
			case portD: PORTD = 0; break;
  ea:	12 ba       	out	0x12, r1	; 18
  ec:	08 95       	ret
		}
	}
	else{ // HIGH
		switch(copy_u8PortID){
  ee:	82 34       	cpi	r24, 0x42	; 66
  f0:	61 f0       	breq	.+24     	; 0x10a <DIO_voidSetPortValue+0x46>
  f2:	18 f4       	brcc	.+6      	; 0xfa <DIO_voidSetPortValue+0x36>
  f4:	81 34       	cpi	r24, 0x41	; 65
  f6:	31 f0       	breq	.+12     	; 0x104 <DIO_voidSetPortValue+0x40>
  f8:	08 95       	ret
  fa:	83 34       	cpi	r24, 0x43	; 67
  fc:	49 f0       	breq	.+18     	; 0x110 <DIO_voidSetPortValue+0x4c>
  fe:	84 34       	cpi	r24, 0x44	; 68
 100:	51 f0       	breq	.+20     	; 0x116 <DIO_voidSetPortValue+0x52>
 102:	08 95       	ret
			case portA: PORTA = 0xFF; break;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8b bb       	out	0x1b, r24	; 27
 108:	08 95       	ret
			case portB: PORTB = 0xFF; break;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	08 95       	ret
			case portC: PORTC = 0xFF; break;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	85 bb       	out	0x15, r24	; 21
 114:	08 95       	ret
			case portD: PORTD = 0xFF; break;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	82 bb       	out	0x12, r24	; 18
 11a:	08 95       	ret

0000011c <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinDir){
	
	if(Copy_u8PinDir == INPUT){ // input
 11c:	41 11       	cpse	r20, r1
 11e:	3b c0       	rjmp	.+118    	; 0x196 <DIO_voidSetPinDirection+0x7a>
		switch(copy_u8PortID){
 120:	82 34       	cpi	r24, 0x42	; 66
 122:	a9 f0       	breq	.+42     	; 0x14e <DIO_voidSetPinDirection+0x32>
 124:	18 f4       	brcc	.+6      	; 0x12c <DIO_voidSetPinDirection+0x10>
 126:	81 34       	cpi	r24, 0x41	; 65
 128:	31 f0       	breq	.+12     	; 0x136 <DIO_voidSetPinDirection+0x1a>
 12a:	08 95       	ret
 12c:	83 34       	cpi	r24, 0x43	; 67
 12e:	d9 f0       	breq	.+54     	; 0x166 <DIO_voidSetPinDirection+0x4a>
 130:	84 34       	cpi	r24, 0x44	; 68
 132:	29 f1       	breq	.+74     	; 0x17e <DIO_voidSetPinDirection+0x62>
 134:	08 95       	ret
			case portA: CLRBIT(DDRA, copy_u8PinID); break;
 136:	2a b3       	in	r18, 0x1a	; 26
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_voidSetPinDirection+0x26>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_voidSetPinDirection+0x22>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	8a bb       	out	0x1a, r24	; 26
 14c:	08 95       	ret
			case portB: CLRBIT(DDRB, copy_u8PinID); break;
 14e:	27 b3       	in	r18, 0x17	; 23
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_voidSetPinDirection+0x3e>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_voidSetPinDirection+0x3a>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	87 bb       	out	0x17, r24	; 23
 164:	08 95       	ret
			case portC: CLRBIT(DDRC, copy_u8PinID); break;
 166:	24 b3       	in	r18, 0x14	; 20
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPinDirection+0x56>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPinDirection+0x52>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	84 bb       	out	0x14, r24	; 20
 17c:	08 95       	ret
			case portD: CLRBIT(DDRD, copy_u8PinID); break;
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_voidSetPinDirection+0x6e>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_voidSetPinDirection+0x6a>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
 196:	82 34       	cpi	r24, 0x42	; 66
 198:	a1 f0       	breq	.+40     	; 0x1c2 <DIO_voidSetPinDirection+0xa6>
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <DIO_voidSetPinDirection+0x86>
 19c:	81 34       	cpi	r24, 0x41	; 65
 19e:	31 f0       	breq	.+12     	; 0x1ac <DIO_voidSetPinDirection+0x90>
 1a0:	08 95       	ret
 1a2:	83 34       	cpi	r24, 0x43	; 67
 1a4:	c9 f0       	breq	.+50     	; 0x1d8 <DIO_voidSetPinDirection+0xbc>
 1a6:	84 34       	cpi	r24, 0x44	; 68
 1a8:	11 f1       	breq	.+68     	; 0x1ee <DIO_voidSetPinDirection+0xd2>
 1aa:	08 95       	ret
			case portA: SETBIT(DDRA, copy_u8PinID); break;
 1ac:	2a b3       	in	r18, 0x1a	; 26
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_voidSetPinDirection+0x9c>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_voidSetPinDirection+0x98>
 1bc:	82 2b       	or	r24, r18
 1be:	8a bb       	out	0x1a, r24	; 26
 1c0:	08 95       	ret
			case portB: SETBIT(DDRB, copy_u8PinID); break;
 1c2:	27 b3       	in	r18, 0x17	; 23
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_voidSetPinDirection+0xb2>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_voidSetPinDirection+0xae>
 1d2:	82 2b       	or	r24, r18
 1d4:	87 bb       	out	0x17, r24	; 23
 1d6:	08 95       	ret
			case portC: SETBIT(DDRC, copy_u8PinID); break;
 1d8:	24 b3       	in	r18, 0x14	; 20
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_voidSetPinDirection+0xc8>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_voidSetPinDirection+0xc4>
 1e8:	82 2b       	or	r24, r18
 1ea:	84 bb       	out	0x14, r24	; 20
 1ec:	08 95       	ret
			case portD: SETBIT(DDRD, copy_u8PinID); break;
 1ee:	21 b3       	in	r18, 0x11	; 17
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinDirection+0xde>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinDirection+0xda>
 1fe:	82 2b       	or	r24, r18
 200:	81 bb       	out	0x11, r24	; 17
 202:	08 95       	ret

00000204 <DIO_voidSetPinValue>:
		}
	}
	
}
void DIO_voidSetPinValue(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinValue){
	if(Copy_u8PinValue == LOW){ // LOW
 204:	41 11       	cpse	r20, r1
 206:	3b c0       	rjmp	.+118    	; 0x27e <DIO_voidSetPinValue+0x7a>
		switch(copy_u8PortID){
 208:	82 34       	cpi	r24, 0x42	; 66
 20a:	a9 f0       	breq	.+42     	; 0x236 <DIO_voidSetPinValue+0x32>
 20c:	18 f4       	brcc	.+6      	; 0x214 <DIO_voidSetPinValue+0x10>
 20e:	81 34       	cpi	r24, 0x41	; 65
 210:	31 f0       	breq	.+12     	; 0x21e <DIO_voidSetPinValue+0x1a>
 212:	08 95       	ret
 214:	83 34       	cpi	r24, 0x43	; 67
 216:	d9 f0       	breq	.+54     	; 0x24e <DIO_voidSetPinValue+0x4a>
 218:	84 34       	cpi	r24, 0x44	; 68
 21a:	29 f1       	breq	.+74     	; 0x266 <DIO_voidSetPinValue+0x62>
 21c:	08 95       	ret
			case portA: CLRBIT(PORTA, copy_u8PinID); break;
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinValue+0x26>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinValue+0x22>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	8b bb       	out	0x1b, r24	; 27
 234:	08 95       	ret
			case portB: CLRBIT(PORTB, copy_u8PinID); break;
 236:	28 b3       	in	r18, 0x18	; 24
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_voidSetPinValue+0x3e>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_voidSetPinValue+0x3a>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	88 bb       	out	0x18, r24	; 24
 24c:	08 95       	ret
			case portC: CLRBIT(PORTC, copy_u8PinID); break;
 24e:	25 b3       	in	r18, 0x15	; 21
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_voidSetPinValue+0x56>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_voidSetPinValue+0x52>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	85 bb       	out	0x15, r24	; 21
 264:	08 95       	ret
			case portD: CLRBIT(PORTD, copy_u8PinID); break;
 266:	22 b3       	in	r18, 0x12	; 18
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_voidSetPinValue+0x6e>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_voidSetPinValue+0x6a>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	82 bb       	out	0x12, r24	; 18
 27c:	08 95       	ret
		}
	}
	else{ // HIGH
		switch(copy_u8PortID){
 27e:	82 34       	cpi	r24, 0x42	; 66
 280:	a1 f0       	breq	.+40     	; 0x2aa <DIO_voidSetPinValue+0xa6>
 282:	18 f4       	brcc	.+6      	; 0x28a <DIO_voidSetPinValue+0x86>
 284:	81 34       	cpi	r24, 0x41	; 65
 286:	31 f0       	breq	.+12     	; 0x294 <DIO_voidSetPinValue+0x90>
 288:	08 95       	ret
 28a:	83 34       	cpi	r24, 0x43	; 67
 28c:	c9 f0       	breq	.+50     	; 0x2c0 <DIO_voidSetPinValue+0xbc>
 28e:	84 34       	cpi	r24, 0x44	; 68
 290:	11 f1       	breq	.+68     	; 0x2d6 <DIO_voidSetPinValue+0xd2>
 292:	08 95       	ret
			case portA: SETBIT(PORTA, copy_u8PinID); break;
 294:	2b b3       	in	r18, 0x1b	; 27
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_voidSetPinValue+0x9c>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_voidSetPinValue+0x98>
 2a4:	82 2b       	or	r24, r18
 2a6:	8b bb       	out	0x1b, r24	; 27
 2a8:	08 95       	ret
			case portB: SETBIT(PORTB, copy_u8PinID); break;
 2aa:	28 b3       	in	r18, 0x18	; 24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_voidSetPinValue+0xb2>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_voidSetPinValue+0xae>
 2ba:	82 2b       	or	r24, r18
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	08 95       	ret
			case portC: SETBIT(PORTC, copy_u8PinID); break;
 2c0:	25 b3       	in	r18, 0x15	; 21
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_voidSetPinValue+0xc8>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_voidSetPinValue+0xc4>
 2d0:	82 2b       	or	r24, r18
 2d2:	85 bb       	out	0x15, r24	; 21
 2d4:	08 95       	ret
			case portD: SETBIT(PORTD, copy_u8PinID); break;
 2d6:	22 b3       	in	r18, 0x12	; 18
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_voidSetPinValue+0xde>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_voidSetPinValue+0xda>
 2e6:	82 2b       	or	r24, r18
 2e8:	82 bb       	out	0x12, r24	; 18
 2ea:	08 95       	ret

000002ec <main>:
#include "std_macros.h"
#include "DIO.h"

int main(void)
{
	DIO_voidSetPinDirection(portA, 2, OUTPUT);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	81 e4       	ldi	r24, 0x41	; 65
 2f2:	0e 94 8e 00 	call	0x11c	; 0x11c <DIO_voidSetPinDirection>
	DIO_voidSetPortDirection(portB, OUTPUT);
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	82 e4       	ldi	r24, 0x42	; 66
 2fa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(portB, HIGH);
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	82 e4       	ldi	r24, 0x42	; 66
 302:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_voidSetPortValue>
	
	DIO_voidSetPortDirection(portC, OUTPUT);
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	83 e4       	ldi	r24, 0x43	; 67
 30a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(portC, LOW);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	83 e4       	ldi	r24, 0x43	; 67
 312:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_voidSetPortValue>
	while(1){
		
		DIO_voidSetPinValue(portA, 2, HIGH);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	81 e4       	ldi	r24, 0x41	; 65
 31c:	0e 94 02 01 	call	0x204	; 0x204 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	83 ed       	ldi	r24, 0xD3	; 211
 324:	90 e3       	ldi	r25, 0x30	; 48
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x3a>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x44>
 330:	00 00       	nop
		_delay_ms(1000);
		DIO_voidSetPinValue(portA, 2, LOW);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	81 e4       	ldi	r24, 0x41	; 65
 338:	0e 94 02 01 	call	0x204	; 0x204 <DIO_voidSetPinValue>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	83 ed       	ldi	r24, 0xD3	; 211
 340:	90 e3       	ldi	r25, 0x30	; 48
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x56>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x60>
 34c:	00 00       	nop
 34e:	e3 cf       	rjmp	.-58     	; 0x316 <main+0x2a>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
