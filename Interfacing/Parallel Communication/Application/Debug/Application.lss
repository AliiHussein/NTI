
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000824  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000824  000008b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  000008c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000187f  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bbf  00000000  00000000  00002333  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed4  00000000  00000000  00002ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  00003dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000770  00000000  00000000  00004278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013d2  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005dba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0c 03 	jmp	0x618	; 0x618 <__vector_1>
   8:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_2>
   c:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a8 03 	jmp	0x750	; 0x750 <__vector_10>
  2c:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 10 02 	call	0x420	; 0x420 <main>
  8a:	0c 94 10 04 	jmp	0x820	; 0x820 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:
 *  Author: Ali
 */ 

#include "Button.h"

void button_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	d6 2f       	mov	r29, r22
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, INPUT);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_voidSetPinDirection>
	
	// Pullup
	switch(copy_u8PortID){
  a0:	c2 34       	cpi	r28, 0x42	; 66
  a2:	a1 f0       	breq	.+40     	; 0xcc <button_init+0x3a>
  a4:	18 f4       	brcc	.+6      	; 0xac <button_init+0x1a>
  a6:	c1 34       	cpi	r28, 0x41	; 65
  a8:	31 f0       	breq	.+12     	; 0xb6 <button_init+0x24>
  aa:	30 c0       	rjmp	.+96     	; 0x10c <button_init+0x7a>
  ac:	c3 34       	cpi	r28, 0x43	; 67
  ae:	c9 f0       	breq	.+50     	; 0xe2 <button_init+0x50>
  b0:	c4 34       	cpi	r28, 0x44	; 68
  b2:	11 f1       	breq	.+68     	; 0xf8 <button_init+0x66>
  b4:	2b c0       	rjmp	.+86     	; 0x10c <button_init+0x7a>
		case portA: SETBIT(PORTA, copy_u8PinID); break;
  b6:	2b b3       	in	r18, 0x1b	; 27
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <button_init+0x30>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	da 95       	dec	r29
  c4:	e2 f7       	brpl	.-8      	; 0xbe <button_init+0x2c>
  c6:	82 2b       	or	r24, r18
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	20 c0       	rjmp	.+64     	; 0x10c <button_init+0x7a>
		case portB: SETBIT(PORTB, copy_u8PinID); break;
  cc:	28 b3       	in	r18, 0x18	; 24
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <button_init+0x46>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	da 95       	dec	r29
  da:	e2 f7       	brpl	.-8      	; 0xd4 <button_init+0x42>
  dc:	82 2b       	or	r24, r18
  de:	88 bb       	out	0x18, r24	; 24
  e0:	15 c0       	rjmp	.+42     	; 0x10c <button_init+0x7a>
		case portC: SETBIT(PORTC, copy_u8PinID); break;
  e2:	25 b3       	in	r18, 0x15	; 21
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <button_init+0x5c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	da 95       	dec	r29
  f0:	e2 f7       	brpl	.-8      	; 0xea <button_init+0x58>
  f2:	82 2b       	or	r24, r18
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	0a c0       	rjmp	.+20     	; 0x10c <button_init+0x7a>
		case portD: SETBIT(PORTD, copy_u8PinID); break;
  f8:	22 b3       	in	r18, 0x12	; 18
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <button_init+0x72>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	da 95       	dec	r29
 106:	e2 f7       	brpl	.-8      	; 0x100 <button_init+0x6e>
 108:	82 2b       	or	r24, r18
 10a:	82 bb       	out	0x12, r24	; 18
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <button_read>:

uint8 button_read(uint8 copy_u8PortID, uint8 copy_u8PinID){
	return DIO_voidGetBitValue(copy_u8PortID, copy_u8PinID);
 112:	0e 94 db 02 	call	0x5b6	; 0x5b6 <DIO_voidGetBitValue>
}
 116:	08 95       	ret

00000118 <LCD_write_char>:
* Purpose      : Write a specific Ascii char (data) to lcd (valid only with 4-bit mode)
* Parameters   : data  (data to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_char(uint8 data){
	LCD_RS(1);
 118:	9b b3       	in	r25, 0x1b	; 27
 11a:	98 60       	ori	r25, 0x08	; 8
 11c:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(data, 4));
 11e:	84 ff       	sbrs	r24, 4
 120:	04 c0       	rjmp	.+8      	; 0x12a <LCD_write_char+0x12>
 122:	98 b3       	in	r25, 0x18	; 24
 124:	91 60       	ori	r25, 0x01	; 1
 126:	98 bb       	out	0x18, r25	; 24
 128:	03 c0       	rjmp	.+6      	; 0x130 <LCD_write_char+0x18>
 12a:	98 b3       	in	r25, 0x18	; 24
 12c:	9e 7f       	andi	r25, 0xFE	; 254
 12e:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 5));
 130:	85 ff       	sbrs	r24, 5
 132:	04 c0       	rjmp	.+8      	; 0x13c <LCD_write_char+0x24>
 134:	98 b3       	in	r25, 0x18	; 24
 136:	92 60       	ori	r25, 0x02	; 2
 138:	98 bb       	out	0x18, r25	; 24
 13a:	03 c0       	rjmp	.+6      	; 0x142 <LCD_write_char+0x2a>
 13c:	98 b3       	in	r25, 0x18	; 24
 13e:	9d 7f       	andi	r25, 0xFD	; 253
 140:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 6));
 142:	86 ff       	sbrs	r24, 6
 144:	04 c0       	rjmp	.+8      	; 0x14e <LCD_write_char+0x36>
 146:	98 b3       	in	r25, 0x18	; 24
 148:	94 60       	ori	r25, 0x04	; 4
 14a:	98 bb       	out	0x18, r25	; 24
 14c:	03 c0       	rjmp	.+6      	; 0x154 <LCD_write_char+0x3c>
 14e:	98 b3       	in	r25, 0x18	; 24
 150:	9b 7f       	andi	r25, 0xFB	; 251
 152:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 7));
 154:	88 23       	and	r24, r24
 156:	24 f4       	brge	.+8      	; 0x160 <LCD_write_char+0x48>
 158:	98 b3       	in	r25, 0x18	; 24
 15a:	90 61       	ori	r25, 0x10	; 16
 15c:	98 bb       	out	0x18, r25	; 24
 15e:	03 c0       	rjmp	.+6      	; 0x166 <LCD_write_char+0x4e>
 160:	98 b3       	in	r25, 0x18	; 24
 162:	9f 7e       	andi	r25, 0xEF	; 239
 164:	98 bb       	out	0x18, r25	; 24
	
	LCD_EN(1);
 166:	9b b3       	in	r25, 0x1b	; 27
 168:	94 60       	ori	r25, 0x04	; 4
 16a:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	ef e9       	ldi	r30, 0x9F	; 159
 16e:	ff e0       	ldi	r31, 0x0F	; 15
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_write_char+0x58>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_write_char+0x5e>
 176:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 178:	9b b3       	in	r25, 0x1b	; 27
 17a:	9b 7f       	andi	r25, 0xFB	; 251
 17c:	9b bb       	out	0x1b, r25	; 27
 17e:	ef e9       	ldi	r30, 0x9F	; 159
 180:	ff e0       	ldi	r31, 0x0F	; 15
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_write_char+0x6a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_write_char+0x70>
 188:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(data, 0));
 18a:	80 ff       	sbrs	r24, 0
 18c:	04 c0       	rjmp	.+8      	; 0x196 <LCD_write_char+0x7e>
 18e:	98 b3       	in	r25, 0x18	; 24
 190:	91 60       	ori	r25, 0x01	; 1
 192:	98 bb       	out	0x18, r25	; 24
 194:	03 c0       	rjmp	.+6      	; 0x19c <LCD_write_char+0x84>
 196:	98 b3       	in	r25, 0x18	; 24
 198:	9e 7f       	andi	r25, 0xFE	; 254
 19a:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 1));
 19c:	81 ff       	sbrs	r24, 1
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <LCD_write_char+0x90>
 1a0:	98 b3       	in	r25, 0x18	; 24
 1a2:	92 60       	ori	r25, 0x02	; 2
 1a4:	98 bb       	out	0x18, r25	; 24
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <LCD_write_char+0x96>
 1a8:	98 b3       	in	r25, 0x18	; 24
 1aa:	9d 7f       	andi	r25, 0xFD	; 253
 1ac:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 2));
 1ae:	82 ff       	sbrs	r24, 2
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <LCD_write_char+0xa2>
 1b2:	98 b3       	in	r25, 0x18	; 24
 1b4:	94 60       	ori	r25, 0x04	; 4
 1b6:	98 bb       	out	0x18, r25	; 24
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <LCD_write_char+0xa8>
 1ba:	98 b3       	in	r25, 0x18	; 24
 1bc:	9b 7f       	andi	r25, 0xFB	; 251
 1be:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 3));
 1c0:	83 ff       	sbrs	r24, 3
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <LCD_write_char+0xb4>
 1c4:	88 b3       	in	r24, 0x18	; 24
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <LCD_write_char+0xba>
 1cc:	88 b3       	in	r24, 0x18	; 24
 1ce:	8f 7e       	andi	r24, 0xEF	; 239
 1d0:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 1d2:	8b b3       	in	r24, 0x1b	; 27
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	8b bb       	out	0x1b, r24	; 27
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_write_char+0xc4>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_write_char+0xca>
 1e2:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 1e4:	8b b3       	in	r24, 0x1b	; 27
 1e6:	8b 7f       	andi	r24, 0xFB	; 251
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	ef e9       	ldi	r30, 0x9F	; 159
 1ec:	ff e0       	ldi	r31, 0x0F	; 15
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_write_char+0xd6>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_write_char+0xdc>
 1f4:	00 00       	nop
 1f6:	08 95       	ret

000001f8 <LCD_write_command>:
* Purpose      : Send a specific command (cmd) to lcd (valid only with 4-bit mode)
* Parameters   : cmd  (command to be done by lcd)
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8 cmd){
	LCD_RS(0);
 1f8:	9b b3       	in	r25, 0x1b	; 27
 1fa:	97 7f       	andi	r25, 0xF7	; 247
 1fc:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(cmd, 4));
 1fe:	84 ff       	sbrs	r24, 4
 200:	04 c0       	rjmp	.+8      	; 0x20a <LCD_write_command+0x12>
 202:	98 b3       	in	r25, 0x18	; 24
 204:	91 60       	ori	r25, 0x01	; 1
 206:	98 bb       	out	0x18, r25	; 24
 208:	03 c0       	rjmp	.+6      	; 0x210 <LCD_write_command+0x18>
 20a:	98 b3       	in	r25, 0x18	; 24
 20c:	9e 7f       	andi	r25, 0xFE	; 254
 20e:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 5));
 210:	85 ff       	sbrs	r24, 5
 212:	04 c0       	rjmp	.+8      	; 0x21c <LCD_write_command+0x24>
 214:	98 b3       	in	r25, 0x18	; 24
 216:	92 60       	ori	r25, 0x02	; 2
 218:	98 bb       	out	0x18, r25	; 24
 21a:	03 c0       	rjmp	.+6      	; 0x222 <LCD_write_command+0x2a>
 21c:	98 b3       	in	r25, 0x18	; 24
 21e:	9d 7f       	andi	r25, 0xFD	; 253
 220:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 6));
 222:	86 ff       	sbrs	r24, 6
 224:	04 c0       	rjmp	.+8      	; 0x22e <LCD_write_command+0x36>
 226:	98 b3       	in	r25, 0x18	; 24
 228:	94 60       	ori	r25, 0x04	; 4
 22a:	98 bb       	out	0x18, r25	; 24
 22c:	03 c0       	rjmp	.+6      	; 0x234 <LCD_write_command+0x3c>
 22e:	98 b3       	in	r25, 0x18	; 24
 230:	9b 7f       	andi	r25, 0xFB	; 251
 232:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 7));
 234:	88 23       	and	r24, r24
 236:	24 f4       	brge	.+8      	; 0x240 <LCD_write_command+0x48>
 238:	98 b3       	in	r25, 0x18	; 24
 23a:	90 61       	ori	r25, 0x10	; 16
 23c:	98 bb       	out	0x18, r25	; 24
 23e:	03 c0       	rjmp	.+6      	; 0x246 <LCD_write_command+0x4e>
 240:	98 b3       	in	r25, 0x18	; 24
 242:	9f 7e       	andi	r25, 0xEF	; 239
 244:	98 bb       	out	0x18, r25	; 24

	LCD_EN(1);
 246:	9b b3       	in	r25, 0x1b	; 27
 248:	94 60       	ori	r25, 0x04	; 4
 24a:	9b bb       	out	0x1b, r25	; 27
 24c:	ef e9       	ldi	r30, 0x9F	; 159
 24e:	ff e0       	ldi	r31, 0x0F	; 15
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_write_command+0x58>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_write_command+0x5e>
 256:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 258:	9b b3       	in	r25, 0x1b	; 27
 25a:	9b 7f       	andi	r25, 0xFB	; 251
 25c:	9b bb       	out	0x1b, r25	; 27
 25e:	ef e9       	ldi	r30, 0x9F	; 159
 260:	ff e0       	ldi	r31, 0x0F	; 15
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_write_command+0x6a>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_write_command+0x70>
 268:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(cmd, 0));
 26a:	80 ff       	sbrs	r24, 0
 26c:	04 c0       	rjmp	.+8      	; 0x276 <LCD_write_command+0x7e>
 26e:	98 b3       	in	r25, 0x18	; 24
 270:	91 60       	ori	r25, 0x01	; 1
 272:	98 bb       	out	0x18, r25	; 24
 274:	03 c0       	rjmp	.+6      	; 0x27c <LCD_write_command+0x84>
 276:	98 b3       	in	r25, 0x18	; 24
 278:	9e 7f       	andi	r25, 0xFE	; 254
 27a:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 1));
 27c:	81 ff       	sbrs	r24, 1
 27e:	04 c0       	rjmp	.+8      	; 0x288 <LCD_write_command+0x90>
 280:	98 b3       	in	r25, 0x18	; 24
 282:	92 60       	ori	r25, 0x02	; 2
 284:	98 bb       	out	0x18, r25	; 24
 286:	03 c0       	rjmp	.+6      	; 0x28e <LCD_write_command+0x96>
 288:	98 b3       	in	r25, 0x18	; 24
 28a:	9d 7f       	andi	r25, 0xFD	; 253
 28c:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 2));
 28e:	82 ff       	sbrs	r24, 2
 290:	04 c0       	rjmp	.+8      	; 0x29a <LCD_write_command+0xa2>
 292:	98 b3       	in	r25, 0x18	; 24
 294:	94 60       	ori	r25, 0x04	; 4
 296:	98 bb       	out	0x18, r25	; 24
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <LCD_write_command+0xa8>
 29a:	98 b3       	in	r25, 0x18	; 24
 29c:	9b 7f       	andi	r25, 0xFB	; 251
 29e:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 3));
 2a0:	83 ff       	sbrs	r24, 3
 2a2:	04 c0       	rjmp	.+8      	; 0x2ac <LCD_write_command+0xb4>
 2a4:	88 b3       	in	r24, 0x18	; 24
 2a6:	80 61       	ori	r24, 0x10	; 16
 2a8:	88 bb       	out	0x18, r24	; 24
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <LCD_write_command+0xba>
 2ac:	88 b3       	in	r24, 0x18	; 24
 2ae:	8f 7e       	andi	r24, 0xEF	; 239
 2b0:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 2b2:	8b b3       	in	r24, 0x1b	; 27
 2b4:	84 60       	ori	r24, 0x04	; 4
 2b6:	8b bb       	out	0x1b, r24	; 27
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_write_command+0xc4>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_write_command+0xca>
 2c2:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 2c4:	8b b3       	in	r24, 0x1b	; 27
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	8b bb       	out	0x1b, r24	; 27
 2ca:	ef e9       	ldi	r30, 0x9F	; 159
 2cc:	ff e0       	ldi	r31, 0x0F	; 15
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_write_command+0xd6>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <LCD_write_command+0xdc>
 2d4:	00 00       	nop
 2d6:	08 95       	ret

000002d8 <LCD_init>:
* Parameters   : void
* Return value : void

*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PINS();
 2d8:	8a b3       	in	r24, 0x1a	; 26
 2da:	88 60       	ori	r24, 0x08	; 8
 2dc:	8a bb       	out	0x1a, r24	; 26
 2de:	8a b3       	in	r24, 0x1a	; 26
 2e0:	84 60       	ori	r24, 0x04	; 4
 2e2:	8a bb       	out	0x1a, r24	; 26
 2e4:	87 b3       	in	r24, 0x17	; 23
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	87 bb       	out	0x17, r24	; 23
 2ea:	87 b3       	in	r24, 0x17	; 23
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	87 bb       	out	0x17, r24	; 23
 2f0:	87 b3       	in	r24, 0x17	; 23
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	87 bb       	out	0x17, r24	; 23
 2f6:	87 b3       	in	r24, 0x17	; 23
 2f8:	80 61       	ori	r24, 0x10	; 16
 2fa:	87 bb       	out	0x17, r24	; 23
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	89 ef       	ldi	r24, 0xF9	; 249
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <LCD_init+0x2a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_init+0x34>
 30c:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_write_command(0x02);		      /* send for 4 bit initialization of LCD  */
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 314:	88 e2       	ldi	r24, 0x28	; 40
 316:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x0c);              /* Display on cursor off*/
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x06);              /* Increment cursor (shift cursor to right)*/
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
	LCD_write_command(0x01);              /* Clear display screen*/
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	86 e7       	ldi	r24, 0x76	; 118
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <LCD_init+0x5a>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_init+0x64>
 33c:	00 00       	nop
 33e:	08 95       	ret

00000340 <LCD_write_number>:
* Function Name: LCD_write_num
* Purpose      : Write a specific number (num) on lcd (valid only with 4-bit mode)
* Parameters   : num  (num to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	2a 97       	sbiw	r28, 0x0a	; 10
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
	
	if(num < 0){
 358:	99 23       	and	r25, r25
 35a:	4c f4       	brge	.+18     	; 0x36e <LCD_write_number+0x2e>
		num *= -1;
 35c:	90 95       	com	r25
 35e:	80 95       	com	r24
 360:	70 95       	com	r23
 362:	61 95       	neg	r22
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	8f 4f       	sbci	r24, 0xFF	; 255
 368:	9f 4f       	sbci	r25, 0xFF	; 255
		neg_flag = 1;
 36a:	01 e0       	ldi	r16, 0x01	; 1
 36c:	01 c0       	rjmp	.+2      	; 0x370 <LCD_write_number+0x30>
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
 36e:	00 e0       	ldi	r16, 0x00	; 0
	if(num < 0){
		num *= -1;
		neg_flag = 1;
	}
	
	if(num == 0) {
 370:	61 15       	cp	r22, r1
 372:	71 05       	cpc	r23, r1
 374:	81 05       	cpc	r24, r1
 376:	91 05       	cpc	r25, r1
 378:	d1 f4       	brne	.+52     	; 0x3ae <LCD_write_number+0x6e>
		LCD_write_char('0');
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
 380:	31 c0       	rjmp	.+98     	; 0x3e4 <LCD_write_number+0xa4>
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
		num_arr[i] = num % 10 + '0';
 382:	2a e0       	ldi	r18, 0x0A	; 10
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodsi4>
 38e:	e1 e0       	ldi	r30, 0x01	; 1
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	e1 0f       	add	r30, r17
 398:	f1 1d       	adc	r31, r1
 39a:	17 fd       	sbrc	r17, 7
 39c:	fa 95       	dec	r31
 39e:	60 5d       	subi	r22, 0xD0	; 208
 3a0:	60 83       	st	Z, r22
		num /= 10;
 3a2:	62 2f       	mov	r22, r18
 3a4:	73 2f       	mov	r23, r19
 3a6:	84 2f       	mov	r24, r20
 3a8:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_char('0');
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
 3aa:	1f 5f       	subi	r17, 0xFF	; 255
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <LCD_write_number+0x70>
 3ae:	10 e0       	ldi	r17, 0x00	; 0
 3b0:	61 15       	cp	r22, r1
 3b2:	71 05       	cpc	r23, r1
 3b4:	81 05       	cpc	r24, r1
 3b6:	91 05       	cpc	r25, r1
 3b8:	21 f7       	brne	.-56     	; 0x382 <LCD_write_number+0x42>
		num_arr[i] = num % 10 + '0';
		num /= 10;
	}
	i--;
 3ba:	11 50       	subi	r17, 0x01	; 1
	if(neg_flag == 1){
 3bc:	01 30       	cpi	r16, 0x01	; 1
 3be:	81 f4       	brne	.+32     	; 0x3e0 <LCD_write_number+0xa0>
		LCD_write_char('-');
 3c0:	8d e2       	ldi	r24, 0x2D	; 45
 3c2:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
 3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <LCD_write_number+0xa0>
	}
	while (i >= 0){
		LCD_write_char(num_arr[i]);
 3c8:	e1 e0       	ldi	r30, 0x01	; 1
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	ec 0f       	add	r30, r28
 3ce:	fd 1f       	adc	r31, r29
 3d0:	e1 0f       	add	r30, r17
 3d2:	f1 1d       	adc	r31, r1
 3d4:	17 fd       	sbrc	r17, 7
 3d6:	fa 95       	dec	r31
 3d8:	80 81       	ld	r24, Z
 3da:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
		i--;
 3de:	11 50       	subi	r17, 0x01	; 1
	}
	i--;
	if(neg_flag == 1){
		LCD_write_char('-');
	}
	while (i >= 0){
 3e0:	11 23       	and	r17, r17
 3e2:	94 f7       	brge	.-28     	; 0x3c8 <LCD_write_number+0x88>
		LCD_write_char(num_arr[i]);
		i--;
	}
}
 3e4:	2a 96       	adiw	r28, 0x0a	; 10
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <LCD_write_string>:
* Purpose      : Write a string (*txt) to lcd (valid only with 4-bit mode)
*                (assume the end char of string is NULL (Ascii:'\0' - decimal:0 ))
* Parameters   : *txt  (array of char to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	8c 01       	movw	r16, r24
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	03 c0       	rjmp	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		LCD_write_char(str[i]);
 406:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_write_char>
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 40a:	cf 5f       	subi	r28, 0xFF	; 255
 40c:	f8 01       	movw	r30, r16
 40e:	ec 0f       	add	r30, r28
 410:	f1 1d       	adc	r31, r1
 412:	80 81       	ld	r24, Z
 414:	81 11       	cpse	r24, r1
 416:	f7 cf       	rjmp	.-18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		LCD_write_char(str[i]);
	}
	
}
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	08 95       	ret

00000420 <main>:
#include "MCAL/UART/UART_Interface.h"

int main(void)
{
	
	LCD_init();	
 420:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LCD_init>
	DIO_voidSetPortDirection(portC, OUTPUT);	
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	83 e4       	ldi	r24, 0x43	; 67
 428:	0e 94 3b 02 	call	0x476	; 0x476 <DIO_voidSetPortDirection>
	button_init(portD, 7);
 42c:	67 e0       	ldi	r22, 0x07	; 7
 42e:	84 e4       	ldi	r24, 0x44	; 68
 430:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	
	uint8 count = 0;
	PORTC = count;
 434:	15 ba       	out	0x15, r1	; 21
		
	LCD_write_string("SEND: ");
 436:	80 e6       	ldi	r24, 0x60	; 96
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_write_string>
	
	LCD_init();	
	DIO_voidSetPortDirection(portC, OUTPUT);	
	button_init(portD, 7);
	
	uint8 count = 0;
 43e:	c0 e0       	ldi	r28, 0x00	; 0
		
	LCD_write_string("SEND: ");
	
	while (1)
	{	
		LCD_write_command(0x86);
 440:	86 e8       	ldi	r24, 0x86	; 134
 442:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LCD_write_command>
		LCD_write_number(PORTC);
 446:	65 b3       	in	r22, 0x15	; 21
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_write_number>
		if(button_read(portD, 7) == 0){
 452:	67 e0       	ldi	r22, 0x07	; 7
 454:	84 e4       	ldi	r24, 0x44	; 68
 456:	0e 94 89 00 	call	0x112	; 0x112 <button_read>
 45a:	81 11       	cpse	r24, r1
 45c:	0a c0       	rjmp	.+20     	; 0x472 <main+0x52>
			count++;
 45e:	cf 5f       	subi	r28, 0xFF	; 255
 460:	2f ef       	ldi	r18, 0xFF	; 255
 462:	83 ec       	ldi	r24, 0xC3	; 195
 464:	99 e0       	ldi	r25, 0x09	; 9
 466:	21 50       	subi	r18, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <main+0x46>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <main+0x50>
 470:	00 00       	nop
			_delay_ms(200);
		}
		PORTC = count;
 472:	c5 bb       	out	0x15, r28	; 21
	
		
	}
 474:	e5 cf       	rjmp	.-54     	; 0x440 <main+0x20>

00000476 <DIO_voidSetPortDirection>:
	else{ // HIGH
		switch(copy_u8PortID){
			case portA: SETBIT(PORTA, copy_u8PinID); break;
			case portB: SETBIT(PORTB, copy_u8PinID); break;
			case portC: SETBIT(PORTC, copy_u8PinID); break;
			case portD: SETBIT(PORTD, copy_u8PinID); break;
 476:	61 11       	cpse	r22, r1
 478:	13 c0       	rjmp	.+38     	; 0x4a0 <DIO_voidSetPortDirection+0x2a>
 47a:	82 34       	cpi	r24, 0x42	; 66
 47c:	59 f0       	breq	.+22     	; 0x494 <DIO_voidSetPortDirection+0x1e>
 47e:	18 f4       	brcc	.+6      	; 0x486 <DIO_voidSetPortDirection+0x10>
 480:	81 34       	cpi	r24, 0x41	; 65
 482:	31 f0       	breq	.+12     	; 0x490 <DIO_voidSetPortDirection+0x1a>
 484:	08 95       	ret
 486:	83 34       	cpi	r24, 0x43	; 67
 488:	39 f0       	breq	.+14     	; 0x498 <DIO_voidSetPortDirection+0x22>
 48a:	84 34       	cpi	r24, 0x44	; 68
 48c:	39 f0       	breq	.+14     	; 0x49c <DIO_voidSetPortDirection+0x26>
 48e:	08 95       	ret
 490:	1a ba       	out	0x1a, r1	; 26
 492:	08 95       	ret
 494:	17 ba       	out	0x17, r1	; 23
 496:	08 95       	ret
 498:	14 ba       	out	0x14, r1	; 20
 49a:	08 95       	ret
 49c:	11 ba       	out	0x11, r1	; 17
 49e:	08 95       	ret
 4a0:	82 34       	cpi	r24, 0x42	; 66
 4a2:	61 f0       	breq	.+24     	; 0x4bc <DIO_voidSetPortDirection+0x46>
 4a4:	18 f4       	brcc	.+6      	; 0x4ac <DIO_voidSetPortDirection+0x36>
 4a6:	81 34       	cpi	r24, 0x41	; 65
 4a8:	31 f0       	breq	.+12     	; 0x4b6 <DIO_voidSetPortDirection+0x40>
 4aa:	08 95       	ret
 4ac:	83 34       	cpi	r24, 0x43	; 67
 4ae:	49 f0       	breq	.+18     	; 0x4c2 <DIO_voidSetPortDirection+0x4c>
 4b0:	84 34       	cpi	r24, 0x44	; 68
 4b2:	51 f0       	breq	.+20     	; 0x4c8 <DIO_voidSetPortDirection+0x52>
 4b4:	08 95       	ret
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	8a bb       	out	0x1a, r24	; 26
 4ba:	08 95       	ret
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	87 bb       	out	0x17, r24	; 23
 4c0:	08 95       	ret
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	84 bb       	out	0x14, r24	; 20
 4c6:	08 95       	ret
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	81 bb       	out	0x11, r24	; 17
 4cc:	08 95       	ret

000004ce <DIO_voidSetPinDirection>:
 4ce:	41 11       	cpse	r20, r1
 4d0:	3b c0       	rjmp	.+118    	; 0x548 <DIO_voidSetPinDirection+0x7a>
 4d2:	82 34       	cpi	r24, 0x42	; 66
 4d4:	a9 f0       	breq	.+42     	; 0x500 <DIO_voidSetPinDirection+0x32>
 4d6:	18 f4       	brcc	.+6      	; 0x4de <DIO_voidSetPinDirection+0x10>
 4d8:	81 34       	cpi	r24, 0x41	; 65
 4da:	31 f0       	breq	.+12     	; 0x4e8 <DIO_voidSetPinDirection+0x1a>
 4dc:	08 95       	ret
 4de:	83 34       	cpi	r24, 0x43	; 67
 4e0:	d9 f0       	breq	.+54     	; 0x518 <DIO_voidSetPinDirection+0x4a>
 4e2:	84 34       	cpi	r24, 0x44	; 68
 4e4:	29 f1       	breq	.+74     	; 0x530 <DIO_voidSetPinDirection+0x62>
 4e6:	08 95       	ret
 4e8:	2a b3       	in	r18, 0x1a	; 26
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_voidSetPinDirection+0x26>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_voidSetPinDirection+0x22>
 4f8:	80 95       	com	r24
 4fa:	82 23       	and	r24, r18
 4fc:	8a bb       	out	0x1a, r24	; 26
 4fe:	08 95       	ret
 500:	27 b3       	in	r18, 0x17	; 23
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_voidSetPinDirection+0x3e>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_voidSetPinDirection+0x3a>
 510:	80 95       	com	r24
 512:	82 23       	and	r24, r18
 514:	87 bb       	out	0x17, r24	; 23
 516:	08 95       	ret
 518:	24 b3       	in	r18, 0x14	; 20
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_voidSetPinDirection+0x56>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_voidSetPinDirection+0x52>
 528:	80 95       	com	r24
 52a:	82 23       	and	r24, r18
 52c:	84 bb       	out	0x14, r24	; 20
 52e:	08 95       	ret
 530:	21 b3       	in	r18, 0x11	; 17
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_voidSetPinDirection+0x6e>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_voidSetPinDirection+0x6a>
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	81 bb       	out	0x11, r24	; 17
 546:	08 95       	ret
 548:	82 34       	cpi	r24, 0x42	; 66
 54a:	a1 f0       	breq	.+40     	; 0x574 <DIO_voidSetPinDirection+0xa6>
 54c:	18 f4       	brcc	.+6      	; 0x554 <DIO_voidSetPinDirection+0x86>
 54e:	81 34       	cpi	r24, 0x41	; 65
 550:	31 f0       	breq	.+12     	; 0x55e <DIO_voidSetPinDirection+0x90>
 552:	08 95       	ret
 554:	83 34       	cpi	r24, 0x43	; 67
 556:	c9 f0       	breq	.+50     	; 0x58a <DIO_voidSetPinDirection+0xbc>
 558:	84 34       	cpi	r24, 0x44	; 68
 55a:	11 f1       	breq	.+68     	; 0x5a0 <DIO_voidSetPinDirection+0xd2>
 55c:	08 95       	ret
 55e:	2a b3       	in	r18, 0x1a	; 26
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_voidSetPinDirection+0x9c>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_voidSetPinDirection+0x98>
 56e:	82 2b       	or	r24, r18
 570:	8a bb       	out	0x1a, r24	; 26
 572:	08 95       	ret
 574:	27 b3       	in	r18, 0x17	; 23
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_voidSetPinDirection+0xb2>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_voidSetPinDirection+0xae>
 584:	82 2b       	or	r24, r18
 586:	87 bb       	out	0x17, r24	; 23
 588:	08 95       	ret
 58a:	24 b3       	in	r18, 0x14	; 20
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_voidSetPinDirection+0xc8>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_voidSetPinDirection+0xc4>
 59a:	82 2b       	or	r24, r18
 59c:	84 bb       	out	0x14, r24	; 20
 59e:	08 95       	ret
 5a0:	21 b3       	in	r18, 0x11	; 17
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_voidSetPinDirection+0xde>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_voidSetPinDirection+0xda>
 5b0:	82 2b       	or	r24, r18
 5b2:	81 bb       	out	0x11, r24	; 17
 5b4:	08 95       	ret

000005b6 <DIO_voidGetBitValue>:
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
	switch(copy_u8PortID){
 5b6:	82 34       	cpi	r24, 0x42	; 66
 5b8:	91 f0       	breq	.+36     	; 0x5de <DIO_voidGetBitValue+0x28>
 5ba:	18 f4       	brcc	.+6      	; 0x5c2 <DIO_voidGetBitValue+0xc>
 5bc:	81 34       	cpi	r24, 0x41	; 65
 5be:	31 f0       	breq	.+12     	; 0x5cc <DIO_voidGetBitValue+0x16>
 5c0:	29 c0       	rjmp	.+82     	; 0x614 <DIO_voidGetBitValue+0x5e>
 5c2:	83 34       	cpi	r24, 0x43	; 67
 5c4:	a9 f0       	breq	.+42     	; 0x5f0 <DIO_voidGetBitValue+0x3a>
 5c6:	84 34       	cpi	r24, 0x44	; 68
 5c8:	e1 f0       	breq	.+56     	; 0x602 <DIO_voidGetBitValue+0x4c>
 5ca:	24 c0       	rjmp	.+72     	; 0x614 <DIO_voidGetBitValue+0x5e>
		case portA: value = READBIT(PINA, copy_u8PinID); break;
 5cc:	89 b3       	in	r24, 0x19	; 25
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_voidGetBitValue+0x20>
 5d2:	95 95       	asr	r25
 5d4:	87 95       	ror	r24
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_voidGetBitValue+0x1c>
 5da:	81 70       	andi	r24, 0x01	; 1
 5dc:	08 95       	ret
		case portB: value = READBIT(PINB, copy_u8PinID); break;
 5de:	86 b3       	in	r24, 0x16	; 22
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_voidGetBitValue+0x32>
 5e4:	95 95       	asr	r25
 5e6:	87 95       	ror	r24
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_voidGetBitValue+0x2e>
 5ec:	81 70       	andi	r24, 0x01	; 1
 5ee:	08 95       	ret
		case portC: value = READBIT(PINC, copy_u8PinID); break;
 5f0:	83 b3       	in	r24, 0x13	; 19
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_voidGetBitValue+0x44>
 5f6:	95 95       	asr	r25
 5f8:	87 95       	ror	r24
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_voidGetBitValue+0x40>
 5fe:	81 70       	andi	r24, 0x01	; 1
 600:	08 95       	ret
		case portD: value = READBIT(PIND, copy_u8PinID); break;
 602:	80 b3       	in	r24, 0x10	; 16
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_voidGetBitValue+0x56>
 608:	95 95       	asr	r25
 60a:	87 95       	ror	r24
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_voidGetBitValue+0x52>
 610:	81 70       	andi	r24, 0x01	; 1
 612:	08 95       	ret
		}
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
 614:	80 e0       	ldi	r24, 0x00	; 0
		case portB: value = READBIT(PINB, copy_u8PinID); break;
		case portC: value = READBIT(PINC, copy_u8PinID); break;
		case portD: value = READBIT(PIND, copy_u8PinID); break;
	}
	return value;
 616:	08 95       	ret

00000618 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 618:	1f 92       	push	r1
 61a:	0f 92       	push	r0
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	0f 92       	push	r0
 620:	11 24       	eor	r1, r1
 622:	2f 93       	push	r18
 624:	3f 93       	push	r19
 626:	4f 93       	push	r20
 628:	5f 93       	push	r21
 62a:	6f 93       	push	r22
 62c:	7f 93       	push	r23
 62e:	8f 93       	push	r24
 630:	9f 93       	push	r25
 632:	af 93       	push	r26
 634:	bf 93       	push	r27
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
	ptr_EXT1();
 63a:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <ptr_EXT1>
 63e:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <ptr_EXT1+0x1>
 642:	09 95       	icall
}
 644:	ff 91       	pop	r31
 646:	ef 91       	pop	r30
 648:	bf 91       	pop	r27
 64a:	af 91       	pop	r26
 64c:	9f 91       	pop	r25
 64e:	8f 91       	pop	r24
 650:	7f 91       	pop	r23
 652:	6f 91       	pop	r22
 654:	5f 91       	pop	r21
 656:	4f 91       	pop	r20
 658:	3f 91       	pop	r19
 65a:	2f 91       	pop	r18
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	2f 93       	push	r18
 672:	3f 93       	push	r19
 674:	4f 93       	push	r20
 676:	5f 93       	push	r21
 678:	6f 93       	push	r22
 67a:	7f 93       	push	r23
 67c:	8f 93       	push	r24
 67e:	9f 93       	push	r25
 680:	af 93       	push	r26
 682:	bf 93       	push	r27
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31
	ptr_EXT2();
 688:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <ptr_EXT2>
 68c:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <ptr_EXT2+0x1>
 690:	09 95       	icall
}
 692:	ff 91       	pop	r31
 694:	ef 91       	pop	r30
 696:	bf 91       	pop	r27
 698:	af 91       	pop	r26
 69a:	9f 91       	pop	r25
 69c:	8f 91       	pop	r24
 69e:	7f 91       	pop	r23
 6a0:	6f 91       	pop	r22
 6a2:	5f 91       	pop	r21
 6a4:	4f 91       	pop	r20
 6a6:	3f 91       	pop	r19
 6a8:	2f 91       	pop	r18
 6aa:	0f 90       	pop	r0
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	0f 90       	pop	r0
 6b0:	1f 90       	pop	r1
 6b2:	18 95       	reti

000006b4 <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 6b4:	1f 92       	push	r1
 6b6:	0f 92       	push	r0
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	0f 92       	push	r0
 6bc:	11 24       	eor	r1, r1
 6be:	2f 93       	push	r18
 6c0:	3f 93       	push	r19
 6c2:	4f 93       	push	r20
 6c4:	5f 93       	push	r21
 6c6:	6f 93       	push	r22
 6c8:	7f 93       	push	r23
 6ca:	8f 93       	push	r24
 6cc:	9f 93       	push	r25
 6ce:	af 93       	push	r26
 6d0:	bf 93       	push	r27
 6d2:	ef 93       	push	r30
 6d4:	ff 93       	push	r31
	ptr_EXT3();
 6d6:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 6da:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 6de:	09 95       	icall
 6e0:	ff 91       	pop	r31
 6e2:	ef 91       	pop	r30
 6e4:	bf 91       	pop	r27
 6e6:	af 91       	pop	r26
 6e8:	9f 91       	pop	r25
 6ea:	8f 91       	pop	r24
 6ec:	7f 91       	pop	r23
 6ee:	6f 91       	pop	r22
 6f0:	5f 91       	pop	r21
 6f2:	4f 91       	pop	r20
 6f4:	3f 91       	pop	r19
 6f6:	2f 91       	pop	r18
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

00000702 <__vector_11>:
	timer0_disable();
}

void __vector_11() __attribute__((signal));

void __vector_11(){
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
 70c:	2f 93       	push	r18
 70e:	3f 93       	push	r19
 710:	4f 93       	push	r20
 712:	5f 93       	push	r21
 714:	6f 93       	push	r22
 716:	7f 93       	push	r23
 718:	8f 93       	push	r24
 71a:	9f 93       	push	r25
 71c:	af 93       	push	r26
 71e:	bf 93       	push	r27
 720:	ef 93       	push	r30
 722:	ff 93       	push	r31
	ptr_t0();
 724:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <ptr_t0>
 728:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <ptr_t0+0x1>
 72c:	09 95       	icall
}
 72e:	ff 91       	pop	r31
 730:	ef 91       	pop	r30
 732:	bf 91       	pop	r27
 734:	af 91       	pop	r26
 736:	9f 91       	pop	r25
 738:	8f 91       	pop	r24
 73a:	7f 91       	pop	r23
 73c:	6f 91       	pop	r22
 73e:	5f 91       	pop	r21
 740:	4f 91       	pop	r20
 742:	3f 91       	pop	r19
 744:	2f 91       	pop	r18
 746:	0f 90       	pop	r0
 748:	0f be       	out	0x3f, r0	; 63
 74a:	0f 90       	pop	r0
 74c:	1f 90       	pop	r1
 74e:	18 95       	reti

00000750 <__vector_10>:

void __vector_10() __attribute__((signal));

void __vector_10(){
 750:	1f 92       	push	r1
 752:	0f 92       	push	r0
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	0f 92       	push	r0
 758:	11 24       	eor	r1, r1
 75a:	2f 93       	push	r18
 75c:	3f 93       	push	r19
 75e:	4f 93       	push	r20
 760:	5f 93       	push	r21
 762:	6f 93       	push	r22
 764:	7f 93       	push	r23
 766:	8f 93       	push	r24
 768:	9f 93       	push	r25
 76a:	af 93       	push	r26
 76c:	bf 93       	push	r27
 76e:	ef 93       	push	r30
 770:	ff 93       	push	r31
	ptr_t0();
 772:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <ptr_t0>
 776:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <ptr_t0+0x1>
 77a:	09 95       	icall
}
 77c:	ff 91       	pop	r31
 77e:	ef 91       	pop	r30
 780:	bf 91       	pop	r27
 782:	af 91       	pop	r26
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	7f 91       	pop	r23
 78a:	6f 91       	pop	r22
 78c:	5f 91       	pop	r21
 78e:	4f 91       	pop	r20
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0f be       	out	0x3f, r0	; 63
 798:	0f 90       	pop	r0
 79a:	1f 90       	pop	r1
 79c:	18 95       	reti

0000079e <__udivmodsi4>:
 79e:	a1 e2       	ldi	r26, 0x21	; 33
 7a0:	1a 2e       	mov	r1, r26
 7a2:	aa 1b       	sub	r26, r26
 7a4:	bb 1b       	sub	r27, r27
 7a6:	fd 01       	movw	r30, r26
 7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <__udivmodsi4_ep>

000007aa <__udivmodsi4_loop>:
 7aa:	aa 1f       	adc	r26, r26
 7ac:	bb 1f       	adc	r27, r27
 7ae:	ee 1f       	adc	r30, r30
 7b0:	ff 1f       	adc	r31, r31
 7b2:	a2 17       	cp	r26, r18
 7b4:	b3 07       	cpc	r27, r19
 7b6:	e4 07       	cpc	r30, r20
 7b8:	f5 07       	cpc	r31, r21
 7ba:	20 f0       	brcs	.+8      	; 0x7c4 <__udivmodsi4_ep>
 7bc:	a2 1b       	sub	r26, r18
 7be:	b3 0b       	sbc	r27, r19
 7c0:	e4 0b       	sbc	r30, r20
 7c2:	f5 0b       	sbc	r31, r21

000007c4 <__udivmodsi4_ep>:
 7c4:	66 1f       	adc	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	1a 94       	dec	r1
 7ce:	69 f7       	brne	.-38     	; 0x7aa <__udivmodsi4_loop>
 7d0:	60 95       	com	r22
 7d2:	70 95       	com	r23
 7d4:	80 95       	com	r24
 7d6:	90 95       	com	r25
 7d8:	9b 01       	movw	r18, r22
 7da:	ac 01       	movw	r20, r24
 7dc:	bd 01       	movw	r22, r26
 7de:	cf 01       	movw	r24, r30
 7e0:	08 95       	ret

000007e2 <__divmodsi4>:
 7e2:	05 2e       	mov	r0, r21
 7e4:	97 fb       	bst	r25, 7
 7e6:	1e f4       	brtc	.+6      	; 0x7ee <__divmodsi4+0xc>
 7e8:	00 94       	com	r0
 7ea:	0e 94 08 04 	call	0x810	; 0x810 <__negsi2>
 7ee:	57 fd       	sbrc	r21, 7
 7f0:	07 d0       	rcall	.+14     	; 0x800 <__divmodsi4_neg2>
 7f2:	0e 94 cf 03 	call	0x79e	; 0x79e <__udivmodsi4>
 7f6:	07 fc       	sbrc	r0, 7
 7f8:	03 d0       	rcall	.+6      	; 0x800 <__divmodsi4_neg2>
 7fa:	4e f4       	brtc	.+18     	; 0x80e <__divmodsi4_exit>
 7fc:	0c 94 08 04 	jmp	0x810	; 0x810 <__negsi2>

00000800 <__divmodsi4_neg2>:
 800:	50 95       	com	r21
 802:	40 95       	com	r20
 804:	30 95       	com	r19
 806:	21 95       	neg	r18
 808:	3f 4f       	sbci	r19, 0xFF	; 255
 80a:	4f 4f       	sbci	r20, 0xFF	; 255
 80c:	5f 4f       	sbci	r21, 0xFF	; 255

0000080e <__divmodsi4_exit>:
 80e:	08 95       	ret

00000810 <__negsi2>:
 810:	90 95       	com	r25
 812:	80 95       	com	r24
 814:	70 95       	com	r23
 816:	61 95       	neg	r22
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	8f 4f       	sbci	r24, 0xFF	; 255
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	08 95       	ret

00000820 <_exit>:
 820:	f8 94       	cli

00000822 <__stop_program>:
 822:	ff cf       	rjmp	.-2      	; 0x822 <__stop_program>
