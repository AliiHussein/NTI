
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000096e  00000a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800074  00800074  00000a16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015f7  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aca  00000000  00000000  000021db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d9a  00000000  00000000  00002ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00003a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000690  00000000  00000000  00003dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f4f  00000000  00000000  0000444c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000539b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_1>
   8:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_2>
   c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
  8a:	0c 94 b5 04 	jmp	0x96a	; 0x96a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_write_char>:
* Purpose      : Write a specific Ascii char (data) to lcd (valid only with 4-bit mode)
* Parameters   : data  (data to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_char(uint8 data){
	LCD_RS(1);
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	98 60       	ori	r25, 0x08	; 8
  96:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(data, 4));
  98:	84 ff       	sbrs	r24, 4
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <LCD_write_char+0x12>
  9c:	98 b3       	in	r25, 0x18	; 24
  9e:	91 60       	ori	r25, 0x01	; 1
  a0:	98 bb       	out	0x18, r25	; 24
  a2:	03 c0       	rjmp	.+6      	; 0xaa <LCD_write_char+0x18>
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	9e 7f       	andi	r25, 0xFE	; 254
  a8:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 5));
  aa:	85 ff       	sbrs	r24, 5
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <LCD_write_char+0x24>
  ae:	98 b3       	in	r25, 0x18	; 24
  b0:	92 60       	ori	r25, 0x02	; 2
  b2:	98 bb       	out	0x18, r25	; 24
  b4:	03 c0       	rjmp	.+6      	; 0xbc <LCD_write_char+0x2a>
  b6:	98 b3       	in	r25, 0x18	; 24
  b8:	9d 7f       	andi	r25, 0xFD	; 253
  ba:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 6));
  bc:	86 ff       	sbrs	r24, 6
  be:	04 c0       	rjmp	.+8      	; 0xc8 <LCD_write_char+0x36>
  c0:	98 b3       	in	r25, 0x18	; 24
  c2:	94 60       	ori	r25, 0x04	; 4
  c4:	98 bb       	out	0x18, r25	; 24
  c6:	03 c0       	rjmp	.+6      	; 0xce <LCD_write_char+0x3c>
  c8:	98 b3       	in	r25, 0x18	; 24
  ca:	9b 7f       	andi	r25, 0xFB	; 251
  cc:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 7));
  ce:	88 23       	and	r24, r24
  d0:	24 f4       	brge	.+8      	; 0xda <LCD_write_char+0x48>
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	90 61       	ori	r25, 0x10	; 16
  d6:	98 bb       	out	0x18, r25	; 24
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <LCD_write_char+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	9f 7e       	andi	r25, 0xEF	; 239
  de:	98 bb       	out	0x18, r25	; 24
	
	LCD_EN(1);
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	94 60       	ori	r25, 0x04	; 4
  e4:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	ef e9       	ldi	r30, 0x9F	; 159
  e8:	ff e0       	ldi	r31, 0x0F	; 15
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_write_char+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_write_char+0x5e>
  f0:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
  f2:	9b b3       	in	r25, 0x1b	; 27
  f4:	9b 7f       	andi	r25, 0xFB	; 251
  f6:	9b bb       	out	0x1b, r25	; 27
  f8:	ef e9       	ldi	r30, 0x9F	; 159
  fa:	ff e0       	ldi	r31, 0x0F	; 15
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_write_char+0x6a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_write_char+0x70>
 102:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(data, 0));
 104:	80 ff       	sbrs	r24, 0
 106:	04 c0       	rjmp	.+8      	; 0x110 <LCD_write_char+0x7e>
 108:	98 b3       	in	r25, 0x18	; 24
 10a:	91 60       	ori	r25, 0x01	; 1
 10c:	98 bb       	out	0x18, r25	; 24
 10e:	03 c0       	rjmp	.+6      	; 0x116 <LCD_write_char+0x84>
 110:	98 b3       	in	r25, 0x18	; 24
 112:	9e 7f       	andi	r25, 0xFE	; 254
 114:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 1));
 116:	81 ff       	sbrs	r24, 1
 118:	04 c0       	rjmp	.+8      	; 0x122 <LCD_write_char+0x90>
 11a:	98 b3       	in	r25, 0x18	; 24
 11c:	92 60       	ori	r25, 0x02	; 2
 11e:	98 bb       	out	0x18, r25	; 24
 120:	03 c0       	rjmp	.+6      	; 0x128 <LCD_write_char+0x96>
 122:	98 b3       	in	r25, 0x18	; 24
 124:	9d 7f       	andi	r25, 0xFD	; 253
 126:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 2));
 128:	82 ff       	sbrs	r24, 2
 12a:	04 c0       	rjmp	.+8      	; 0x134 <LCD_write_char+0xa2>
 12c:	98 b3       	in	r25, 0x18	; 24
 12e:	94 60       	ori	r25, 0x04	; 4
 130:	98 bb       	out	0x18, r25	; 24
 132:	03 c0       	rjmp	.+6      	; 0x13a <LCD_write_char+0xa8>
 134:	98 b3       	in	r25, 0x18	; 24
 136:	9b 7f       	andi	r25, 0xFB	; 251
 138:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 3));
 13a:	83 ff       	sbrs	r24, 3
 13c:	04 c0       	rjmp	.+8      	; 0x146 <LCD_write_char+0xb4>
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	80 61       	ori	r24, 0x10	; 16
 142:	88 bb       	out	0x18, r24	; 24
 144:	03 c0       	rjmp	.+6      	; 0x14c <LCD_write_char+0xba>
 146:	88 b3       	in	r24, 0x18	; 24
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 14c:	8b b3       	in	r24, 0x1b	; 27
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	8b bb       	out	0x1b, r24	; 27
 152:	8f e9       	ldi	r24, 0x9F	; 159
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_write_char+0xc4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_write_char+0xca>
 15c:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	8b bb       	out	0x1b, r24	; 27
 164:	ef e9       	ldi	r30, 0x9F	; 159
 166:	ff e0       	ldi	r31, 0x0F	; 15
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_write_char+0xd6>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_write_char+0xdc>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <LCD_write_command>:
* Purpose      : Send a specific command (cmd) to lcd (valid only with 4-bit mode)
* Parameters   : cmd  (command to be done by lcd)
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8 cmd){
	LCD_RS(0);
 172:	9b b3       	in	r25, 0x1b	; 27
 174:	97 7f       	andi	r25, 0xF7	; 247
 176:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(cmd, 4));
 178:	84 ff       	sbrs	r24, 4
 17a:	04 c0       	rjmp	.+8      	; 0x184 <LCD_write_command+0x12>
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	91 60       	ori	r25, 0x01	; 1
 180:	98 bb       	out	0x18, r25	; 24
 182:	03 c0       	rjmp	.+6      	; 0x18a <LCD_write_command+0x18>
 184:	98 b3       	in	r25, 0x18	; 24
 186:	9e 7f       	andi	r25, 0xFE	; 254
 188:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 5));
 18a:	85 ff       	sbrs	r24, 5
 18c:	04 c0       	rjmp	.+8      	; 0x196 <LCD_write_command+0x24>
 18e:	98 b3       	in	r25, 0x18	; 24
 190:	92 60       	ori	r25, 0x02	; 2
 192:	98 bb       	out	0x18, r25	; 24
 194:	03 c0       	rjmp	.+6      	; 0x19c <LCD_write_command+0x2a>
 196:	98 b3       	in	r25, 0x18	; 24
 198:	9d 7f       	andi	r25, 0xFD	; 253
 19a:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 6));
 19c:	86 ff       	sbrs	r24, 6
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <LCD_write_command+0x36>
 1a0:	98 b3       	in	r25, 0x18	; 24
 1a2:	94 60       	ori	r25, 0x04	; 4
 1a4:	98 bb       	out	0x18, r25	; 24
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <LCD_write_command+0x3c>
 1a8:	98 b3       	in	r25, 0x18	; 24
 1aa:	9b 7f       	andi	r25, 0xFB	; 251
 1ac:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 7));
 1ae:	88 23       	and	r24, r24
 1b0:	24 f4       	brge	.+8      	; 0x1ba <LCD_write_command+0x48>
 1b2:	98 b3       	in	r25, 0x18	; 24
 1b4:	90 61       	ori	r25, 0x10	; 16
 1b6:	98 bb       	out	0x18, r25	; 24
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <LCD_write_command+0x4e>
 1ba:	98 b3       	in	r25, 0x18	; 24
 1bc:	9f 7e       	andi	r25, 0xEF	; 239
 1be:	98 bb       	out	0x18, r25	; 24

	LCD_EN(1);
 1c0:	9b b3       	in	r25, 0x1b	; 27
 1c2:	94 60       	ori	r25, 0x04	; 4
 1c4:	9b bb       	out	0x1b, r25	; 27
 1c6:	ef e9       	ldi	r30, 0x9F	; 159
 1c8:	ff e0       	ldi	r31, 0x0F	; 15
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_write_command+0x58>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_write_command+0x5e>
 1d0:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 1d2:	9b b3       	in	r25, 0x1b	; 27
 1d4:	9b 7f       	andi	r25, 0xFB	; 251
 1d6:	9b bb       	out	0x1b, r25	; 27
 1d8:	ef e9       	ldi	r30, 0x9F	; 159
 1da:	ff e0       	ldi	r31, 0x0F	; 15
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_write_command+0x6a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_write_command+0x70>
 1e2:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(cmd, 0));
 1e4:	80 ff       	sbrs	r24, 0
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <LCD_write_command+0x7e>
 1e8:	98 b3       	in	r25, 0x18	; 24
 1ea:	91 60       	ori	r25, 0x01	; 1
 1ec:	98 bb       	out	0x18, r25	; 24
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <LCD_write_command+0x84>
 1f0:	98 b3       	in	r25, 0x18	; 24
 1f2:	9e 7f       	andi	r25, 0xFE	; 254
 1f4:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 1));
 1f6:	81 ff       	sbrs	r24, 1
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <LCD_write_command+0x90>
 1fa:	98 b3       	in	r25, 0x18	; 24
 1fc:	92 60       	ori	r25, 0x02	; 2
 1fe:	98 bb       	out	0x18, r25	; 24
 200:	03 c0       	rjmp	.+6      	; 0x208 <LCD_write_command+0x96>
 202:	98 b3       	in	r25, 0x18	; 24
 204:	9d 7f       	andi	r25, 0xFD	; 253
 206:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 2));
 208:	82 ff       	sbrs	r24, 2
 20a:	04 c0       	rjmp	.+8      	; 0x214 <LCD_write_command+0xa2>
 20c:	98 b3       	in	r25, 0x18	; 24
 20e:	94 60       	ori	r25, 0x04	; 4
 210:	98 bb       	out	0x18, r25	; 24
 212:	03 c0       	rjmp	.+6      	; 0x21a <LCD_write_command+0xa8>
 214:	98 b3       	in	r25, 0x18	; 24
 216:	9b 7f       	andi	r25, 0xFB	; 251
 218:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 3));
 21a:	83 ff       	sbrs	r24, 3
 21c:	04 c0       	rjmp	.+8      	; 0x226 <LCD_write_command+0xb4>
 21e:	88 b3       	in	r24, 0x18	; 24
 220:	80 61       	ori	r24, 0x10	; 16
 222:	88 bb       	out	0x18, r24	; 24
 224:	03 c0       	rjmp	.+6      	; 0x22c <LCD_write_command+0xba>
 226:	88 b3       	in	r24, 0x18	; 24
 228:	8f 7e       	andi	r24, 0xEF	; 239
 22a:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 22c:	8b b3       	in	r24, 0x1b	; 27
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	8b bb       	out	0x1b, r24	; 27
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_write_command+0xc4>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_write_command+0xca>
 23c:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 23e:	8b b3       	in	r24, 0x1b	; 27
 240:	8b 7f       	andi	r24, 0xFB	; 251
 242:	8b bb       	out	0x1b, r24	; 27
 244:	ef e9       	ldi	r30, 0x9F	; 159
 246:	ff e0       	ldi	r31, 0x0F	; 15
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_write_command+0xd6>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_write_command+0xdc>
 24e:	00 00       	nop
 250:	08 95       	ret

00000252 <LCD_init>:
* Parameters   : void
* Return value : void

*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PINS();
 252:	8a b3       	in	r24, 0x1a	; 26
 254:	88 60       	ori	r24, 0x08	; 8
 256:	8a bb       	out	0x1a, r24	; 26
 258:	8a b3       	in	r24, 0x1a	; 26
 25a:	84 60       	ori	r24, 0x04	; 4
 25c:	8a bb       	out	0x1a, r24	; 26
 25e:	87 b3       	in	r24, 0x17	; 23
 260:	81 60       	ori	r24, 0x01	; 1
 262:	87 bb       	out	0x17, r24	; 23
 264:	87 b3       	in	r24, 0x17	; 23
 266:	82 60       	ori	r24, 0x02	; 2
 268:	87 bb       	out	0x17, r24	; 23
 26a:	87 b3       	in	r24, 0x17	; 23
 26c:	84 60       	ori	r24, 0x04	; 4
 26e:	87 bb       	out	0x17, r24	; 23
 270:	87 b3       	in	r24, 0x17	; 23
 272:	80 61       	ori	r24, 0x10	; 16
 274:	87 bb       	out	0x17, r24	; 23
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	89 ef       	ldi	r24, 0xF9	; 249
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <LCD_init+0x2a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_init+0x34>
 286:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_write_command(0x02);		      /* send for 4 bit initialization of LCD  */
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x0c);              /* Display on cursor off*/
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x06);              /* Increment cursor (shift cursor to right)*/
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x01);              /* Clear display screen*/
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	86 e7       	ldi	r24, 0x76	; 118
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <LCD_init+0x5a>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_init+0x64>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <LCD_write_number>:
* Function Name: LCD_write_num
* Purpose      : Write a specific number (num) on lcd (valid only with 4-bit mode)
* Parameters   : num  (num to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	2a 97       	sbiw	r28, 0x0a	; 10
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
	
	if(num < 0){
 2d2:	99 23       	and	r25, r25
 2d4:	4c f4       	brge	.+18     	; 0x2e8 <LCD_write_number+0x2e>
		num *= -1;
 2d6:	90 95       	com	r25
 2d8:	80 95       	com	r24
 2da:	70 95       	com	r23
 2dc:	61 95       	neg	r22
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	8f 4f       	sbci	r24, 0xFF	; 255
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
		neg_flag = 1;
 2e4:	01 e0       	ldi	r16, 0x01	; 1
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <LCD_write_number+0x30>
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
 2e8:	00 e0       	ldi	r16, 0x00	; 0
	if(num < 0){
		num *= -1;
		neg_flag = 1;
	}
	
	if(num == 0) {
 2ea:	61 15       	cp	r22, r1
 2ec:	71 05       	cpc	r23, r1
 2ee:	81 05       	cpc	r24, r1
 2f0:	91 05       	cpc	r25, r1
 2f2:	d1 f4       	brne	.+52     	; 0x328 <LCD_write_number+0x6e>
		LCD_write_char('0');
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
 2fa:	31 c0       	rjmp	.+98     	; 0x35e <LCD_write_number+0xa4>
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
		num_arr[i] = num % 10 + '0';
 2fc:	2a e0       	ldi	r18, 0x0A	; 10
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	0e 94 87 04 	call	0x90e	; 0x90e <__divmodsi4>
 308:	e1 e0       	ldi	r30, 0x01	; 1
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ec 0f       	add	r30, r28
 30e:	fd 1f       	adc	r31, r29
 310:	e1 0f       	add	r30, r17
 312:	f1 1d       	adc	r31, r1
 314:	17 fd       	sbrc	r17, 7
 316:	fa 95       	dec	r31
 318:	60 5d       	subi	r22, 0xD0	; 208
 31a:	60 83       	st	Z, r22
		num /= 10;
 31c:	62 2f       	mov	r22, r18
 31e:	73 2f       	mov	r23, r19
 320:	84 2f       	mov	r24, r20
 322:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_char('0');
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
 324:	1f 5f       	subi	r17, 0xFF	; 255
 326:	01 c0       	rjmp	.+2      	; 0x32a <LCD_write_number+0x70>
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	61 15       	cp	r22, r1
 32c:	71 05       	cpc	r23, r1
 32e:	81 05       	cpc	r24, r1
 330:	91 05       	cpc	r25, r1
 332:	21 f7       	brne	.-56     	; 0x2fc <LCD_write_number+0x42>
		num_arr[i] = num % 10 + '0';
		num /= 10;
	}
	i--;
 334:	11 50       	subi	r17, 0x01	; 1
	if(neg_flag == 1){
 336:	01 30       	cpi	r16, 0x01	; 1
 338:	81 f4       	brne	.+32     	; 0x35a <LCD_write_number+0xa0>
		LCD_write_char('-');
 33a:	8d e2       	ldi	r24, 0x2D	; 45
 33c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
 340:	0c c0       	rjmp	.+24     	; 0x35a <LCD_write_number+0xa0>
	}
	while (i >= 0){
		LCD_write_char(num_arr[i]);
 342:	e1 e0       	ldi	r30, 0x01	; 1
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	ec 0f       	add	r30, r28
 348:	fd 1f       	adc	r31, r29
 34a:	e1 0f       	add	r30, r17
 34c:	f1 1d       	adc	r31, r1
 34e:	17 fd       	sbrc	r17, 7
 350:	fa 95       	dec	r31
 352:	80 81       	ld	r24, Z
 354:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
		i--;
 358:	11 50       	subi	r17, 0x01	; 1
	}
	i--;
	if(neg_flag == 1){
		LCD_write_char('-');
	}
	while (i >= 0){
 35a:	11 23       	and	r17, r17
 35c:	94 f7       	brge	.-28     	; 0x342 <LCD_write_number+0x88>
		LCD_write_char(num_arr[i]);
		i--;
	}
}
 35e:	2a 96       	adiw	r28, 0x0a	; 10
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <LCD_write_string>:
* Purpose      : Write a string (*txt) to lcd (valid only with 4-bit mode)
*                (assume the end char of string is NULL (Ascii:'\0' - decimal:0 ))
* Parameters   : *txt  (array of char to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	8c 01       	movw	r16, r24
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	03 c0       	rjmp	.+6      	; 0x386 <LCD_write_string+0x12>
		LCD_write_char(str[i]);
 380:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 384:	cf 5f       	subi	r28, 0xFF	; 255
 386:	f8 01       	movw	r30, r16
 388:	ec 0f       	add	r30, r28
 38a:	f1 1d       	adc	r31, r1
 38c:	80 81       	ld	r24, Z
 38e:	81 11       	cpse	r24, r1
 390:	f7 cf       	rjmp	.-18     	; 0x380 <LCD_write_string+0xc>
		LCD_write_char(str[i]);
	}
	
}
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <autotrigger>:
#include "MCAL/GIE/GIE_Interface.h"
#include "MCAL/ADC/ADC_Interface.h"

uint16 value;

void autotrigger(void){
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
	uint16 volt;
	uint16 temp;
	
	ADC_AutoTrigger_init();	
 39e:	0e 94 b9 02 	call	0x572	; 0x572 <ADC_AutoTrigger_init>
	ADC_AutoTrigger_read(A1, &value);
 3a2:	6a e7       	ldi	r22, 0x7A	; 122
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <ADC_AutoTrigger_read>
	
	// Disable AutoTrigger
	CLRBIT(ADCSRA, ADATE);
 3ac:	86 b1       	in	r24, 0x06	; 6
 3ae:	8f 7d       	andi	r24, 0xDF	; 223
 3b0:	86 b9       	out	0x06, r24	; 6
	CLRBIT(SFIOR, ADTS2); CLRBIT(SFIOR, ADTS1); CLRBIT(SFIOR, ADTS0);
 3b2:	80 b7       	in	r24, 0x30	; 48
 3b4:	8f 77       	andi	r24, 0x7F	; 127
 3b6:	80 bf       	out	0x30, r24	; 48
 3b8:	80 b7       	in	r24, 0x30	; 48
 3ba:	8f 7b       	andi	r24, 0xBF	; 191
 3bc:	80 bf       	out	0x30, r24	; 48
 3be:	80 b7       	in	r24, 0x30	; 48
 3c0:	8e 7f       	andi	r24, 0xFE	; 254
 3c2:	80 bf       	out	0x30, r24	; 48
	
	volt = (value * 5000UL)/ 1024;
 3c4:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <value>
 3c8:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <value+0x1>
 3cc:	a8 e8       	ldi	r26, 0x88	; 136
 3ce:	b3 e1       	ldi	r27, 0x13	; 19
 3d0:	0e 94 a6 04 	call	0x94c	; 0x94c <__umulhisi3>
 3d4:	9b 01       	movw	r18, r22
 3d6:	ac 01       	movw	r20, r24
 3d8:	01 2e       	mov	r0, r17
 3da:	1a e0       	ldi	r17, 0x0A	; 10
 3dc:	56 95       	lsr	r21
 3de:	47 95       	ror	r20
 3e0:	37 95       	ror	r19
 3e2:	27 95       	ror	r18
 3e4:	1a 95       	dec	r17
 3e6:	d1 f7       	brne	.-12     	; 0x3dc <autotrigger+0x42>
 3e8:	10 2d       	mov	r17, r0
	temp = volt/10;
 3ea:	ad ec       	ldi	r26, 0xCD	; 205
 3ec:	bc ec       	ldi	r27, 0xCC	; 204
 3ee:	0e 94 a6 04 	call	0x94c	; 0x94c <__umulhisi3>
 3f2:	ec 01       	movw	r28, r24
 3f4:	d6 95       	lsr	r29
 3f6:	c7 95       	ror	r28
 3f8:	d6 95       	lsr	r29
 3fa:	c7 95       	ror	r28
 3fc:	d6 95       	lsr	r29
 3fe:	c7 95       	ror	r28
	
	LCD_write_command(0x86);
 400:	86 e8       	ldi	r24, 0x86	; 134
 402:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_string("     ");
 406:	80 e6       	ldi	r24, 0x60	; 96
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_write_string>
	LCD_write_command(0x86);
 40e:	86 e8       	ldi	r24, 0x86	; 134
 410:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_number(temp);
 414:	be 01       	movw	r22, r28
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_write_number>
}
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <interpolation>:

uint16 interpolation(uint16 Y_max,uint16 Y_min,uint16 X_max,uint16 X_min,uint16 ADC_Read)
{
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	eb 01       	movw	r28, r22
	uint16 val,y,x;
	y=Y_max-Y_min;
 42e:	dc 01       	movw	r26, r24
 430:	a6 1b       	sub	r26, r22
 432:	b7 0b       	sbc	r27, r23
	x=X_max-X_min;
 434:	42 1b       	sub	r20, r18
 436:	53 0b       	sbc	r21, r19
	
	val=((y*(uint32)(ADC_Read-X_min))/x)+Y_min;
 438:	c8 01       	movw	r24, r16
 43a:	82 1b       	sub	r24, r18
 43c:	93 0b       	sbc	r25, r19
 43e:	9c 01       	movw	r18, r24
 440:	0e 94 a6 04 	call	0x94c	; 0x94c <__umulhisi3>
 444:	9a 01       	movw	r18, r20
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	50 e0       	ldi	r21, 0x00	; 0
 44a:	0e 94 65 04 	call	0x8ca	; 0x8ca <__udivmodsi4>
 44e:	ce 01       	movw	r24, r28
 450:	82 0f       	add	r24, r18
 452:	93 1f       	adc	r25, r19
	
	return val;
}
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <main>:

int main(void)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <main+0x6>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
 468:	0e 94 29 01 	call	0x252	; 0x252 <LCD_init>
	ADC_init();
 46c:	0e 94 8c 02 	call	0x518	; 0x518 <ADC_init>
	
	EXT_init(EXT0, FALLING);
 470:	62 e0       	ldi	r22, 0x02	; 2
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 60 03 	call	0x6c0	; 0x6c0 <EXT_init>
	EXT_callback(autotrigger, EXT0);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	8d ec       	ldi	r24, 0xCD	; 205
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <EXT_callback>
	GIE_Enable();	
 482:	0e 94 61 04 	call	0x8c2	; 0x8c2 <GIE_Enable>
	
	LCD_write_command(0x80);
 486:	80 e8       	ldi	r24, 0x80	; 128
 488:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_string("Temp= ");
 48c:	86 e6       	ldi	r24, 0x66	; 102
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_write_string>
	LCD_write_command(0xc0);
 494:	80 ec       	ldi	r24, 0xC0	; 192
 496:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_string("LDR= ");
 49a:	8d e6       	ldi	r24, 0x6D	; 109
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_write_string>
	uint16 volt2;
	uint16 percentage;
	

	while(1){
		ADC_read(A0, &LDR);
 4a2:	be 01       	movw	r22, r28
 4a4:	6f 5f       	subi	r22, 0xFF	; 255
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 a5 02 	call	0x54a	; 0x54a <ADC_read>
		
		volt2 = (LDR * 5000UL)/ 1024;
 4ae:	29 81       	ldd	r18, Y+1	; 0x01
 4b0:	3a 81       	ldd	r19, Y+2	; 0x02
 4b2:	a8 e8       	ldi	r26, 0x88	; 136
 4b4:	b3 e1       	ldi	r27, 0x13	; 19
 4b6:	0e 94 a6 04 	call	0x94c	; 0x94c <__umulhisi3>
 4ba:	8b 01       	movw	r16, r22
 4bc:	9c 01       	movw	r18, r24
 4be:	0f 2e       	mov	r0, r31
 4c0:	fa e0       	ldi	r31, 0x0A	; 10
 4c2:	36 95       	lsr	r19
 4c4:	27 95       	ror	r18
 4c6:	17 95       	ror	r17
 4c8:	07 95       	ror	r16
 4ca:	fa 95       	dec	r31
 4cc:	d1 f7       	brne	.-12     	; 0x4c2 <main+0x64>
 4ce:	f0 2d       	mov	r31, r0
		0    -> 100%
		4700 -> 100
		
		*/
		
		percentage = interpolation(100, 0, 100, 4700, volt2);
 4d0:	2c e5       	ldi	r18, 0x5C	; 92
 4d2:	32 e1       	ldi	r19, 0x12	; 18
 4d4:	44 e6       	ldi	r20, 0x64	; 100
 4d6:	50 e0       	ldi	r21, 0x00	; 0
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	84 e6       	ldi	r24, 0x64	; 100
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 12 02 	call	0x424	; 0x424 <interpolation>
 4e4:	8c 01       	movw	r16, r24
		
		LCD_write_command(0xc6);
 4e6:	86 ec       	ldi	r24, 0xC6	; 198
 4e8:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
		LCD_write_string("     ");
 4ec:	80 e6       	ldi	r24, 0x60	; 96
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_write_string>
		LCD_write_command(0xc6);
 4f4:	86 ec       	ldi	r24, 0xC6	; 198
 4f6:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
		LCD_write_number(percentage);
 4fa:	b8 01       	movw	r22, r16
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_write_number>
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	89 e6       	ldi	r24, 0x69	; 105
 508:	98 e1       	ldi	r25, 0x18	; 24
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <main+0xac>
 512:	00 c0       	rjmp	.+0      	; 0x514 <main+0xb6>
 514:	00 00       	nop
 516:	c5 cf       	rjmp	.-118    	; 0x4a2 <main+0x44>

00000518 <ADC_init>:
#include "ADC_Private.h"
#include "ADC_CFG.h"

void ADC_init(void){
	// 1. Disable peripherals before config
	CLRBIT(ADCSRA, ADEN);
 518:	86 b1       	in	r24, 0x06	; 6
 51a:	8f 77       	andi	r24, 0x7F	; 127
 51c:	86 b9       	out	0x06, r24	; 6
	// 2. AVCC -> 5V :: REFS1, REFS0 = 0, 1
	SETBIT(ADMUX, REFS0); 
 51e:	87 b1       	in	r24, 0x07	; 7
 520:	80 64       	ori	r24, 0x40	; 64
 522:	87 b9       	out	0x07, r24	; 7
	CLRBIT(ADMUX, REFS1); 
 524:	87 b1       	in	r24, 0x07	; 7
 526:	8f 77       	andi	r24, 0x7F	; 127
 528:	87 b9       	out	0x07, r24	; 7
	// 3. Right adjustment +
	CLRBIT(ADMUX, ADLAR);
 52a:	87 b1       	in	r24, 0x07	; 7
 52c:	8f 7d       	andi	r24, 0xDF	; 223
 52e:	87 b9       	out	0x07, r24	; 7
	// 4. Prescaler -> 128
	ADCSRA |= 0b111;
 530:	86 b1       	in	r24, 0x06	; 6
 532:	87 60       	ori	r24, 0x07	; 7
 534:	86 b9       	out	0x06, r24	; 6
	// 5. Disable interrupt +
	CLRBIT(ADCSRA, ADIE);
 536:	86 b1       	in	r24, 0x06	; 6
 538:	87 7f       	andi	r24, 0xF7	; 247
 53a:	86 b9       	out	0x06, r24	; 6
	// 6. Clear ADC flag by setting it +
	SETBIT(ADCSRA, ADIF);
 53c:	86 b1       	in	r24, 0x06	; 6
 53e:	80 61       	ori	r24, 0x10	; 16
 540:	86 b9       	out	0x06, r24	; 6
	// 7. Enable ADC
	SETBIT(ADCSRA, ADEN);
 542:	86 b1       	in	r24, 0x06	; 6
 544:	80 68       	ori	r24, 0x80	; 128
 546:	86 b9       	out	0x06, r24	; 6
 548:	08 95       	ret

0000054a <ADC_read>:
	// return data
	*Value = ADC;
	*/
	
	// 1. Select channel
	ADMUX &= 0b11100000;
 54a:	97 b1       	in	r25, 0x07	; 7
 54c:	90 7e       	andi	r25, 0xE0	; 224
 54e:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
 550:	97 b1       	in	r25, 0x07	; 7
 552:	89 2b       	or	r24, r25
 554:	87 b9       	out	0x07, r24	; 7
	// 2. Start conversion
	SETBIT(ADCSRA, ADSC);
 556:	86 b1       	in	r24, 0x06	; 6
 558:	80 64       	ori	r24, 0x40	; 64
 55a:	86 b9       	out	0x06, r24	; 6
	// 2. Wait for flag
	while(!READBIT(ADCSRA, ADIF));
 55c:	34 9b       	sbis	0x06, 4	; 6
 55e:	fe cf       	rjmp	.-4      	; 0x55c <ADC_read+0x12>
	// 3. Clear Flag
	SETBIT(ADCSRA, ADIF);
 560:	86 b1       	in	r24, 0x06	; 6
 562:	80 61       	ori	r24, 0x10	; 16
 564:	86 b9       	out	0x06, r24	; 6
	// 4. return data
	*Value = ADC;
 566:	84 b1       	in	r24, 0x04	; 4
 568:	95 b1       	in	r25, 0x05	; 5
 56a:	fb 01       	movw	r30, r22
 56c:	91 83       	std	Z+1, r25	; 0x01
 56e:	80 83       	st	Z, r24
 570:	08 95       	ret

00000572 <ADC_AutoTrigger_init>:
	
}

void ADC_AutoTrigger_init(void){
	// 1. Disable peripherals before config
	CLRBIT(ADCSRA, ADEN);
 572:	86 b1       	in	r24, 0x06	; 6
 574:	8f 77       	andi	r24, 0x7F	; 127
 576:	86 b9       	out	0x06, r24	; 6
	// 2. AVCC -> 5V :: REFS1, REFS0 = 0, 1
	CLRBIT(ADMUX, REFS1); SETBIT(ADMUX, REFS0);
 578:	87 b1       	in	r24, 0x07	; 7
 57a:	8f 77       	andi	r24, 0x7F	; 127
 57c:	87 b9       	out	0x07, r24	; 7
 57e:	87 b1       	in	r24, 0x07	; 7
 580:	80 64       	ori	r24, 0x40	; 64
 582:	87 b9       	out	0x07, r24	; 7
	// 3. Right adjustment +
	CLRBIT(ADMUX, ADLAR);
 584:	87 b1       	in	r24, 0x07	; 7
 586:	8f 7d       	andi	r24, 0xDF	; 223
 588:	87 b9       	out	0x07, r24	; 7
	// 4. Prescaler -> 128
	ADCSRA |= 0b111;
 58a:	86 b1       	in	r24, 0x06	; 6
 58c:	87 60       	ori	r24, 0x07	; 7
 58e:	86 b9       	out	0x06, r24	; 6
	// 6. Enable  Auto Trigger
	SETBIT(ADCSRA, ADATE);
 590:	86 b1       	in	r24, 0x06	; 6
 592:	80 62       	ori	r24, 0x20	; 32
 594:	86 b9       	out	0x06, r24	; 6
	// 7. Clear ADC flag by setting it +
	SETBIT(ADCSRA, ADIF);
 596:	86 b1       	in	r24, 0x06	; 6
 598:	80 61       	ori	r24, 0x10	; 16
 59a:	86 b9       	out	0x06, r24	; 6
	// 8. ADC Auto Trigger Source ADTS2 = 0, ADTS1 = 1, ADTS0 = 0
	CLRBIT(SFIOR, ADTS2); SETBIT(SFIOR, ADTS1); CLRBIT(SFIOR, ADTS0);
 59c:	80 b7       	in	r24, 0x30	; 48
 59e:	8f 77       	andi	r24, 0x7F	; 127
 5a0:	80 bf       	out	0x30, r24	; 48
 5a2:	80 b7       	in	r24, 0x30	; 48
 5a4:	80 64       	ori	r24, 0x40	; 64
 5a6:	80 bf       	out	0x30, r24	; 48
 5a8:	80 b7       	in	r24, 0x30	; 48
 5aa:	8e 7f       	andi	r24, 0xFE	; 254
 5ac:	80 bf       	out	0x30, r24	; 48
	// 9. Enable ADC
	SETBIT(ADCSRA, ADEN);
 5ae:	86 b1       	in	r24, 0x06	; 6
 5b0:	80 68       	ori	r24, 0x80	; 128
 5b2:	86 b9       	out	0x06, r24	; 6
 5b4:	08 95       	ret

000005b6 <ADC_AutoTrigger_read>:
}

void ADC_AutoTrigger_read(uint8 channel, uint16 *Value){
	// 1. Select channel
	ADMUX &= 0b11100000;
 5b6:	97 b1       	in	r25, 0x07	; 7
 5b8:	90 7e       	andi	r25, 0xE0	; 224
 5ba:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
 5bc:	97 b1       	in	r25, 0x07	; 7
 5be:	89 2b       	or	r24, r25
 5c0:	87 b9       	out	0x07, r24	; 7
	// 2. Wait for flag
	while(!READBIT(ADCSRA, ADIF));
 5c2:	34 9b       	sbis	0x06, 4	; 6
 5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <ADC_AutoTrigger_read+0xc>
	// 3. Clear Flag
	SETBIT(ADCSRA, ADIF);
 5c6:	86 b1       	in	r24, 0x06	; 6
 5c8:	80 61       	ori	r24, 0x10	; 16
 5ca:	86 b9       	out	0x06, r24	; 6
	// 4. return data
	*Value = ADC;
 5cc:	84 b1       	in	r24, 0x04	; 4
 5ce:	95 b1       	in	r25, 0x05	; 5
 5d0:	fb 01       	movw	r30, r22
 5d2:	91 83       	std	Z+1, r25	; 0x01
 5d4:	80 83       	st	Z, r24
 5d6:	08 95       	ret

000005d8 <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinDir){
	
	if(Copy_u8PinDir == INPUT){ // input
 5d8:	41 11       	cpse	r20, r1
 5da:	3b c0       	rjmp	.+118    	; 0x652 <DIO_voidSetPinDirection+0x7a>
		switch(copy_u8PortID){
 5dc:	82 34       	cpi	r24, 0x42	; 66
 5de:	a9 f0       	breq	.+42     	; 0x60a <DIO_voidSetPinDirection+0x32>
 5e0:	18 f4       	brcc	.+6      	; 0x5e8 <DIO_voidSetPinDirection+0x10>
 5e2:	81 34       	cpi	r24, 0x41	; 65
 5e4:	31 f0       	breq	.+12     	; 0x5f2 <DIO_voidSetPinDirection+0x1a>
 5e6:	08 95       	ret
 5e8:	83 34       	cpi	r24, 0x43	; 67
 5ea:	d9 f0       	breq	.+54     	; 0x622 <DIO_voidSetPinDirection+0x4a>
 5ec:	84 34       	cpi	r24, 0x44	; 68
 5ee:	29 f1       	breq	.+74     	; 0x63a <DIO_voidSetPinDirection+0x62>
 5f0:	08 95       	ret
			case portA: CLRBIT(DDRA, copy_u8PinID); break;
 5f2:	2a b3       	in	r18, 0x1a	; 26
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_voidSetPinDirection+0x26>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_voidSetPinDirection+0x22>
 602:	80 95       	com	r24
 604:	82 23       	and	r24, r18
 606:	8a bb       	out	0x1a, r24	; 26
 608:	08 95       	ret
			case portB: CLRBIT(DDRB, copy_u8PinID); break;
 60a:	27 b3       	in	r18, 0x17	; 23
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_voidSetPinDirection+0x3e>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_voidSetPinDirection+0x3a>
 61a:	80 95       	com	r24
 61c:	82 23       	and	r24, r18
 61e:	87 bb       	out	0x17, r24	; 23
 620:	08 95       	ret
			case portC: CLRBIT(DDRC, copy_u8PinID); break;
 622:	24 b3       	in	r18, 0x14	; 20
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_voidSetPinDirection+0x56>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	6a 95       	dec	r22
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_voidSetPinDirection+0x52>
 632:	80 95       	com	r24
 634:	82 23       	and	r24, r18
 636:	84 bb       	out	0x14, r24	; 20
 638:	08 95       	ret
			case portD: CLRBIT(DDRD, copy_u8PinID); break;
 63a:	21 b3       	in	r18, 0x11	; 17
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_voidSetPinDirection+0x6e>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_voidSetPinDirection+0x6a>
 64a:	80 95       	com	r24
 64c:	82 23       	and	r24, r18
 64e:	81 bb       	out	0x11, r24	; 17
 650:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
 652:	82 34       	cpi	r24, 0x42	; 66
 654:	a1 f0       	breq	.+40     	; 0x67e <DIO_voidSetPinDirection+0xa6>
 656:	18 f4       	brcc	.+6      	; 0x65e <DIO_voidSetPinDirection+0x86>
 658:	81 34       	cpi	r24, 0x41	; 65
 65a:	31 f0       	breq	.+12     	; 0x668 <DIO_voidSetPinDirection+0x90>
 65c:	08 95       	ret
 65e:	83 34       	cpi	r24, 0x43	; 67
 660:	c9 f0       	breq	.+50     	; 0x694 <DIO_voidSetPinDirection+0xbc>
 662:	84 34       	cpi	r24, 0x44	; 68
 664:	11 f1       	breq	.+68     	; 0x6aa <DIO_voidSetPinDirection+0xd2>
 666:	08 95       	ret
			case portA: SETBIT(DDRA, copy_u8PinID); break;
 668:	2a b3       	in	r18, 0x1a	; 26
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_voidSetPinDirection+0x9c>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_voidSetPinDirection+0x98>
 678:	82 2b       	or	r24, r18
 67a:	8a bb       	out	0x1a, r24	; 26
 67c:	08 95       	ret
			case portB: SETBIT(DDRB, copy_u8PinID); break;
 67e:	27 b3       	in	r18, 0x17	; 23
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_voidSetPinDirection+0xb2>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	6a 95       	dec	r22
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_voidSetPinDirection+0xae>
 68e:	82 2b       	or	r24, r18
 690:	87 bb       	out	0x17, r24	; 23
 692:	08 95       	ret
			case portC: SETBIT(DDRC, copy_u8PinID); break;
 694:	24 b3       	in	r18, 0x14	; 20
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_voidSetPinDirection+0xc8>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	6a 95       	dec	r22
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_voidSetPinDirection+0xc4>
 6a4:	82 2b       	or	r24, r18
 6a6:	84 bb       	out	0x14, r24	; 20
 6a8:	08 95       	ret
			case portD: SETBIT(DDRD, copy_u8PinID); break;
 6aa:	21 b3       	in	r18, 0x11	; 17
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_voidSetPinDirection+0xde>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_voidSetPinDirection+0xda>
 6ba:	82 2b       	or	r24, r18
 6bc:	81 bb       	out	0x11, r24	; 17
 6be:	08 95       	ret

000006c0 <EXT_init>:

void (*ptr_EXT1)(void) = NULL;
void (*ptr_EXT2)(void) = NULL;
void (*ptr_EXT3)(void) = NULL;

void EXT_init(uint8 EXT_num, uint8 EXT_sens){
 6c0:	cf 93       	push	r28
 6c2:	c6 2f       	mov	r28, r22
		switch(EXT_num){
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	89 f1       	breq	.+98     	; 0x72a <EXT_init+0x6a>
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <EXT_init+0x12>
 6ca:	82 30       	cpi	r24, 0x02	; 2
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <EXT_init+0x10>
 6ce:	59 c0       	rjmp	.+178    	; 0x782 <EXT_init+0xc2>
 6d0:	6c c0       	rjmp	.+216    	; 0x7aa <EXT_init+0xea>
			case EXT0: 
			// Enable INT0 from GICR
			SETBIT(GICR, INT0); 
 6d2:	8b b7       	in	r24, 0x3b	; 59
 6d4:	80 64       	ori	r24, 0x40	; 64
 6d6:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portD, 2, INPUT);
 6d8:	40 e0       	ldi	r20, 0x00	; 0
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	84 e4       	ldi	r24, 0x44	; 68
 6de:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 6e2:	c1 30       	cpi	r28, 0x01	; 1
 6e4:	69 f0       	breq	.+26     	; 0x700 <EXT_init+0x40>
 6e6:	28 f0       	brcs	.+10     	; 0x6f2 <EXT_init+0x32>
 6e8:	c2 30       	cpi	r28, 0x02	; 2
 6ea:	89 f0       	breq	.+34     	; 0x70e <EXT_init+0x4e>
 6ec:	c3 30       	cpi	r28, 0x03	; 3
 6ee:	b1 f0       	breq	.+44     	; 0x71c <EXT_init+0x5c>
 6f0:	5c c0       	rjmp	.+184    	; 0x7aa <EXT_init+0xea>
				case LOW_Level: CLRBIT(MCUCR, ISC01); CLRBIT(MCUCR, ISC00); break;
 6f2:	85 b7       	in	r24, 0x35	; 53
 6f4:	8d 7f       	andi	r24, 0xFD	; 253
 6f6:	85 bf       	out	0x35, r24	; 53
 6f8:	85 b7       	in	r24, 0x35	; 53
 6fa:	8e 7f       	andi	r24, 0xFE	; 254
 6fc:	85 bf       	out	0x35, r24	; 53
 6fe:	55 c0       	rjmp	.+170    	; 0x7aa <EXT_init+0xea>
				case CHANGE:    CLRBIT(MCUCR, ISC01); SETBIT(MCUCR, ISC00); break;
 700:	85 b7       	in	r24, 0x35	; 53
 702:	8d 7f       	andi	r24, 0xFD	; 253
 704:	85 bf       	out	0x35, r24	; 53
 706:	85 b7       	in	r24, 0x35	; 53
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	85 bf       	out	0x35, r24	; 53
 70c:	4e c0       	rjmp	.+156    	; 0x7aa <EXT_init+0xea>
				case FALLING:   SETBIT(MCUCR, ISC01); CLRBIT(MCUCR, ISC00); break;
 70e:	85 b7       	in	r24, 0x35	; 53
 710:	82 60       	ori	r24, 0x02	; 2
 712:	85 bf       	out	0x35, r24	; 53
 714:	85 b7       	in	r24, 0x35	; 53
 716:	8e 7f       	andi	r24, 0xFE	; 254
 718:	85 bf       	out	0x35, r24	; 53
 71a:	47 c0       	rjmp	.+142    	; 0x7aa <EXT_init+0xea>
				case RISING:    SETBIT(MCUCR, ISC01); SETBIT(MCUCR, ISC00); break;
 71c:	85 b7       	in	r24, 0x35	; 53
 71e:	82 60       	ori	r24, 0x02	; 2
 720:	85 bf       	out	0x35, r24	; 53
 722:	85 b7       	in	r24, 0x35	; 53
 724:	81 60       	ori	r24, 0x01	; 1
 726:	85 bf       	out	0x35, r24	; 53
 728:	40 c0       	rjmp	.+128    	; 0x7aa <EXT_init+0xea>
			
			break;
			/***************************************************************************/
			case EXT1: 
			// Enable INT1 from GICR
			SETBIT(GICR, INT1); 
 72a:	8b b7       	in	r24, 0x3b	; 59
 72c:	80 68       	ori	r24, 0x80	; 128
 72e:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portD, 3, INPUT);
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	63 e0       	ldi	r22, 0x03	; 3
 734:	84 e4       	ldi	r24, 0x44	; 68
 736:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 73a:	c1 30       	cpi	r28, 0x01	; 1
 73c:	69 f0       	breq	.+26     	; 0x758 <EXT_init+0x98>
 73e:	28 f0       	brcs	.+10     	; 0x74a <EXT_init+0x8a>
 740:	c2 30       	cpi	r28, 0x02	; 2
 742:	89 f0       	breq	.+34     	; 0x766 <EXT_init+0xa6>
 744:	c3 30       	cpi	r28, 0x03	; 3
 746:	b1 f0       	breq	.+44     	; 0x774 <EXT_init+0xb4>
 748:	30 c0       	rjmp	.+96     	; 0x7aa <EXT_init+0xea>
				case LOW_Level: CLRBIT(MCUCR, ISC11); CLRBIT(MCUCR, ISC10); break;
 74a:	85 b7       	in	r24, 0x35	; 53
 74c:	87 7f       	andi	r24, 0xF7	; 247
 74e:	85 bf       	out	0x35, r24	; 53
 750:	85 b7       	in	r24, 0x35	; 53
 752:	8b 7f       	andi	r24, 0xFB	; 251
 754:	85 bf       	out	0x35, r24	; 53
 756:	29 c0       	rjmp	.+82     	; 0x7aa <EXT_init+0xea>
				case CHANGE:    CLRBIT(MCUCR, ISC11); SETBIT(MCUCR, ISC10); break;
 758:	85 b7       	in	r24, 0x35	; 53
 75a:	87 7f       	andi	r24, 0xF7	; 247
 75c:	85 bf       	out	0x35, r24	; 53
 75e:	85 b7       	in	r24, 0x35	; 53
 760:	84 60       	ori	r24, 0x04	; 4
 762:	85 bf       	out	0x35, r24	; 53
 764:	22 c0       	rjmp	.+68     	; 0x7aa <EXT_init+0xea>
				case FALLING:   SETBIT(MCUCR, ISC11); CLRBIT(MCUCR, ISC10); break;
 766:	85 b7       	in	r24, 0x35	; 53
 768:	88 60       	ori	r24, 0x08	; 8
 76a:	85 bf       	out	0x35, r24	; 53
 76c:	85 b7       	in	r24, 0x35	; 53
 76e:	8b 7f       	andi	r24, 0xFB	; 251
 770:	85 bf       	out	0x35, r24	; 53
 772:	1b c0       	rjmp	.+54     	; 0x7aa <EXT_init+0xea>
				case RISING:    SETBIT(MCUCR, ISC11); SETBIT(MCUCR, ISC10); break;
 774:	85 b7       	in	r24, 0x35	; 53
 776:	88 60       	ori	r24, 0x08	; 8
 778:	85 bf       	out	0x35, r24	; 53
 77a:	85 b7       	in	r24, 0x35	; 53
 77c:	84 60       	ori	r24, 0x04	; 4
 77e:	85 bf       	out	0x35, r24	; 53
 780:	14 c0       	rjmp	.+40     	; 0x7aa <EXT_init+0xea>
			break;
			
			/***************************************************************************/
			case EXT2: 
			// Enable INT2 from GICR
			SETBIT(GICR, INT2);
 782:	8b b7       	in	r24, 0x3b	; 59
 784:	80 62       	ori	r24, 0x20	; 32
 786:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portB, 2, INPUT);
 788:	40 e0       	ldi	r20, 0x00	; 0
 78a:	62 e0       	ldi	r22, 0x02	; 2
 78c:	82 e4       	ldi	r24, 0x42	; 66
 78e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 792:	c2 30       	cpi	r28, 0x02	; 2
 794:	19 f0       	breq	.+6      	; 0x79c <EXT_init+0xdc>
 796:	c3 30       	cpi	r28, 0x03	; 3
 798:	29 f0       	breq	.+10     	; 0x7a4 <EXT_init+0xe4>
 79a:	07 c0       	rjmp	.+14     	; 0x7aa <EXT_init+0xea>
				case FALLING: CLRBIT(MCUCSR, ISC2); break;
 79c:	84 b7       	in	r24, 0x34	; 52
 79e:	8f 7b       	andi	r24, 0xBF	; 191
 7a0:	84 bf       	out	0x34, r24	; 52
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <EXT_init+0xea>
				case RISING:  SETBIT(MCUCSR, ISC2); break;
 7a4:	84 b7       	in	r24, 0x34	; 52
 7a6:	80 64       	ori	r24, 0x40	; 64
 7a8:	84 bf       	out	0x34, r24	; 52
			}
			break;
		}
		
}
 7aa:	cf 91       	pop	r28
 7ac:	08 95       	ret

000007ae <EXT_callback>:

void EXT_callback(void (*PTR)(void) ,uint8 EXT_num){
	switch(EXT_num){
 7ae:	61 30       	cpi	r22, 0x01	; 1
 7b0:	49 f0       	breq	.+18     	; 0x7c4 <EXT_callback+0x16>
 7b2:	18 f0       	brcs	.+6      	; 0x7ba <EXT_callback+0xc>
 7b4:	62 30       	cpi	r22, 0x02	; 2
 7b6:	59 f0       	breq	.+22     	; 0x7ce <EXT_callback+0x20>
 7b8:	08 95       	ret
		case EXT0: ptr_EXT1 = PTR; break;
 7ba:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <ptr_EXT1+0x1>
 7be:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <ptr_EXT1>
 7c2:	08 95       	ret
		case EXT1: ptr_EXT2 = PTR; break;
 7c4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <ptr_EXT2+0x1>
 7c8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <ptr_EXT2>
 7cc:	08 95       	ret
		case EXT2: ptr_EXT3 = PTR; break;
 7ce:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 7d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
 7d6:	08 95       	ret

000007d8 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 7d8:	1f 92       	push	r1
 7da:	0f 92       	push	r0
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	0f 92       	push	r0
 7e0:	11 24       	eor	r1, r1
 7e2:	2f 93       	push	r18
 7e4:	3f 93       	push	r19
 7e6:	4f 93       	push	r20
 7e8:	5f 93       	push	r21
 7ea:	6f 93       	push	r22
 7ec:	7f 93       	push	r23
 7ee:	8f 93       	push	r24
 7f0:	9f 93       	push	r25
 7f2:	af 93       	push	r26
 7f4:	bf 93       	push	r27
 7f6:	ef 93       	push	r30
 7f8:	ff 93       	push	r31
	ptr_EXT1();
 7fa:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <ptr_EXT1>
 7fe:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <ptr_EXT1+0x1>
 802:	09 95       	icall
}
 804:	ff 91       	pop	r31
 806:	ef 91       	pop	r30
 808:	bf 91       	pop	r27
 80a:	af 91       	pop	r26
 80c:	9f 91       	pop	r25
 80e:	8f 91       	pop	r24
 810:	7f 91       	pop	r23
 812:	6f 91       	pop	r22
 814:	5f 91       	pop	r21
 816:	4f 91       	pop	r20
 818:	3f 91       	pop	r19
 81a:	2f 91       	pop	r18
 81c:	0f 90       	pop	r0
 81e:	0f be       	out	0x3f, r0	; 63
 820:	0f 90       	pop	r0
 822:	1f 90       	pop	r1
 824:	18 95       	reti

00000826 <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 826:	1f 92       	push	r1
 828:	0f 92       	push	r0
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	2f 93       	push	r18
 832:	3f 93       	push	r19
 834:	4f 93       	push	r20
 836:	5f 93       	push	r21
 838:	6f 93       	push	r22
 83a:	7f 93       	push	r23
 83c:	8f 93       	push	r24
 83e:	9f 93       	push	r25
 840:	af 93       	push	r26
 842:	bf 93       	push	r27
 844:	ef 93       	push	r30
 846:	ff 93       	push	r31
	ptr_EXT2();
 848:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <ptr_EXT2>
 84c:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <ptr_EXT2+0x1>
 850:	09 95       	icall
}
 852:	ff 91       	pop	r31
 854:	ef 91       	pop	r30
 856:	bf 91       	pop	r27
 858:	af 91       	pop	r26
 85a:	9f 91       	pop	r25
 85c:	8f 91       	pop	r24
 85e:	7f 91       	pop	r23
 860:	6f 91       	pop	r22
 862:	5f 91       	pop	r21
 864:	4f 91       	pop	r20
 866:	3f 91       	pop	r19
 868:	2f 91       	pop	r18
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
 87e:	2f 93       	push	r18
 880:	3f 93       	push	r19
 882:	4f 93       	push	r20
 884:	5f 93       	push	r21
 886:	6f 93       	push	r22
 888:	7f 93       	push	r23
 88a:	8f 93       	push	r24
 88c:	9f 93       	push	r25
 88e:	af 93       	push	r26
 890:	bf 93       	push	r27
 892:	ef 93       	push	r30
 894:	ff 93       	push	r31
	ptr_EXT3();
 896:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 89a:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 89e:	09 95       	icall
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	bf 91       	pop	r27
 8a6:	af 91       	pop	r26
 8a8:	9f 91       	pop	r25
 8aa:	8f 91       	pop	r24
 8ac:	7f 91       	pop	r23
 8ae:	6f 91       	pop	r22
 8b0:	5f 91       	pop	r21
 8b2:	4f 91       	pop	r20
 8b4:	3f 91       	pop	r19
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <GIE_Enable>:

#include "GIE_Interface.h"
#include "std_macros.h"

void GIE_Enable(void){
	SETBIT(SREG, I_BIT);
 8c2:	8f b7       	in	r24, 0x3f	; 63
 8c4:	80 68       	ori	r24, 0x80	; 128
 8c6:	8f bf       	out	0x3f, r24	; 63
 8c8:	08 95       	ret

000008ca <__udivmodsi4>:
 8ca:	a1 e2       	ldi	r26, 0x21	; 33
 8cc:	1a 2e       	mov	r1, r26
 8ce:	aa 1b       	sub	r26, r26
 8d0:	bb 1b       	sub	r27, r27
 8d2:	fd 01       	movw	r30, r26
 8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <__udivmodsi4_ep>

000008d6 <__udivmodsi4_loop>:
 8d6:	aa 1f       	adc	r26, r26
 8d8:	bb 1f       	adc	r27, r27
 8da:	ee 1f       	adc	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	a2 17       	cp	r26, r18
 8e0:	b3 07       	cpc	r27, r19
 8e2:	e4 07       	cpc	r30, r20
 8e4:	f5 07       	cpc	r31, r21
 8e6:	20 f0       	brcs	.+8      	; 0x8f0 <__udivmodsi4_ep>
 8e8:	a2 1b       	sub	r26, r18
 8ea:	b3 0b       	sbc	r27, r19
 8ec:	e4 0b       	sbc	r30, r20
 8ee:	f5 0b       	sbc	r31, r21

000008f0 <__udivmodsi4_ep>:
 8f0:	66 1f       	adc	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	1a 94       	dec	r1
 8fa:	69 f7       	brne	.-38     	; 0x8d6 <__udivmodsi4_loop>
 8fc:	60 95       	com	r22
 8fe:	70 95       	com	r23
 900:	80 95       	com	r24
 902:	90 95       	com	r25
 904:	9b 01       	movw	r18, r22
 906:	ac 01       	movw	r20, r24
 908:	bd 01       	movw	r22, r26
 90a:	cf 01       	movw	r24, r30
 90c:	08 95       	ret

0000090e <__divmodsi4>:
 90e:	05 2e       	mov	r0, r21
 910:	97 fb       	bst	r25, 7
 912:	1e f4       	brtc	.+6      	; 0x91a <__divmodsi4+0xc>
 914:	00 94       	com	r0
 916:	0e 94 9e 04 	call	0x93c	; 0x93c <__negsi2>
 91a:	57 fd       	sbrc	r21, 7
 91c:	07 d0       	rcall	.+14     	; 0x92c <__divmodsi4_neg2>
 91e:	0e 94 65 04 	call	0x8ca	; 0x8ca <__udivmodsi4>
 922:	07 fc       	sbrc	r0, 7
 924:	03 d0       	rcall	.+6      	; 0x92c <__divmodsi4_neg2>
 926:	4e f4       	brtc	.+18     	; 0x93a <__divmodsi4_exit>
 928:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__negsi2>

0000092c <__divmodsi4_neg2>:
 92c:	50 95       	com	r21
 92e:	40 95       	com	r20
 930:	30 95       	com	r19
 932:	21 95       	neg	r18
 934:	3f 4f       	sbci	r19, 0xFF	; 255
 936:	4f 4f       	sbci	r20, 0xFF	; 255
 938:	5f 4f       	sbci	r21, 0xFF	; 255

0000093a <__divmodsi4_exit>:
 93a:	08 95       	ret

0000093c <__negsi2>:
 93c:	90 95       	com	r25
 93e:	80 95       	com	r24
 940:	70 95       	com	r23
 942:	61 95       	neg	r22
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8f 4f       	sbci	r24, 0xFF	; 255
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	08 95       	ret

0000094c <__umulhisi3>:
 94c:	a2 9f       	mul	r26, r18
 94e:	b0 01       	movw	r22, r0
 950:	b3 9f       	mul	r27, r19
 952:	c0 01       	movw	r24, r0
 954:	a3 9f       	mul	r26, r19
 956:	70 0d       	add	r23, r0
 958:	81 1d       	adc	r24, r1
 95a:	11 24       	eor	r1, r1
 95c:	91 1d       	adc	r25, r1
 95e:	b2 9f       	mul	r27, r18
 960:	70 0d       	add	r23, r0
 962:	81 1d       	adc	r24, r1
 964:	11 24       	eor	r1, r1
 966:	91 1d       	adc	r25, r1
 968:	08 95       	ret

0000096a <_exit>:
 96a:	f8 94       	cli

0000096c <__stop_program>:
 96c:	ff cf       	rjmp	.-2      	; 0x96c <__stop_program>
