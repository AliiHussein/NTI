
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000063e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126f  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097b  00000000  00000000  00001a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089e  00000000  00000000  000023de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00002c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c8  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c1  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003ed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_1>
   8:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_2>
   c:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  8a:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:
 *  Author: Ali
 */ 

#include "Button.h"

void button_init(uint8 copy_u8PortID, uint8 copy_u8PinID){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	d6 2f       	mov	r29, r22
	DIO_voidSetPinDirection(copy_u8PortID, copy_u8PinID, INPUT);
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	0e 94 39 01 	call	0x272	; 0x272 <DIO_voidSetPinDirection>
	
	// Pullup
	switch(copy_u8PortID){
  a0:	c2 34       	cpi	r28, 0x42	; 66
  a2:	a1 f0       	breq	.+40     	; 0xcc <button_init+0x3a>
  a4:	18 f4       	brcc	.+6      	; 0xac <button_init+0x1a>
  a6:	c1 34       	cpi	r28, 0x41	; 65
  a8:	31 f0       	breq	.+12     	; 0xb6 <button_init+0x24>
  aa:	30 c0       	rjmp	.+96     	; 0x10c <button_init+0x7a>
  ac:	c3 34       	cpi	r28, 0x43	; 67
  ae:	c9 f0       	breq	.+50     	; 0xe2 <button_init+0x50>
  b0:	c4 34       	cpi	r28, 0x44	; 68
  b2:	11 f1       	breq	.+68     	; 0xf8 <button_init+0x66>
  b4:	2b c0       	rjmp	.+86     	; 0x10c <button_init+0x7a>
		case portA: SETBIT(PORTA, copy_u8PinID); break;
  b6:	2b b3       	in	r18, 0x1b	; 27
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <button_init+0x30>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	da 95       	dec	r29
  c4:	e2 f7       	brpl	.-8      	; 0xbe <button_init+0x2c>
  c6:	82 2b       	or	r24, r18
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	20 c0       	rjmp	.+64     	; 0x10c <button_init+0x7a>
		case portB: SETBIT(PORTB, copy_u8PinID); break;
  cc:	28 b3       	in	r18, 0x18	; 24
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <button_init+0x46>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	da 95       	dec	r29
  da:	e2 f7       	brpl	.-8      	; 0xd4 <button_init+0x42>
  dc:	82 2b       	or	r24, r18
  de:	88 bb       	out	0x18, r24	; 24
  e0:	15 c0       	rjmp	.+42     	; 0x10c <button_init+0x7a>
		case portC: SETBIT(PORTC, copy_u8PinID); break;
  e2:	25 b3       	in	r18, 0x15	; 21
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <button_init+0x5c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	da 95       	dec	r29
  f0:	e2 f7       	brpl	.-8      	; 0xea <button_init+0x58>
  f2:	82 2b       	or	r24, r18
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	0a c0       	rjmp	.+20     	; 0x10c <button_init+0x7a>
		case portD: SETBIT(PORTD, copy_u8PinID); break;
  f8:	22 b3       	in	r18, 0x12	; 18
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <button_init+0x72>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	da 95       	dec	r29
 106:	e2 f7       	brpl	.-8      	; 0x100 <button_init+0x6e>
 108:	82 2b       	or	r24, r18
 10a:	82 bb       	out	0x12, r24	; 18
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <button_read>:

uint8 button_read(uint8 copy_u8PortID, uint8 copy_u8PinID){
	return DIO_voidGetBitValue(copy_u8PortID, copy_u8PinID);
 112:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_voidGetBitValue>
}
 116:	08 95       	ret

00000118 <led_init>:
void led_on(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, HIGH);
}

void led_off(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, LOW);
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	0e 94 39 01 	call	0x272	; 0x272 <DIO_voidSetPinDirection>
 11e:	08 95       	ret

00000120 <led_toggle>:
}

void led_toggle(uint8 copy_u8PortID, uint8 copy_u8PinID){
	switch(copy_u8PortID){
 120:	82 34       	cpi	r24, 0x42	; 66
 122:	a1 f0       	breq	.+40     	; 0x14c <led_toggle+0x2c>
 124:	18 f4       	brcc	.+6      	; 0x12c <led_toggle+0xc>
 126:	81 34       	cpi	r24, 0x41	; 65
 128:	31 f0       	breq	.+12     	; 0x136 <led_toggle+0x16>
 12a:	08 95       	ret
 12c:	83 34       	cpi	r24, 0x43	; 67
 12e:	c9 f0       	breq	.+50     	; 0x162 <led_toggle+0x42>
 130:	84 34       	cpi	r24, 0x44	; 68
 132:	11 f1       	breq	.+68     	; 0x178 <led_toggle+0x58>
 134:	08 95       	ret
		case portA: TOGBIT(PORTA, copy_u8PinID); break;
 136:	2b b3       	in	r18, 0x1b	; 27
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <led_toggle+0x22>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <led_toggle+0x1e>
 146:	82 27       	eor	r24, r18
 148:	8b bb       	out	0x1b, r24	; 27
 14a:	08 95       	ret
		case portB: TOGBIT(PORTB, copy_u8PinID); break;
 14c:	28 b3       	in	r18, 0x18	; 24
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <led_toggle+0x38>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <led_toggle+0x34>
 15c:	82 27       	eor	r24, r18
 15e:	88 bb       	out	0x18, r24	; 24
 160:	08 95       	ret
		case portC: TOGBIT(PORTC, copy_u8PinID); break;
 162:	25 b3       	in	r18, 0x15	; 21
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <led_toggle+0x4e>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <led_toggle+0x4a>
 172:	82 27       	eor	r24, r18
 174:	85 bb       	out	0x15, r24	; 21
 176:	08 95       	ret
		case portD: TOGBIT(PORTD, copy_u8PinID); break;
 178:	22 b3       	in	r18, 0x12	; 18
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <led_toggle+0x64>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <led_toggle+0x60>
 188:	82 27       	eor	r24, r18
 18a:	82 bb       	out	0x12, r24	; 18
 18c:	08 95       	ret

0000018e <toggle_Yellow>:
#include "MCAL/DIO/DIO.h"
#include "MCAL/EXT/EXT_Interface.h"
#include "MCAL/GIE/GIE_Interface.h"

void toggle_Yellow(void){
	led_toggle(portA, 6);
 18e:	66 e0       	ldi	r22, 0x06	; 6
 190:	81 e4       	ldi	r24, 0x41	; 65
 192:	0e 94 90 00 	call	0x120	; 0x120 <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	81 ee       	ldi	r24, 0xE1	; 225
 19a:	94 e0       	ldi	r25, 0x04	; 4
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <toggle_Yellow+0xe>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <toggle_Yellow+0x18>
 1a6:	00 00       	nop
 1a8:	08 95       	ret

000001aa <toggle_Blue>:
	_delay_ms(100);
}

void toggle_Blue(void){
	led_toggle(portA, 5);
 1aa:	65 e0       	ldi	r22, 0x05	; 5
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 90 00 	call	0x120	; 0x120 <led_toggle>
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	81 ee       	ldi	r24, 0xE1	; 225
 1b6:	94 e0       	ldi	r25, 0x04	; 4
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <toggle_Blue+0xe>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <toggle_Blue+0x18>
 1c2:	00 00       	nop
 1c4:	08 95       	ret

000001c6 <toggle_RED>:
	led_toggle(portA, 4);
	_delay_ms(100);
}

void toggle_RED(void){
	led_toggle(portB, 7);
 1c6:	67 e0       	ldi	r22, 0x07	; 7
 1c8:	82 e4       	ldi	r24, 0x42	; 66
 1ca:	0e 94 90 00 	call	0x120	; 0x120 <led_toggle>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	81 ee       	ldi	r24, 0xE1	; 225
 1d2:	94 e0       	ldi	r25, 0x04	; 4
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <toggle_RED+0xe>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <toggle_RED+0x18>
 1de:	00 00       	nop
 1e0:	08 95       	ret

000001e2 <toggle_Green>:
	led_toggle(portA, 5);
	_delay_ms(100);
}

void toggle_Green(void){
	led_toggle(portA, 4);
 1e2:	64 e0       	ldi	r22, 0x04	; 4
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	0e 94 90 00 	call	0x120	; 0x120 <led_toggle>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	81 ee       	ldi	r24, 0xE1	; 225
 1ee:	94 e0       	ldi	r25, 0x04	; 4
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <toggle_Green+0xe>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <toggle_Green+0x18>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <main>:
}

int main(void)
{	
	// Leds Initialization
	led_init(portA, 6);
 1fe:	66 e0       	ldi	r22, 0x06	; 6
 200:	81 e4       	ldi	r24, 0x41	; 65
 202:	0e 94 8c 00 	call	0x118	; 0x118 <led_init>
	led_init(portA, 5);
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	81 e4       	ldi	r24, 0x41	; 65
 20a:	0e 94 8c 00 	call	0x118	; 0x118 <led_init>
	led_init(portA, 4);
 20e:	64 e0       	ldi	r22, 0x04	; 4
 210:	81 e4       	ldi	r24, 0x41	; 65
 212:	0e 94 8c 00 	call	0x118	; 0x118 <led_init>
	led_init(portB, 7);
 216:	67 e0       	ldi	r22, 0x07	; 7
 218:	82 e4       	ldi	r24, 0x42	; 66
 21a:	0e 94 8c 00 	call	0x118	; 0x118 <led_init>
		
	// EXT interrupt Initialization	
	EXT_init(EXT0, FALLING);
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 de 01 	call	0x3bc	; 0x3bc <EXT_init>
	EXT_init(EXT1, FALLING);
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 de 01 	call	0x3bc	; 0x3bc <EXT_init>
	EXT_init(EXT2, FALLING);
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 de 01 	call	0x3bc	; 0x3bc <EXT_init>
	EXT_callback(toggle_Blue, EXT0);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	85 ed       	ldi	r24, 0xD5	; 213
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 55 02 	call	0x4aa	; 0x4aa <EXT_callback>
	EXT_callback(toggle_RED, EXT1);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	83 ee       	ldi	r24, 0xE3	; 227
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 55 02 	call	0x4aa	; 0x4aa <EXT_callback>
	EXT_callback(toggle_Yellow, EXT2);
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	87 ec       	ldi	r24, 0xC7	; 199
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 55 02 	call	0x4aa	; 0x4aa <EXT_callback>
	
	// Button Init
	button_init(portD, 7);
 254:	67 e0       	ldi	r22, 0x07	; 7
 256:	84 e4       	ldi	r24, 0x44	; 68
 258:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
	
	// Global Interrupt Enabled
	GIE_Enable();
 25c:	0e 94 df 02 	call	0x5be	; 0x5be <GIE_Enable>
		Button 4 -> PD3 :: EXT1 -> PD3
	
	 */
	
	while(1){
		if(!button_read(portD, 7)){
 260:	67 e0       	ldi	r22, 0x07	; 7
 262:	84 e4       	ldi	r24, 0x44	; 68
 264:	0e 94 89 00 	call	0x112	; 0x112 <button_read>
 268:	81 11       	cpse	r24, r1
 26a:	fa cf       	rjmp	.-12     	; 0x260 <main+0x62>
			toggle_Green();
 26c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <toggle_Green>
 270:	f7 cf       	rjmp	.-18     	; 0x260 <main+0x62>

00000272 <DIO_voidSetPinDirection>:
	else{ // HIGH
		switch(copy_u8PortID){
			case portA: SETBIT(PORTA, copy_u8PinID); break;
			case portB: SETBIT(PORTB, copy_u8PinID); break;
			case portC: SETBIT(PORTC, copy_u8PinID); break;
			case portD: SETBIT(PORTD, copy_u8PinID); break;
 272:	41 11       	cpse	r20, r1
 274:	3b c0       	rjmp	.+118    	; 0x2ec <DIO_voidSetPinDirection+0x7a>
 276:	82 34       	cpi	r24, 0x42	; 66
 278:	a9 f0       	breq	.+42     	; 0x2a4 <DIO_voidSetPinDirection+0x32>
 27a:	18 f4       	brcc	.+6      	; 0x282 <DIO_voidSetPinDirection+0x10>
 27c:	81 34       	cpi	r24, 0x41	; 65
 27e:	31 f0       	breq	.+12     	; 0x28c <DIO_voidSetPinDirection+0x1a>
 280:	08 95       	ret
 282:	83 34       	cpi	r24, 0x43	; 67
 284:	d9 f0       	breq	.+54     	; 0x2bc <DIO_voidSetPinDirection+0x4a>
 286:	84 34       	cpi	r24, 0x44	; 68
 288:	29 f1       	breq	.+74     	; 0x2d4 <DIO_voidSetPinDirection+0x62>
 28a:	08 95       	ret
 28c:	2a b3       	in	r18, 0x1a	; 26
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_voidSetPinDirection+0x26>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_voidSetPinDirection+0x22>
 29c:	80 95       	com	r24
 29e:	82 23       	and	r24, r18
 2a0:	8a bb       	out	0x1a, r24	; 26
 2a2:	08 95       	ret
 2a4:	27 b3       	in	r18, 0x17	; 23
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_voidSetPinDirection+0x3e>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_voidSetPinDirection+0x3a>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	87 bb       	out	0x17, r24	; 23
 2ba:	08 95       	ret
 2bc:	24 b3       	in	r18, 0x14	; 20
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_voidSetPinDirection+0x56>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_voidSetPinDirection+0x52>
 2cc:	80 95       	com	r24
 2ce:	82 23       	and	r24, r18
 2d0:	84 bb       	out	0x14, r24	; 20
 2d2:	08 95       	ret
 2d4:	21 b3       	in	r18, 0x11	; 17
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_voidSetPinDirection+0x6e>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_voidSetPinDirection+0x6a>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	81 bb       	out	0x11, r24	; 17
 2ea:	08 95       	ret
 2ec:	82 34       	cpi	r24, 0x42	; 66
 2ee:	a1 f0       	breq	.+40     	; 0x318 <DIO_voidSetPinDirection+0xa6>
 2f0:	18 f4       	brcc	.+6      	; 0x2f8 <DIO_voidSetPinDirection+0x86>
 2f2:	81 34       	cpi	r24, 0x41	; 65
 2f4:	31 f0       	breq	.+12     	; 0x302 <DIO_voidSetPinDirection+0x90>
 2f6:	08 95       	ret
 2f8:	83 34       	cpi	r24, 0x43	; 67
 2fa:	c9 f0       	breq	.+50     	; 0x32e <DIO_voidSetPinDirection+0xbc>
 2fc:	84 34       	cpi	r24, 0x44	; 68
 2fe:	11 f1       	breq	.+68     	; 0x344 <DIO_voidSetPinDirection+0xd2>
 300:	08 95       	ret
 302:	2a b3       	in	r18, 0x1a	; 26
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_voidSetPinDirection+0x9c>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_voidSetPinDirection+0x98>
 312:	82 2b       	or	r24, r18
 314:	8a bb       	out	0x1a, r24	; 26
 316:	08 95       	ret
 318:	27 b3       	in	r18, 0x17	; 23
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_voidSetPinDirection+0xb2>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_voidSetPinDirection+0xae>
 328:	82 2b       	or	r24, r18
 32a:	87 bb       	out	0x17, r24	; 23
 32c:	08 95       	ret
 32e:	24 b3       	in	r18, 0x14	; 20
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_voidSetPinDirection+0xc8>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_voidSetPinDirection+0xc4>
 33e:	82 2b       	or	r24, r18
 340:	84 bb       	out	0x14, r24	; 20
 342:	08 95       	ret
 344:	21 b3       	in	r18, 0x11	; 17
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_voidSetPinDirection+0xde>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_voidSetPinDirection+0xda>
 354:	82 2b       	or	r24, r18
 356:	81 bb       	out	0x11, r24	; 17
 358:	08 95       	ret

0000035a <DIO_voidGetBitValue>:
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
	switch(copy_u8PortID){
 35a:	82 34       	cpi	r24, 0x42	; 66
 35c:	91 f0       	breq	.+36     	; 0x382 <DIO_voidGetBitValue+0x28>
 35e:	18 f4       	brcc	.+6      	; 0x366 <DIO_voidGetBitValue+0xc>
 360:	81 34       	cpi	r24, 0x41	; 65
 362:	31 f0       	breq	.+12     	; 0x370 <DIO_voidGetBitValue+0x16>
 364:	29 c0       	rjmp	.+82     	; 0x3b8 <DIO_voidGetBitValue+0x5e>
 366:	83 34       	cpi	r24, 0x43	; 67
 368:	a9 f0       	breq	.+42     	; 0x394 <DIO_voidGetBitValue+0x3a>
 36a:	84 34       	cpi	r24, 0x44	; 68
 36c:	e1 f0       	breq	.+56     	; 0x3a6 <DIO_voidGetBitValue+0x4c>
 36e:	24 c0       	rjmp	.+72     	; 0x3b8 <DIO_voidGetBitValue+0x5e>
		case portA: value = READBIT(PINA, copy_u8PinID); break;
 370:	89 b3       	in	r24, 0x19	; 25
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_voidGetBitValue+0x20>
 376:	95 95       	asr	r25
 378:	87 95       	ror	r24
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_voidGetBitValue+0x1c>
 37e:	81 70       	andi	r24, 0x01	; 1
 380:	08 95       	ret
		case portB: value = READBIT(PINB, copy_u8PinID); break;
 382:	86 b3       	in	r24, 0x16	; 22
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_voidGetBitValue+0x32>
 388:	95 95       	asr	r25
 38a:	87 95       	ror	r24
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_voidGetBitValue+0x2e>
 390:	81 70       	andi	r24, 0x01	; 1
 392:	08 95       	ret
		case portC: value = READBIT(PINC, copy_u8PinID); break;
 394:	83 b3       	in	r24, 0x13	; 19
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_voidGetBitValue+0x44>
 39a:	95 95       	asr	r25
 39c:	87 95       	ror	r24
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_voidGetBitValue+0x40>
 3a2:	81 70       	andi	r24, 0x01	; 1
 3a4:	08 95       	ret
		case portD: value = READBIT(PIND, copy_u8PinID); break;
 3a6:	80 b3       	in	r24, 0x10	; 16
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_voidGetBitValue+0x56>
 3ac:	95 95       	asr	r25
 3ae:	87 95       	ror	r24
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_voidGetBitValue+0x52>
 3b4:	81 70       	andi	r24, 0x01	; 1
 3b6:	08 95       	ret
		}
	}
}

uint8 DIO_voidGetBitValue(uint8 copy_u8PortID, uint8 copy_u8PinID){
	uint8 value = 0;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
		case portB: value = READBIT(PINB, copy_u8PinID); break;
		case portC: value = READBIT(PINC, copy_u8PinID); break;
		case portD: value = READBIT(PIND, copy_u8PinID); break;
	}
	return value;
 3ba:	08 95       	ret

000003bc <EXT_init>:

void (*ptr_EXT1)(void) = NULL;
void (*ptr_EXT2)(void) = NULL;
void (*ptr_EXT3)(void) = NULL;

void EXT_init(uint8 EXT_num, uint8 EXT_sens){
 3bc:	cf 93       	push	r28
 3be:	c6 2f       	mov	r28, r22
		switch(EXT_num){
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	89 f1       	breq	.+98     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3c4:	20 f0       	brcs	.+8      	; 0x3ce <EXT_init+0x12>
 3c6:	82 30       	cpi	r24, 0x02	; 2
 3c8:	09 f4       	brne	.+2      	; 0x3cc <EXT_init+0x10>
 3ca:	59 c0       	rjmp	.+178    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 3cc:	6c c0       	rjmp	.+216    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			case EXT0: 
			// Enable INT0 from GICR
			SETBIT(GICR, INT0); 
 3ce:	8b b7       	in	r24, 0x3b	; 59
 3d0:	80 64       	ori	r24, 0x40	; 64
 3d2:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portD, 2, INPUT);
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	84 e4       	ldi	r24, 0x44	; 68
 3da:	0e 94 39 01 	call	0x272	; 0x272 <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 3de:	c1 30       	cpi	r28, 0x01	; 1
 3e0:	69 f0       	breq	.+26     	; 0x3fc <EXT_init+0x40>
 3e2:	28 f0       	brcs	.+10     	; 0x3ee <EXT_init+0x32>
 3e4:	c2 30       	cpi	r28, 0x02	; 2
 3e6:	89 f0       	breq	.+34     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3e8:	c3 30       	cpi	r28, 0x03	; 3
 3ea:	b1 f0       	breq	.+44     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3ec:	5c c0       	rjmp	.+184    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case LOW_Level: CLRBIT(MCUCR, ISC01); CLRBIT(MCUCR, ISC00); break;
 3ee:	85 b7       	in	r24, 0x35	; 53
 3f0:	8d 7f       	andi	r24, 0xFD	; 253
 3f2:	85 bf       	out	0x35, r24	; 53
 3f4:	85 b7       	in	r24, 0x35	; 53
 3f6:	8e 7f       	andi	r24, 0xFE	; 254
 3f8:	85 bf       	out	0x35, r24	; 53
 3fa:	55 c0       	rjmp	.+170    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case CHANGE:    CLRBIT(MCUCR, ISC01); SETBIT(MCUCR, ISC00); break;
 3fc:	85 b7       	in	r24, 0x35	; 53
 3fe:	8d 7f       	andi	r24, 0xFD	; 253
 400:	85 bf       	out	0x35, r24	; 53
 402:	85 b7       	in	r24, 0x35	; 53
 404:	81 60       	ori	r24, 0x01	; 1
 406:	85 bf       	out	0x35, r24	; 53
 408:	4e c0       	rjmp	.+156    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case FALLING:   SETBIT(MCUCR, ISC01); CLRBIT(MCUCR, ISC00); break;
 40a:	85 b7       	in	r24, 0x35	; 53
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	85 bf       	out	0x35, r24	; 53
 410:	85 b7       	in	r24, 0x35	; 53
 412:	8e 7f       	andi	r24, 0xFE	; 254
 414:	85 bf       	out	0x35, r24	; 53
 416:	47 c0       	rjmp	.+142    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case RISING:    SETBIT(MCUCR, ISC01); SETBIT(MCUCR, ISC00); break;
 418:	85 b7       	in	r24, 0x35	; 53
 41a:	82 60       	ori	r24, 0x02	; 2
 41c:	85 bf       	out	0x35, r24	; 53
 41e:	85 b7       	in	r24, 0x35	; 53
 420:	81 60       	ori	r24, 0x01	; 1
 422:	85 bf       	out	0x35, r24	; 53
 424:	40 c0       	rjmp	.+128    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			
			break;
			/***************************************************************************/
			case EXT1: 
			// Enable INT1 from GICR
			SETBIT(GICR, INT1); 
 426:	8b b7       	in	r24, 0x3b	; 59
 428:	80 68       	ori	r24, 0x80	; 128
 42a:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portD, 3, INPUT);
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	63 e0       	ldi	r22, 0x03	; 3
 430:	84 e4       	ldi	r24, 0x44	; 68
 432:	0e 94 39 01 	call	0x272	; 0x272 <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 436:	c1 30       	cpi	r28, 0x01	; 1
 438:	69 f0       	breq	.+26     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 43a:	28 f0       	brcs	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43c:	c2 30       	cpi	r28, 0x02	; 2
 43e:	89 f0       	breq	.+34     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 440:	c3 30       	cpi	r28, 0x03	; 3
 442:	b1 f0       	breq	.+44     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 444:	30 c0       	rjmp	.+96     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case LOW_Level: CLRBIT(MCUCR, ISC11); CLRBIT(MCUCR, ISC10); break;
 446:	85 b7       	in	r24, 0x35	; 53
 448:	87 7f       	andi	r24, 0xF7	; 247
 44a:	85 bf       	out	0x35, r24	; 53
 44c:	85 b7       	in	r24, 0x35	; 53
 44e:	8b 7f       	andi	r24, 0xFB	; 251
 450:	85 bf       	out	0x35, r24	; 53
 452:	29 c0       	rjmp	.+82     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case CHANGE:    CLRBIT(MCUCR, ISC11); SETBIT(MCUCR, ISC10); break;
 454:	85 b7       	in	r24, 0x35	; 53
 456:	87 7f       	andi	r24, 0xF7	; 247
 458:	85 bf       	out	0x35, r24	; 53
 45a:	85 b7       	in	r24, 0x35	; 53
 45c:	84 60       	ori	r24, 0x04	; 4
 45e:	85 bf       	out	0x35, r24	; 53
 460:	22 c0       	rjmp	.+68     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case FALLING:   SETBIT(MCUCR, ISC11); CLRBIT(MCUCR, ISC10); break;
 462:	85 b7       	in	r24, 0x35	; 53
 464:	88 60       	ori	r24, 0x08	; 8
 466:	85 bf       	out	0x35, r24	; 53
 468:	85 b7       	in	r24, 0x35	; 53
 46a:	8b 7f       	andi	r24, 0xFB	; 251
 46c:	85 bf       	out	0x35, r24	; 53
 46e:	1b c0       	rjmp	.+54     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case RISING:    SETBIT(MCUCR, ISC11); SETBIT(MCUCR, ISC10); break;
 470:	85 b7       	in	r24, 0x35	; 53
 472:	88 60       	ori	r24, 0x08	; 8
 474:	85 bf       	out	0x35, r24	; 53
 476:	85 b7       	in	r24, 0x35	; 53
 478:	84 60       	ori	r24, 0x04	; 4
 47a:	85 bf       	out	0x35, r24	; 53
 47c:	14 c0       	rjmp	.+40     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			break;
			
			/***************************************************************************/
			case EXT2: 
			// Enable INT2 from GICR
			SETBIT(GICR, INT2);
 47e:	8b b7       	in	r24, 0x3b	; 59
 480:	80 62       	ori	r24, 0x20	; 32
 482:	8b bf       	out	0x3b, r24	; 59
			// Button Direction (INPUT)
			DIO_voidSetPinDirection(portB, 2, INPUT);
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	62 e0       	ldi	r22, 0x02	; 2
 488:	82 e4       	ldi	r24, 0x42	; 66
 48a:	0e 94 39 01 	call	0x272	; 0x272 <DIO_voidSetPinDirection>
			// Switch on Sens
			switch(EXT_sens){
 48e:	c2 30       	cpi	r28, 0x02	; 2
 490:	19 f0       	breq	.+6      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 492:	c3 30       	cpi	r28, 0x03	; 3
 494:	29 f0       	breq	.+10     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 496:	07 c0       	rjmp	.+14     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case FALLING: CLRBIT(MCUCSR, ISC2); break;
 498:	84 b7       	in	r24, 0x34	; 52
 49a:	8f 7b       	andi	r24, 0xBF	; 191
 49c:	84 bf       	out	0x34, r24	; 52
 49e:	03 c0       	rjmp	.+6      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
				case RISING:  SETBIT(MCUCSR, ISC2); break;
 4a0:	84 b7       	in	r24, 0x34	; 52
 4a2:	80 64       	ori	r24, 0x40	; 64
 4a4:	84 bf       	out	0x34, r24	; 52
			}
			break;
		}
		
}
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <EXT_callback>:

void EXT_callback(void (*PTR)(void) ,uint8 EXT_num){
	switch(EXT_num){
 4aa:	61 30       	cpi	r22, 0x01	; 1
 4ac:	49 f0       	breq	.+18     	; 0x4c0 <EXT_callback+0x16>
 4ae:	18 f0       	brcs	.+6      	; 0x4b6 <EXT_callback+0xc>
 4b0:	62 30       	cpi	r22, 0x02	; 2
 4b2:	59 f0       	breq	.+22     	; 0x4ca <EXT_callback+0x20>
 4b4:	08 95       	ret
		case EXT0: ptr_EXT1 = PTR; break;
 4b6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ptr_EXT1+0x1>
 4ba:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ptr_EXT1>
 4be:	08 95       	ret
		case EXT1: ptr_EXT2 = PTR; break;
 4c0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <ptr_EXT2+0x1>
 4c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ptr_EXT2>
 4c8:	08 95       	ret
		case EXT2: ptr_EXT3 = PTR; break;
 4ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 4d2:	08 95       	ret

000004d4 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	2f 93       	push	r18
 4e0:	3f 93       	push	r19
 4e2:	4f 93       	push	r20
 4e4:	5f 93       	push	r21
 4e6:	6f 93       	push	r22
 4e8:	7f 93       	push	r23
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
 4ee:	af 93       	push	r26
 4f0:	bf 93       	push	r27
 4f2:	ef 93       	push	r30
 4f4:	ff 93       	push	r31
	ptr_EXT1();
 4f6:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ptr_EXT1>
 4fa:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ptr_EXT1+0x1>
 4fe:	09 95       	icall
}
 500:	ff 91       	pop	r31
 502:	ef 91       	pop	r30
 504:	bf 91       	pop	r27
 506:	af 91       	pop	r26
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	7f 91       	pop	r23
 50e:	6f 91       	pop	r22
 510:	5f 91       	pop	r21
 512:	4f 91       	pop	r20
 514:	3f 91       	pop	r19
 516:	2f 91       	pop	r18
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
	ptr_EXT2();
 544:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ptr_EXT2>
 548:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ptr_EXT2+0x1>
 54c:	09 95       	icall
}
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	bf 91       	pop	r27
 554:	af 91       	pop	r26
 556:	9f 91       	pop	r25
 558:	8f 91       	pop	r24
 55a:	7f 91       	pop	r23
 55c:	6f 91       	pop	r22
 55e:	5f 91       	pop	r21
 560:	4f 91       	pop	r20
 562:	3f 91       	pop	r19
 564:	2f 91       	pop	r18
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 570:	1f 92       	push	r1
 572:	0f 92       	push	r0
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	0f 92       	push	r0
 578:	11 24       	eor	r1, r1
 57a:	2f 93       	push	r18
 57c:	3f 93       	push	r19
 57e:	4f 93       	push	r20
 580:	5f 93       	push	r21
 582:	6f 93       	push	r22
 584:	7f 93       	push	r23
 586:	8f 93       	push	r24
 588:	9f 93       	push	r25
 58a:	af 93       	push	r26
 58c:	bf 93       	push	r27
 58e:	ef 93       	push	r30
 590:	ff 93       	push	r31
	ptr_EXT3();
 592:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 596:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 59a:	09 95       	icall
 59c:	ff 91       	pop	r31
 59e:	ef 91       	pop	r30
 5a0:	bf 91       	pop	r27
 5a2:	af 91       	pop	r26
 5a4:	9f 91       	pop	r25
 5a6:	8f 91       	pop	r24
 5a8:	7f 91       	pop	r23
 5aa:	6f 91       	pop	r22
 5ac:	5f 91       	pop	r21
 5ae:	4f 91       	pop	r20
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <GIE_Enable>:

#include "GIE_Interface.h"
#include "std_macros.h"

void GIE_Enable(void){
	SETBIT(SREG, I_BIT);
 5be:	8f b7       	in	r24, 0x3f	; 63
 5c0:	80 68       	ori	r24, 0x80	; 128
 5c2:	8f bf       	out	0x3f, r24	; 63
 5c4:	08 95       	ret

000005c6 <_exit>:
 5c6:	f8 94       	cli

000005c8 <__stop_program>:
 5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <__stop_program>
