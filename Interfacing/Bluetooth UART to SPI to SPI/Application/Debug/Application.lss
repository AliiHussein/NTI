
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000860  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000860  000008f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800074  00800074  00000908  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d04  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce9  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001136  00000000  00000000  00003569  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000057c  00000000  00000000  000046a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080d  00000000  00000000  00004c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001495  00000000  00000000  00005429  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000068be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_1>
   8:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_2>
   c:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_10>
  2c:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 02 	call	0x410	; 0x410 <main>
  8a:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_write_char>:
* Purpose      : Write a specific Ascii char (data) to lcd (valid only with 4-bit mode)
* Parameters   : data  (data to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_char(uint8 data){
	LCD_RS(1);
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	98 60       	ori	r25, 0x08	; 8
  96:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(data, 4));
  98:	84 ff       	sbrs	r24, 4
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <LCD_write_char+0x12>
  9c:	98 b3       	in	r25, 0x18	; 24
  9e:	91 60       	ori	r25, 0x01	; 1
  a0:	98 bb       	out	0x18, r25	; 24
  a2:	03 c0       	rjmp	.+6      	; 0xaa <LCD_write_char+0x18>
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	9e 7f       	andi	r25, 0xFE	; 254
  a8:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 5));
  aa:	85 ff       	sbrs	r24, 5
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <LCD_write_char+0x24>
  ae:	98 b3       	in	r25, 0x18	; 24
  b0:	92 60       	ori	r25, 0x02	; 2
  b2:	98 bb       	out	0x18, r25	; 24
  b4:	03 c0       	rjmp	.+6      	; 0xbc <LCD_write_char+0x2a>
  b6:	98 b3       	in	r25, 0x18	; 24
  b8:	9d 7f       	andi	r25, 0xFD	; 253
  ba:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 6));
  bc:	86 ff       	sbrs	r24, 6
  be:	04 c0       	rjmp	.+8      	; 0xc8 <LCD_write_char+0x36>
  c0:	98 b3       	in	r25, 0x18	; 24
  c2:	94 60       	ori	r25, 0x04	; 4
  c4:	98 bb       	out	0x18, r25	; 24
  c6:	03 c0       	rjmp	.+6      	; 0xce <LCD_write_char+0x3c>
  c8:	98 b3       	in	r25, 0x18	; 24
  ca:	9b 7f       	andi	r25, 0xFB	; 251
  cc:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 7));
  ce:	88 23       	and	r24, r24
  d0:	24 f4       	brge	.+8      	; 0xda <LCD_write_char+0x48>
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	90 61       	ori	r25, 0x10	; 16
  d6:	98 bb       	out	0x18, r25	; 24
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <LCD_write_char+0x4e>
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	9f 7e       	andi	r25, 0xEF	; 239
  de:	98 bb       	out	0x18, r25	; 24
	
	LCD_EN(1);
  e0:	9b b3       	in	r25, 0x1b	; 27
  e2:	94 60       	ori	r25, 0x04	; 4
  e4:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	ef e9       	ldi	r30, 0x9F	; 159
  e8:	ff e0       	ldi	r31, 0x0F	; 15
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_write_char+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_write_char+0x5e>
  f0:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
  f2:	9b b3       	in	r25, 0x1b	; 27
  f4:	9b 7f       	andi	r25, 0xFB	; 251
  f6:	9b bb       	out	0x1b, r25	; 27
  f8:	ef e9       	ldi	r30, 0x9F	; 159
  fa:	ff e0       	ldi	r31, 0x0F	; 15
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_write_char+0x6a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_write_char+0x70>
 102:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(data, 0));
 104:	80 ff       	sbrs	r24, 0
 106:	04 c0       	rjmp	.+8      	; 0x110 <LCD_write_char+0x7e>
 108:	98 b3       	in	r25, 0x18	; 24
 10a:	91 60       	ori	r25, 0x01	; 1
 10c:	98 bb       	out	0x18, r25	; 24
 10e:	03 c0       	rjmp	.+6      	; 0x116 <LCD_write_char+0x84>
 110:	98 b3       	in	r25, 0x18	; 24
 112:	9e 7f       	andi	r25, 0xFE	; 254
 114:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(data, 1));
 116:	81 ff       	sbrs	r24, 1
 118:	04 c0       	rjmp	.+8      	; 0x122 <LCD_write_char+0x90>
 11a:	98 b3       	in	r25, 0x18	; 24
 11c:	92 60       	ori	r25, 0x02	; 2
 11e:	98 bb       	out	0x18, r25	; 24
 120:	03 c0       	rjmp	.+6      	; 0x128 <LCD_write_char+0x96>
 122:	98 b3       	in	r25, 0x18	; 24
 124:	9d 7f       	andi	r25, 0xFD	; 253
 126:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(data, 2));
 128:	82 ff       	sbrs	r24, 2
 12a:	04 c0       	rjmp	.+8      	; 0x134 <LCD_write_char+0xa2>
 12c:	98 b3       	in	r25, 0x18	; 24
 12e:	94 60       	ori	r25, 0x04	; 4
 130:	98 bb       	out	0x18, r25	; 24
 132:	03 c0       	rjmp	.+6      	; 0x13a <LCD_write_char+0xa8>
 134:	98 b3       	in	r25, 0x18	; 24
 136:	9b 7f       	andi	r25, 0xFB	; 251
 138:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(data, 3));
 13a:	83 ff       	sbrs	r24, 3
 13c:	04 c0       	rjmp	.+8      	; 0x146 <LCD_write_char+0xb4>
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	80 61       	ori	r24, 0x10	; 16
 142:	88 bb       	out	0x18, r24	; 24
 144:	03 c0       	rjmp	.+6      	; 0x14c <LCD_write_char+0xba>
 146:	88 b3       	in	r24, 0x18	; 24
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 14c:	8b b3       	in	r24, 0x1b	; 27
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	8b bb       	out	0x1b, r24	; 27
 152:	8f e9       	ldi	r24, 0x9F	; 159
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_write_char+0xc4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_write_char+0xca>
 15c:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	8b bb       	out	0x1b, r24	; 27
 164:	ef e9       	ldi	r30, 0x9F	; 159
 166:	ff e0       	ldi	r31, 0x0F	; 15
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_write_char+0xd6>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_write_char+0xdc>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <LCD_write_command>:
* Purpose      : Send a specific command (cmd) to lcd (valid only with 4-bit mode)
* Parameters   : cmd  (command to be done by lcd)
* Return value : void
*****************************************************************************/
void LCD_write_command(uint8 cmd){
	LCD_RS(0);
 172:	9b b3       	in	r25, 0x1b	; 27
 174:	97 7f       	andi	r25, 0xF7	; 247
 176:	9b bb       	out	0x1b, r25	; 27
	LCD_D4(READBIT(cmd, 4));
 178:	84 ff       	sbrs	r24, 4
 17a:	04 c0       	rjmp	.+8      	; 0x184 <LCD_write_command+0x12>
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	91 60       	ori	r25, 0x01	; 1
 180:	98 bb       	out	0x18, r25	; 24
 182:	03 c0       	rjmp	.+6      	; 0x18a <LCD_write_command+0x18>
 184:	98 b3       	in	r25, 0x18	; 24
 186:	9e 7f       	andi	r25, 0xFE	; 254
 188:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 5));
 18a:	85 ff       	sbrs	r24, 5
 18c:	04 c0       	rjmp	.+8      	; 0x196 <LCD_write_command+0x24>
 18e:	98 b3       	in	r25, 0x18	; 24
 190:	92 60       	ori	r25, 0x02	; 2
 192:	98 bb       	out	0x18, r25	; 24
 194:	03 c0       	rjmp	.+6      	; 0x19c <LCD_write_command+0x2a>
 196:	98 b3       	in	r25, 0x18	; 24
 198:	9d 7f       	andi	r25, 0xFD	; 253
 19a:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 6));
 19c:	86 ff       	sbrs	r24, 6
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <LCD_write_command+0x36>
 1a0:	98 b3       	in	r25, 0x18	; 24
 1a2:	94 60       	ori	r25, 0x04	; 4
 1a4:	98 bb       	out	0x18, r25	; 24
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <LCD_write_command+0x3c>
 1a8:	98 b3       	in	r25, 0x18	; 24
 1aa:	9b 7f       	andi	r25, 0xFB	; 251
 1ac:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 7));
 1ae:	88 23       	and	r24, r24
 1b0:	24 f4       	brge	.+8      	; 0x1ba <LCD_write_command+0x48>
 1b2:	98 b3       	in	r25, 0x18	; 24
 1b4:	90 61       	ori	r25, 0x10	; 16
 1b6:	98 bb       	out	0x18, r25	; 24
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <LCD_write_command+0x4e>
 1ba:	98 b3       	in	r25, 0x18	; 24
 1bc:	9f 7e       	andi	r25, 0xEF	; 239
 1be:	98 bb       	out	0x18, r25	; 24

	LCD_EN(1);
 1c0:	9b b3       	in	r25, 0x1b	; 27
 1c2:	94 60       	ori	r25, 0x04	; 4
 1c4:	9b bb       	out	0x1b, r25	; 27
 1c6:	ef e9       	ldi	r30, 0x9F	; 159
 1c8:	ff e0       	ldi	r31, 0x0F	; 15
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_write_command+0x58>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_write_command+0x5e>
 1d0:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 1d2:	9b b3       	in	r25, 0x1b	; 27
 1d4:	9b 7f       	andi	r25, 0xFB	; 251
 1d6:	9b bb       	out	0x1b, r25	; 27
 1d8:	ef e9       	ldi	r30, 0x9F	; 159
 1da:	ff e0       	ldi	r31, 0x0F	; 15
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_write_command+0x6a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_write_command+0x70>
 1e2:	00 00       	nop
	_delay_ms(1);
	
	LCD_D4(READBIT(cmd, 0));
 1e4:	80 ff       	sbrs	r24, 0
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <LCD_write_command+0x7e>
 1e8:	98 b3       	in	r25, 0x18	; 24
 1ea:	91 60       	ori	r25, 0x01	; 1
 1ec:	98 bb       	out	0x18, r25	; 24
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <LCD_write_command+0x84>
 1f0:	98 b3       	in	r25, 0x18	; 24
 1f2:	9e 7f       	andi	r25, 0xFE	; 254
 1f4:	98 bb       	out	0x18, r25	; 24
	LCD_D5(READBIT(cmd, 1));
 1f6:	81 ff       	sbrs	r24, 1
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <LCD_write_command+0x90>
 1fa:	98 b3       	in	r25, 0x18	; 24
 1fc:	92 60       	ori	r25, 0x02	; 2
 1fe:	98 bb       	out	0x18, r25	; 24
 200:	03 c0       	rjmp	.+6      	; 0x208 <LCD_write_command+0x96>
 202:	98 b3       	in	r25, 0x18	; 24
 204:	9d 7f       	andi	r25, 0xFD	; 253
 206:	98 bb       	out	0x18, r25	; 24
	LCD_D6(READBIT(cmd, 2));
 208:	82 ff       	sbrs	r24, 2
 20a:	04 c0       	rjmp	.+8      	; 0x214 <LCD_write_command+0xa2>
 20c:	98 b3       	in	r25, 0x18	; 24
 20e:	94 60       	ori	r25, 0x04	; 4
 210:	98 bb       	out	0x18, r25	; 24
 212:	03 c0       	rjmp	.+6      	; 0x21a <LCD_write_command+0xa8>
 214:	98 b3       	in	r25, 0x18	; 24
 216:	9b 7f       	andi	r25, 0xFB	; 251
 218:	98 bb       	out	0x18, r25	; 24
	LCD_D7(READBIT(cmd, 3));
 21a:	83 ff       	sbrs	r24, 3
 21c:	04 c0       	rjmp	.+8      	; 0x226 <LCD_write_command+0xb4>
 21e:	88 b3       	in	r24, 0x18	; 24
 220:	80 61       	ori	r24, 0x10	; 16
 222:	88 bb       	out	0x18, r24	; 24
 224:	03 c0       	rjmp	.+6      	; 0x22c <LCD_write_command+0xba>
 226:	88 b3       	in	r24, 0x18	; 24
 228:	8f 7e       	andi	r24, 0xEF	; 239
 22a:	88 bb       	out	0x18, r24	; 24
	
	LCD_EN(1);
 22c:	8b b3       	in	r24, 0x1b	; 27
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	8b bb       	out	0x1b, r24	; 27
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_write_command+0xc4>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_write_command+0xca>
 23c:	00 00       	nop
	_delay_ms(1);
	LCD_EN(0);
 23e:	8b b3       	in	r24, 0x1b	; 27
 240:	8b 7f       	andi	r24, 0xFB	; 251
 242:	8b bb       	out	0x1b, r24	; 27
 244:	ef e9       	ldi	r30, 0x9F	; 159
 246:	ff e0       	ldi	r31, 0x0F	; 15
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_write_command+0xd6>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_write_command+0xdc>
 24e:	00 00       	nop
 250:	08 95       	ret

00000252 <LCD_init>:
* Parameters   : void
* Return value : void

*****************************************************************************/
void LCD_init(void){
	INIT_LCD_PINS();
 252:	8a b3       	in	r24, 0x1a	; 26
 254:	88 60       	ori	r24, 0x08	; 8
 256:	8a bb       	out	0x1a, r24	; 26
 258:	8a b3       	in	r24, 0x1a	; 26
 25a:	84 60       	ori	r24, 0x04	; 4
 25c:	8a bb       	out	0x1a, r24	; 26
 25e:	87 b3       	in	r24, 0x17	; 23
 260:	81 60       	ori	r24, 0x01	; 1
 262:	87 bb       	out	0x17, r24	; 23
 264:	87 b3       	in	r24, 0x17	; 23
 266:	82 60       	ori	r24, 0x02	; 2
 268:	87 bb       	out	0x17, r24	; 23
 26a:	87 b3       	in	r24, 0x17	; 23
 26c:	84 60       	ori	r24, 0x04	; 4
 26e:	87 bb       	out	0x17, r24	; 23
 270:	87 b3       	in	r24, 0x17	; 23
 272:	80 61       	ori	r24, 0x10	; 16
 274:	87 bb       	out	0x17, r24	; 23
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	89 ef       	ldi	r24, 0xF9	; 249
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <LCD_init+0x2a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_init+0x34>
 286:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_write_command(0x02);		      /* send for 4 bit initialization of LCD  */
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x0c);              /* Display on cursor off*/
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x06);              /* Increment cursor (shift cursor to right)*/
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_command(0x01);              /* Clear display screen*/
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	86 e7       	ldi	r24, 0x76	; 118
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <LCD_init+0x5a>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_init+0x64>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <LCD_write_number>:
* Function Name: LCD_write_num
* Purpose      : Write a specific number (num) on lcd (valid only with 4-bit mode)
* Parameters   : num  (num to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	2a 97       	sbiw	r28, 0x0a	; 10
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
	
	if(num < 0){
 2d2:	99 23       	and	r25, r25
 2d4:	4c f4       	brge	.+18     	; 0x2e8 <LCD_write_number+0x2e>
		num *= -1;
 2d6:	90 95       	com	r25
 2d8:	80 95       	com	r24
 2da:	70 95       	com	r23
 2dc:	61 95       	neg	r22
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	8f 4f       	sbci	r24, 0xFF	; 255
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
		neg_flag = 1;
 2e4:	01 e0       	ldi	r16, 0x01	; 1
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <LCD_write_number+0x30>
* Return value : void
*****************************************************************************/
void LCD_write_number(int32 num){
	int8 i = 0;
	uint8 num_arr[10];
	uint8 neg_flag = 0;
 2e8:	00 e0       	ldi	r16, 0x00	; 0
	if(num < 0){
		num *= -1;
		neg_flag = 1;
	}
	
	if(num == 0) {
 2ea:	61 15       	cp	r22, r1
 2ec:	71 05       	cpc	r23, r1
 2ee:	81 05       	cpc	r24, r1
 2f0:	91 05       	cpc	r25, r1
 2f2:	d1 f4       	brne	.+52     	; 0x328 <LCD_write_number+0x6e>
		LCD_write_char('0');
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
 2fa:	31 c0       	rjmp	.+98     	; 0x35e <LCD_write_number+0xa4>
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
		num_arr[i] = num % 10 + '0';
 2fc:	2a e0       	ldi	r18, 0x0A	; 10
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodsi4>
 308:	e1 e0       	ldi	r30, 0x01	; 1
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ec 0f       	add	r30, r28
 30e:	fd 1f       	adc	r31, r29
 310:	e1 0f       	add	r30, r17
 312:	f1 1d       	adc	r31, r1
 314:	17 fd       	sbrc	r17, 7
 316:	fa 95       	dec	r31
 318:	60 5d       	subi	r22, 0xD0	; 208
 31a:	60 83       	st	Z, r22
		num /= 10;
 31c:	62 2f       	mov	r22, r18
 31e:	73 2f       	mov	r23, r19
 320:	84 2f       	mov	r24, r20
 322:	95 2f       	mov	r25, r21
	if(num == 0) {
		LCD_write_char('0');
		return;
	}
	
	for(i = 0; num != 0 ;i++){ // 6,5,2,1
 324:	1f 5f       	subi	r17, 0xFF	; 255
 326:	01 c0       	rjmp	.+2      	; 0x32a <LCD_write_number+0x70>
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	61 15       	cp	r22, r1
 32c:	71 05       	cpc	r23, r1
 32e:	81 05       	cpc	r24, r1
 330:	91 05       	cpc	r25, r1
 332:	21 f7       	brne	.-56     	; 0x2fc <LCD_write_number+0x42>
		num_arr[i] = num % 10 + '0';
		num /= 10;
	}
	i--;
 334:	11 50       	subi	r17, 0x01	; 1
	if(neg_flag == 1){
 336:	01 30       	cpi	r16, 0x01	; 1
 338:	81 f4       	brne	.+32     	; 0x35a <LCD_write_number+0xa0>
		LCD_write_char('-');
 33a:	8d e2       	ldi	r24, 0x2D	; 45
 33c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
 340:	0c c0       	rjmp	.+24     	; 0x35a <LCD_write_number+0xa0>
	}
	while (i >= 0){
		LCD_write_char(num_arr[i]);
 342:	e1 e0       	ldi	r30, 0x01	; 1
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	ec 0f       	add	r30, r28
 348:	fd 1f       	adc	r31, r29
 34a:	e1 0f       	add	r30, r17
 34c:	f1 1d       	adc	r31, r1
 34e:	17 fd       	sbrc	r17, 7
 350:	fa 95       	dec	r31
 352:	80 81       	ld	r24, Z
 354:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
		i--;
 358:	11 50       	subi	r17, 0x01	; 1
	}
	i--;
	if(neg_flag == 1){
		LCD_write_char('-');
	}
	while (i >= 0){
 35a:	11 23       	and	r17, r17
 35c:	94 f7       	brge	.-28     	; 0x342 <LCD_write_number+0x88>
		LCD_write_char(num_arr[i]);
		i--;
	}
}
 35e:	2a 96       	adiw	r28, 0x0a	; 10
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	08 95       	ret

00000374 <LCD_write_string>:
* Purpose      : Write a string (*txt) to lcd (valid only with 4-bit mode)
*                (assume the end char of string is NULL (Ascii:'\0' - decimal:0 ))
* Parameters   : *txt  (array of char to be written on lcd)
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	8c 01       	movw	r16, r24
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	03 c0       	rjmp	.+6      	; 0x386 <LCD_write_string+0x12>
		LCD_write_char(str[i]);
 380:	0e 94 49 00 	call	0x92	; 0x92 <LCD_write_char>
* Return value : void
*****************************************************************************/
void LCD_write_string(uint8 * str){
	uint8 i;
	
	for(i = 0; str[i] != '\0'; i++){
 384:	cf 5f       	subi	r28, 0xFF	; 255
 386:	f8 01       	movw	r30, r16
 388:	ec 0f       	add	r30, r28
 38a:	f1 1d       	adc	r31, r1
 38c:	80 81       	ld	r24, Z
 38e:	81 11       	cpse	r24, r1
 390:	f7 cf       	rjmp	.-18     	; 0x380 <LCD_write_string+0xc>
		LCD_write_char(str[i]);
	}
	
}
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <led_init>:
void led_on(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, HIGH);
}

void led_off(uint8 copy_u8PortID, uint8 copy_u8PinID){
	DIO_voidSetPinValue(copy_u8PortID, copy_u8PinID, LOW);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_voidSetPinDirection>
 3a0:	08 95       	ret

000003a2 <led_toggle>:
}

void led_toggle(uint8 copy_u8PortID, uint8 copy_u8PinID){
	switch(copy_u8PortID){
 3a2:	82 34       	cpi	r24, 0x42	; 66
 3a4:	a1 f0       	breq	.+40     	; 0x3ce <led_toggle+0x2c>
 3a6:	18 f4       	brcc	.+6      	; 0x3ae <led_toggle+0xc>
 3a8:	81 34       	cpi	r24, 0x41	; 65
 3aa:	31 f0       	breq	.+12     	; 0x3b8 <led_toggle+0x16>
 3ac:	08 95       	ret
 3ae:	83 34       	cpi	r24, 0x43	; 67
 3b0:	c9 f0       	breq	.+50     	; 0x3e4 <led_toggle+0x42>
 3b2:	84 34       	cpi	r24, 0x44	; 68
 3b4:	11 f1       	breq	.+68     	; 0x3fa <led_toggle+0x58>
 3b6:	08 95       	ret
		case portA: TOGBIT(PORTA, copy_u8PinID); break;
 3b8:	2b b3       	in	r18, 0x1b	; 27
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <led_toggle+0x22>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <led_toggle+0x1e>
 3c8:	82 27       	eor	r24, r18
 3ca:	8b bb       	out	0x1b, r24	; 27
 3cc:	08 95       	ret
		case portB: TOGBIT(PORTB, copy_u8PinID); break;
 3ce:	28 b3       	in	r18, 0x18	; 24
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <led_toggle+0x38>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <led_toggle+0x34>
 3de:	82 27       	eor	r24, r18
 3e0:	88 bb       	out	0x18, r24	; 24
 3e2:	08 95       	ret
		case portC: TOGBIT(PORTC, copy_u8PinID); break;
 3e4:	25 b3       	in	r18, 0x15	; 21
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <led_toggle+0x4e>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <led_toggle+0x4a>
 3f4:	82 27       	eor	r24, r18
 3f6:	85 bb       	out	0x15, r24	; 21
 3f8:	08 95       	ret
		case portD: TOGBIT(PORTD, copy_u8PinID); break;
 3fa:	22 b3       	in	r18, 0x12	; 18
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	82 27       	eor	r24, r18
 40c:	82 bb       	out	0x12, r24	; 18
 40e:	08 95       	ret

00000410 <main>:
#include "MCAL/UART/UART_Interface.h"
#include "MCAL/SPI/SPI_Interface.h"

/* MASTER */
int main(void)
{
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	1f 92       	push	r1
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
	
	LCD_init();
 41a:	0e 94 29 01 	call	0x252	; 0x252 <LCD_init>
	Uart_init();
 41e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <Uart_init>
	LCD_write_string("REC : ");
 422:	80 e6       	ldi	r24, 0x60	; 96
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_write_string>
	LCD_write_command(0xc0);
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
	LCD_write_string("SENT: ");
 430:	87 e6       	ldi	r24, 0x67	; 103
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_write_string>
	
	SPI_master_init();
 438:	0e 94 68 03 	call	0x6d0	; 0x6d0 <SPI_master_init>
	
	// leds init
	led_init(portA, 6);
 43c:	66 e0       	ldi	r22, 0x06	; 6
 43e:	81 e4       	ldi	r24, 0x41	; 65
 440:	0e 94 cd 01 	call	0x39a	; 0x39a <led_init>
	led_init(portA, 5);
 444:	65 e0       	ldi	r22, 0x05	; 5
 446:	81 e4       	ldi	r24, 0x41	; 65
 448:	0e 94 cd 01 	call	0x39a	; 0x39a <led_init>
	led_init(portA, 4);
 44c:	64 e0       	ldi	r22, 0x04	; 4
 44e:	81 e4       	ldi	r24, 0x41	; 65
 450:	0e 94 cd 01 	call	0x39a	; 0x39a <led_init>
	led_init(portC, 6);
 454:	66 e0       	ldi	r22, 0x06	; 6
 456:	83 e4       	ldi	r24, 0x43	; 67
 458:	0e 94 cd 01 	call	0x39a	; 0x39a <led_init>

	uint8 data = 0;
 45c:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{
			Uart_Receive(&data);
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Uart_Receive>
			LCD_write_command(0x86);
 466:	86 e8       	ldi	r24, 0x86	; 134
 468:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_string("    ");
 46c:	8e e6       	ldi	r24, 0x6E	; 110
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_write_string>
			LCD_write_command(0x86);
 474:	86 e8       	ldi	r24, 0x86	; 134
 476:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_number(data);
 47a:	69 81       	ldd	r22, Y+1	; 0x01
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_write_number>
			
			switch(data){
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	82 34       	cpi	r24, 0x42	; 66
 48a:	49 f0       	breq	.+18     	; 0x49e <main+0x8e>
 48c:	18 f4       	brcc	.+6      	; 0x494 <main+0x84>
 48e:	81 33       	cpi	r24, 0x31	; 49
 490:	a9 f0       	breq	.+42     	; 0x4bc <main+0xac>
 492:	18 c0       	rjmp	.+48     	; 0x4c4 <main+0xb4>
 494:	83 34       	cpi	r24, 0x43	; 67
 496:	41 f0       	breq	.+16     	; 0x4a8 <main+0x98>
 498:	84 34       	cpi	r24, 0x44	; 68
 49a:	59 f0       	breq	.+22     	; 0x4b2 <main+0xa2>
 49c:	13 c0       	rjmp	.+38     	; 0x4c4 <main+0xb4>
				case 'A':  break;
				case 'B': led_toggle(portA, 6); break;
 49e:	66 e0       	ldi	r22, 0x06	; 6
 4a0:	81 e4       	ldi	r24, 0x41	; 65
 4a2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <led_toggle>
 4a6:	0e c0       	rjmp	.+28     	; 0x4c4 <main+0xb4>
				case 'C': led_toggle(portA, 5); break;
 4a8:	65 e0       	ldi	r22, 0x05	; 5
 4aa:	81 e4       	ldi	r24, 0x41	; 65
 4ac:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <led_toggle>
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <main+0xb4>
				case 'D': led_toggle(portA, 4); break;
 4b2:	64 e0       	ldi	r22, 0x04	; 4
 4b4:	81 e4       	ldi	r24, 0x41	; 65
 4b6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <led_toggle>
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <main+0xb4>
				case '1': led_toggle(portC, 6); break;
 4bc:	66 e0       	ldi	r22, 0x06	; 6
 4be:	83 e4       	ldi	r24, 0x43	; 67
 4c0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <led_toggle>
			}
		
			SPI_send(data);
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	0e 94 77 03 	call	0x6ee	; 0x6ee <SPI_send>
			
			
			
			LCD_write_command(0xc6);
 4ca:	86 ec       	ldi	r24, 0xC6	; 198
 4cc:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_string("   ");
 4d0:	8f e6       	ldi	r24, 0x6F	; 111
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 ba 01 	call	0x374	; 0x374 <LCD_write_string>
			LCD_write_command(0xc6);
 4d8:	86 ec       	ldi	r24, 0xC6	; 198
 4da:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_write_command>
			LCD_write_number(data);
 4de:	69 81       	ldd	r22, Y+1	; 0x01
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCD_write_number>
 4ea:	2f ef       	ldi	r18, 0xFF	; 255
 4ec:	83 ed       	ldi	r24, 0xD3	; 211
 4ee:	90 e3       	ldi	r25, 0x30	; 48
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <main+0xe0>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0xea>
 4fa:	00 00       	nop
 4fc:	b0 cf       	rjmp	.-160    	; 0x45e <main+0x4e>

000004fe <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID, uint8 copy_u8PinID, uint8 Copy_u8PinDir){
	
	if(Copy_u8PinDir == INPUT){ // input
 4fe:	41 11       	cpse	r20, r1
 500:	3b c0       	rjmp	.+118    	; 0x578 <DIO_voidSetPinDirection+0x7a>
		switch(copy_u8PortID){
 502:	82 34       	cpi	r24, 0x42	; 66
 504:	a9 f0       	breq	.+42     	; 0x530 <DIO_voidSetPinDirection+0x32>
 506:	18 f4       	brcc	.+6      	; 0x50e <DIO_voidSetPinDirection+0x10>
 508:	81 34       	cpi	r24, 0x41	; 65
 50a:	31 f0       	breq	.+12     	; 0x518 <DIO_voidSetPinDirection+0x1a>
 50c:	08 95       	ret
 50e:	83 34       	cpi	r24, 0x43	; 67
 510:	d9 f0       	breq	.+54     	; 0x548 <DIO_voidSetPinDirection+0x4a>
 512:	84 34       	cpi	r24, 0x44	; 68
 514:	29 f1       	breq	.+74     	; 0x560 <DIO_voidSetPinDirection+0x62>
 516:	08 95       	ret
			case portA: CLRBIT(DDRA, copy_u8PinID); break;
 518:	2a b3       	in	r18, 0x1a	; 26
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_voidSetPinDirection+0x26>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_voidSetPinDirection+0x22>
 528:	80 95       	com	r24
 52a:	82 23       	and	r24, r18
 52c:	8a bb       	out	0x1a, r24	; 26
 52e:	08 95       	ret
			case portB: CLRBIT(DDRB, copy_u8PinID); break;
 530:	27 b3       	in	r18, 0x17	; 23
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_voidSetPinDirection+0x3e>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_voidSetPinDirection+0x3a>
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	87 bb       	out	0x17, r24	; 23
 546:	08 95       	ret
			case portC: CLRBIT(DDRC, copy_u8PinID); break;
 548:	24 b3       	in	r18, 0x14	; 20
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_voidSetPinDirection+0x56>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_voidSetPinDirection+0x52>
 558:	80 95       	com	r24
 55a:	82 23       	and	r24, r18
 55c:	84 bb       	out	0x14, r24	; 20
 55e:	08 95       	ret
			case portD: CLRBIT(DDRD, copy_u8PinID); break;
 560:	21 b3       	in	r18, 0x11	; 17
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_voidSetPinDirection+0x6e>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_voidSetPinDirection+0x6a>
 570:	80 95       	com	r24
 572:	82 23       	and	r24, r18
 574:	81 bb       	out	0x11, r24	; 17
 576:	08 95       	ret
		}
	}
	else{ // output
		switch(copy_u8PortID){
 578:	82 34       	cpi	r24, 0x42	; 66
 57a:	a1 f0       	breq	.+40     	; 0x5a4 <DIO_voidSetPinDirection+0xa6>
 57c:	18 f4       	brcc	.+6      	; 0x584 <DIO_voidSetPinDirection+0x86>
 57e:	81 34       	cpi	r24, 0x41	; 65
 580:	31 f0       	breq	.+12     	; 0x58e <DIO_voidSetPinDirection+0x90>
 582:	08 95       	ret
 584:	83 34       	cpi	r24, 0x43	; 67
 586:	c9 f0       	breq	.+50     	; 0x5ba <DIO_voidSetPinDirection+0xbc>
 588:	84 34       	cpi	r24, 0x44	; 68
 58a:	11 f1       	breq	.+68     	; 0x5d0 <DIO_voidSetPinDirection+0xd2>
 58c:	08 95       	ret
			case portA: SETBIT(DDRA, copy_u8PinID); break;
 58e:	2a b3       	in	r18, 0x1a	; 26
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_voidSetPinDirection+0x9c>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_voidSetPinDirection+0x98>
 59e:	82 2b       	or	r24, r18
 5a0:	8a bb       	out	0x1a, r24	; 26
 5a2:	08 95       	ret
			case portB: SETBIT(DDRB, copy_u8PinID); break;
 5a4:	27 b3       	in	r18, 0x17	; 23
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_voidSetPinDirection+0xb2>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_voidSetPinDirection+0xae>
 5b4:	82 2b       	or	r24, r18
 5b6:	87 bb       	out	0x17, r24	; 23
 5b8:	08 95       	ret
			case portC: SETBIT(DDRC, copy_u8PinID); break;
 5ba:	24 b3       	in	r18, 0x14	; 20
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_voidSetPinDirection+0xc8>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_voidSetPinDirection+0xc4>
 5ca:	82 2b       	or	r24, r18
 5cc:	84 bb       	out	0x14, r24	; 20
 5ce:	08 95       	ret
			case portD: SETBIT(DDRD, copy_u8PinID); break;
 5d0:	21 b3       	in	r18, 0x11	; 17
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_voidSetPinDirection+0xde>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_voidSetPinDirection+0xda>
 5e0:	82 2b       	or	r24, r18
 5e2:	81 bb       	out	0x11, r24	; 17
 5e4:	08 95       	ret

000005e6 <__vector_1>:
	}
}

void __vector_1() __attribute__((signal));

void __vector_1(){
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
	ptr_EXT1();
 608:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <ptr_EXT1>
 60c:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <ptr_EXT1+0x1>
 610:	09 95       	icall
}
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__vector_2>:

void __vector_2() __attribute__((signal));

void __vector_2(){
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	2f 93       	push	r18
 640:	3f 93       	push	r19
 642:	4f 93       	push	r20
 644:	5f 93       	push	r21
 646:	6f 93       	push	r22
 648:	7f 93       	push	r23
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	af 93       	push	r26
 650:	bf 93       	push	r27
 652:	ef 93       	push	r30
 654:	ff 93       	push	r31
	ptr_EXT2();
 656:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <ptr_EXT2>
 65a:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <ptr_EXT2+0x1>
 65e:	09 95       	icall
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	7f 91       	pop	r23
 66e:	6f 91       	pop	r22
 670:	5f 91       	pop	r21
 672:	4f 91       	pop	r20
 674:	3f 91       	pop	r19
 676:	2f 91       	pop	r18
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <__vector_3>:

void __vector_3() __attribute__((signal));

void __vector_3(){
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	2f 93       	push	r18
 68e:	3f 93       	push	r19
 690:	4f 93       	push	r20
 692:	5f 93       	push	r21
 694:	6f 93       	push	r22
 696:	7f 93       	push	r23
 698:	8f 93       	push	r24
 69a:	9f 93       	push	r25
 69c:	af 93       	push	r26
 69e:	bf 93       	push	r27
 6a0:	ef 93       	push	r30
 6a2:	ff 93       	push	r31
	ptr_EXT3();
 6a4:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 6a8:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 6ac:	09 95       	icall
 6ae:	ff 91       	pop	r31
 6b0:	ef 91       	pop	r30
 6b2:	bf 91       	pop	r27
 6b4:	af 91       	pop	r26
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	7f 91       	pop	r23
 6bc:	6f 91       	pop	r22
 6be:	5f 91       	pop	r21
 6c0:	4f 91       	pop	r20
 6c2:	3f 91       	pop	r19
 6c4:	2f 91       	pop	r18
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <SPI_master_init>:
	// 4. Clock Polarity & Phase (0, 0)
	CLRBIT(temp_SPCR, CPOL); CLRBIT(temp_SPCR, CPHA);
	// 5. Clock Rate freq/16
	CLRBIT(temp_SPCR, SPR1); SETBIT(temp_SPCR, SPR0); // SPI2X = 0
	
	SPCR = temp_SPCR;
 6d0:	87 b3       	in	r24, 0x17	; 23
 6d2:	80 62       	ori	r24, 0x20	; 32
 6d4:	87 bb       	out	0x17, r24	; 23
 6d6:	87 b3       	in	r24, 0x17	; 23
 6d8:	8f 7b       	andi	r24, 0xBF	; 191
 6da:	87 bb       	out	0x17, r24	; 23
 6dc:	87 b3       	in	r24, 0x17	; 23
 6de:	80 61       	ori	r24, 0x10	; 16
 6e0:	87 bb       	out	0x17, r24	; 23
 6e2:	87 b3       	in	r24, 0x17	; 23
 6e4:	80 68       	ori	r24, 0x80	; 128
 6e6:	87 bb       	out	0x17, r24	; 23
 6e8:	81 e7       	ldi	r24, 0x71	; 113
 6ea:	8d b9       	out	0x0d, r24	; 13
 6ec:	08 95       	ret

000006ee <SPI_send>:
}

void SPI_send(uint8 value){
	// 0. SS low
	CLRBIT(PORTB, 4);
 6ee:	98 b3       	in	r25, 0x18	; 24
 6f0:	9f 7e       	andi	r25, 0xEF	; 239
 6f2:	98 bb       	out	0x18, r25	; 24
	// 1. Start transmission
	SPDR = value;
 6f4:	8f b9       	out	0x0f, r24	; 15
	// 2. wait
	while(READBIT(SPSR, SPIF) == 0);
 6f6:	77 9b       	sbis	0x0e, 7	; 14
 6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <SPI_send+0x8>
	uint8 val = SPDR;
 6fa:	8f b1       	in	r24, 0x0f	; 15
	SETBIT(PORTB, 4);
 6fc:	88 b3       	in	r24, 0x18	; 24
 6fe:	80 61       	ori	r24, 0x10	; 16
 700:	88 bb       	out	0x18, r24	; 24
 702:	08 95       	ret

00000704 <__vector_11>:
	timer0_disable();
}

void __vector_11() __attribute__((signal));

void __vector_11(){
 704:	1f 92       	push	r1
 706:	0f 92       	push	r0
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	0f 92       	push	r0
 70c:	11 24       	eor	r1, r1
 70e:	2f 93       	push	r18
 710:	3f 93       	push	r19
 712:	4f 93       	push	r20
 714:	5f 93       	push	r21
 716:	6f 93       	push	r22
 718:	7f 93       	push	r23
 71a:	8f 93       	push	r24
 71c:	9f 93       	push	r25
 71e:	af 93       	push	r26
 720:	bf 93       	push	r27
 722:	ef 93       	push	r30
 724:	ff 93       	push	r31
	ptr_t0();
 726:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <ptr_t0>
 72a:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <ptr_t0+0x1>
 72e:	09 95       	icall
}
 730:	ff 91       	pop	r31
 732:	ef 91       	pop	r30
 734:	bf 91       	pop	r27
 736:	af 91       	pop	r26
 738:	9f 91       	pop	r25
 73a:	8f 91       	pop	r24
 73c:	7f 91       	pop	r23
 73e:	6f 91       	pop	r22
 740:	5f 91       	pop	r21
 742:	4f 91       	pop	r20
 744:	3f 91       	pop	r19
 746:	2f 91       	pop	r18
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <__vector_10>:

void __vector_10() __attribute__((signal));

void __vector_10(){
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	2f 93       	push	r18
 75e:	3f 93       	push	r19
 760:	4f 93       	push	r20
 762:	5f 93       	push	r21
 764:	6f 93       	push	r22
 766:	7f 93       	push	r23
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
	ptr_t0();
 774:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <ptr_t0>
 778:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <ptr_t0+0x1>
 77c:	09 95       	icall
}
 77e:	ff 91       	pop	r31
 780:	ef 91       	pop	r30
 782:	bf 91       	pop	r27
 784:	af 91       	pop	r26
 786:	9f 91       	pop	r25
 788:	8f 91       	pop	r24
 78a:	7f 91       	pop	r23
 78c:	6f 91       	pop	r22
 78e:	5f 91       	pop	r21
 790:	4f 91       	pop	r20
 792:	3f 91       	pop	r19
 794:	2f 91       	pop	r18
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <Uart_init>:
void Uart_Transmit(uint8 Value){
	while(READBIT(UCSRA, UDRE) == 0);
	UDR = Value;
	while(READBIT(UCSRA, TXC) == 0);
	// Clear the flag by writing one
	SETBIT(UCSRA, TXC);
 7a0:	87 e6       	ldi	r24, 0x67	; 103
 7a2:	89 b9       	out	0x09, r24	; 9
 7a4:	8a b1       	in	r24, 0x0a	; 10
 7a6:	80 61       	ori	r24, 0x10	; 16
 7a8:	8a b9       	out	0x0a, r24	; 10
 7aa:	8a b1       	in	r24, 0x0a	; 10
 7ac:	88 60       	ori	r24, 0x08	; 8
 7ae:	8a b9       	out	0x0a, r24	; 10
 7b0:	81 b3       	in	r24, 0x11	; 17
 7b2:	82 60       	ori	r24, 0x02	; 2
 7b4:	81 bb       	out	0x11, r24	; 17
 7b6:	81 b3       	in	r24, 0x11	; 17
 7b8:	8e 7f       	andi	r24, 0xFE	; 254
 7ba:	81 bb       	out	0x11, r24	; 17
 7bc:	8b b1       	in	r24, 0x0b	; 11
 7be:	8d 7f       	andi	r24, 0xFD	; 253
 7c0:	8b b9       	out	0x0b, r24	; 11
 7c2:	8a b1       	in	r24, 0x0a	; 10
 7c4:	84 60       	ori	r24, 0x04	; 4
 7c6:	8a b9       	out	0x0a, r24	; 10
 7c8:	80 e8       	ldi	r24, 0x80	; 128
 7ca:	80 bd       	out	0x20, r24	; 32
 7cc:	08 95       	ret

000007ce <Uart_Receive>:
}

void Uart_Receive(uint8 * Value){
	while(READBIT(UCSRA,RXC) == 0);
 7ce:	5f 9b       	sbis	0x0b, 7	; 11
 7d0:	fe cf       	rjmp	.-4      	; 0x7ce <Uart_Receive>
	
	*Value = UDR;
 7d2:	2c b1       	in	r18, 0x0c	; 12
 7d4:	fc 01       	movw	r30, r24
 7d6:	20 83       	st	Z, r18
 7d8:	08 95       	ret

000007da <__udivmodsi4>:
 7da:	a1 e2       	ldi	r26, 0x21	; 33
 7dc:	1a 2e       	mov	r1, r26
 7de:	aa 1b       	sub	r26, r26
 7e0:	bb 1b       	sub	r27, r27
 7e2:	fd 01       	movw	r30, r26
 7e4:	0d c0       	rjmp	.+26     	; 0x800 <__udivmodsi4_ep>

000007e6 <__udivmodsi4_loop>:
 7e6:	aa 1f       	adc	r26, r26
 7e8:	bb 1f       	adc	r27, r27
 7ea:	ee 1f       	adc	r30, r30
 7ec:	ff 1f       	adc	r31, r31
 7ee:	a2 17       	cp	r26, r18
 7f0:	b3 07       	cpc	r27, r19
 7f2:	e4 07       	cpc	r30, r20
 7f4:	f5 07       	cpc	r31, r21
 7f6:	20 f0       	brcs	.+8      	; 0x800 <__udivmodsi4_ep>
 7f8:	a2 1b       	sub	r26, r18
 7fa:	b3 0b       	sbc	r27, r19
 7fc:	e4 0b       	sbc	r30, r20
 7fe:	f5 0b       	sbc	r31, r21

00000800 <__udivmodsi4_ep>:
 800:	66 1f       	adc	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	1a 94       	dec	r1
 80a:	69 f7       	brne	.-38     	; 0x7e6 <__udivmodsi4_loop>
 80c:	60 95       	com	r22
 80e:	70 95       	com	r23
 810:	80 95       	com	r24
 812:	90 95       	com	r25
 814:	9b 01       	movw	r18, r22
 816:	ac 01       	movw	r20, r24
 818:	bd 01       	movw	r22, r26
 81a:	cf 01       	movw	r24, r30
 81c:	08 95       	ret

0000081e <__divmodsi4>:
 81e:	05 2e       	mov	r0, r21
 820:	97 fb       	bst	r25, 7
 822:	1e f4       	brtc	.+6      	; 0x82a <__divmodsi4+0xc>
 824:	00 94       	com	r0
 826:	0e 94 26 04 	call	0x84c	; 0x84c <__negsi2>
 82a:	57 fd       	sbrc	r21, 7
 82c:	07 d0       	rcall	.+14     	; 0x83c <__divmodsi4_neg2>
 82e:	0e 94 ed 03 	call	0x7da	; 0x7da <__udivmodsi4>
 832:	07 fc       	sbrc	r0, 7
 834:	03 d0       	rcall	.+6      	; 0x83c <__divmodsi4_neg2>
 836:	4e f4       	brtc	.+18     	; 0x84a <__divmodsi4_exit>
 838:	0c 94 26 04 	jmp	0x84c	; 0x84c <__negsi2>

0000083c <__divmodsi4_neg2>:
 83c:	50 95       	com	r21
 83e:	40 95       	com	r20
 840:	30 95       	com	r19
 842:	21 95       	neg	r18
 844:	3f 4f       	sbci	r19, 0xFF	; 255
 846:	4f 4f       	sbci	r20, 0xFF	; 255
 848:	5f 4f       	sbci	r21, 0xFF	; 255

0000084a <__divmodsi4_exit>:
 84a:	08 95       	ret

0000084c <__negsi2>:
 84c:	90 95       	com	r25
 84e:	80 95       	com	r24
 850:	70 95       	com	r23
 852:	61 95       	neg	r22
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	08 95       	ret

0000085c <_exit>:
 85c:	f8 94       	cli

0000085e <__stop_program>:
 85e:	ff cf       	rjmp	.-2      	; 0x85e <__stop_program>
